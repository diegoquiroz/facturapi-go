/*
Facturapi

<br /> <br />  En esta página enlistamos todos los métodos disponibles en la API de Facturapi, así como la referencia completa de los parámetros que acepta cada uno. Para ver las propiedades anidadas de un objeto o arreglo de objetos, puedes hacer clic sobre el nombre del campo y expandirlo.  La API de Facturapi está diseñada con el estándar [REST](https://developer.mozilla.org/en-US/docs/Glossary/REST) en mente. Los endpoints de la API están agrupados por recursos, tienen URLs predecibles, las respuestas tienen formato JSON y usamos códigos HTTP de respuesta, autenticación y verbos estándar.  Durante el desarrollo, puedes usar la API de Facturapi en ambiente Test y las facturas que emitas no se enviarán al SAT ni tendrán validez fiscal.  La llave secreta que utilices para autenticarte determinará tanto el ambiente en el que se creará la factura (Test o Live), así como la organización a utilizar como emisor de tu factura, o bien como dueña del recurso que solicites crear. 

API version: 2.0
Contact: soporte@facturapi.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package facturapi

import (
	"encoding/json"
)

// checks if the CustomerCommonProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomerCommonProperties{}

// CustomerCommonProperties struct for CustomerCommonProperties
type CustomerCommonProperties struct {
	// Nombre Fiscal o Razón Social del cliente. *sin* el régimen societario (ej.: S.A. de C.V.). 
	LegalName *string `json:"legal_name,omitempty"`
	// En clientes de México contiene el RFC del cliente. Para extranjeros es opcional y representa el número de registro de identificacón tributaria, es decir, el equivalente al RFC en el país del cliente.
	TaxId *string `json:"tax_id,omitempty"`
	// Requerido para clientes nacionales. Clave del régimen fiscal del cliente.
	TaxSystem *string `json:"tax_system,omitempty"`
	// Dirección de correo electrónico al cual enviar las facturas generadas.
	Email *string `json:"email,omitempty"`
	// Teléfono del cliente.
	Phone *string `json:"phone,omitempty"`
}

// NewCustomerCommonProperties instantiates a new CustomerCommonProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomerCommonProperties() *CustomerCommonProperties {
	this := CustomerCommonProperties{}
	return &this
}

// NewCustomerCommonPropertiesWithDefaults instantiates a new CustomerCommonProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomerCommonPropertiesWithDefaults() *CustomerCommonProperties {
	this := CustomerCommonProperties{}
	return &this
}

// GetLegalName returns the LegalName field value if set, zero value otherwise.
func (o *CustomerCommonProperties) GetLegalName() string {
	if o == nil || IsNil(o.LegalName) {
		var ret string
		return ret
	}
	return *o.LegalName
}

// GetLegalNameOk returns a tuple with the LegalName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerCommonProperties) GetLegalNameOk() (*string, bool) {
	if o == nil || IsNil(o.LegalName) {
		return nil, false
	}
	return o.LegalName, true
}

// HasLegalName returns a boolean if a field has been set.
func (o *CustomerCommonProperties) HasLegalName() bool {
	if o != nil && !IsNil(o.LegalName) {
		return true
	}

	return false
}

// SetLegalName gets a reference to the given string and assigns it to the LegalName field.
func (o *CustomerCommonProperties) SetLegalName(v string) {
	o.LegalName = &v
}

// GetTaxId returns the TaxId field value if set, zero value otherwise.
func (o *CustomerCommonProperties) GetTaxId() string {
	if o == nil || IsNil(o.TaxId) {
		var ret string
		return ret
	}
	return *o.TaxId
}

// GetTaxIdOk returns a tuple with the TaxId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerCommonProperties) GetTaxIdOk() (*string, bool) {
	if o == nil || IsNil(o.TaxId) {
		return nil, false
	}
	return o.TaxId, true
}

// HasTaxId returns a boolean if a field has been set.
func (o *CustomerCommonProperties) HasTaxId() bool {
	if o != nil && !IsNil(o.TaxId) {
		return true
	}

	return false
}

// SetTaxId gets a reference to the given string and assigns it to the TaxId field.
func (o *CustomerCommonProperties) SetTaxId(v string) {
	o.TaxId = &v
}

// GetTaxSystem returns the TaxSystem field value if set, zero value otherwise.
func (o *CustomerCommonProperties) GetTaxSystem() string {
	if o == nil || IsNil(o.TaxSystem) {
		var ret string
		return ret
	}
	return *o.TaxSystem
}

// GetTaxSystemOk returns a tuple with the TaxSystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerCommonProperties) GetTaxSystemOk() (*string, bool) {
	if o == nil || IsNil(o.TaxSystem) {
		return nil, false
	}
	return o.TaxSystem, true
}

// HasTaxSystem returns a boolean if a field has been set.
func (o *CustomerCommonProperties) HasTaxSystem() bool {
	if o != nil && !IsNil(o.TaxSystem) {
		return true
	}

	return false
}

// SetTaxSystem gets a reference to the given string and assigns it to the TaxSystem field.
func (o *CustomerCommonProperties) SetTaxSystem(v string) {
	o.TaxSystem = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *CustomerCommonProperties) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerCommonProperties) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *CustomerCommonProperties) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *CustomerCommonProperties) SetEmail(v string) {
	o.Email = &v
}

// GetPhone returns the Phone field value if set, zero value otherwise.
func (o *CustomerCommonProperties) GetPhone() string {
	if o == nil || IsNil(o.Phone) {
		var ret string
		return ret
	}
	return *o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerCommonProperties) GetPhoneOk() (*string, bool) {
	if o == nil || IsNil(o.Phone) {
		return nil, false
	}
	return o.Phone, true
}

// HasPhone returns a boolean if a field has been set.
func (o *CustomerCommonProperties) HasPhone() bool {
	if o != nil && !IsNil(o.Phone) {
		return true
	}

	return false
}

// SetPhone gets a reference to the given string and assigns it to the Phone field.
func (o *CustomerCommonProperties) SetPhone(v string) {
	o.Phone = &v
}

func (o CustomerCommonProperties) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomerCommonProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LegalName) {
		toSerialize["legal_name"] = o.LegalName
	}
	if !IsNil(o.TaxId) {
		toSerialize["tax_id"] = o.TaxId
	}
	if !IsNil(o.TaxSystem) {
		toSerialize["tax_system"] = o.TaxSystem
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Phone) {
		toSerialize["phone"] = o.Phone
	}
	return toSerialize, nil
}

type NullableCustomerCommonProperties struct {
	value *CustomerCommonProperties
	isSet bool
}

func (v NullableCustomerCommonProperties) Get() *CustomerCommonProperties {
	return v.value
}

func (v *NullableCustomerCommonProperties) Set(val *CustomerCommonProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomerCommonProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomerCommonProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomerCommonProperties(val *CustomerCommonProperties) *NullableCustomerCommonProperties {
	return &NullableCustomerCommonProperties{value: val, isSet: true}
}

func (v NullableCustomerCommonProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomerCommonProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


