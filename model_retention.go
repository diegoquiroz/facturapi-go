/*
Facturapi

<br /> <br />  En esta página enlistamos todos los métodos disponibles en la API de Facturapi, así como la referencia completa de los parámetros que acepta cada uno. Para ver las propiedades anidadas de un objeto o arreglo de objetos, puedes hacer clic sobre el nombre del campo y expandirlo.  La API de Facturapi está diseñada con el estándar [REST](https://developer.mozilla.org/en-US/docs/Glossary/REST) en mente. Los endpoints de la API están agrupados por recursos, tienen URLs predecibles, las respuestas tienen formato JSON y usamos códigos HTTP de respuesta, autenticación y verbos estándar.  Durante el desarrollo, puedes usar la API de Facturapi en ambiente Test y las facturas que emitas no se enviarán al SAT ni tendrán validez fiscal.  La llave secreta que utilices para autenticarte determinará tanto el ambiente en el que se creará la factura (Test o Live), así como la organización a utilizar como emisor de tu factura, o bien como dueña del recurso que solicites crear. 

API version: 2.0
Contact: soporte@facturapi.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the Retention type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Retention{}

// Retention struct for Retention
type Retention struct {
	// ID del objeto
	Id *string `json:"id,omitempty"`
	// Fecha de registro
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// Si el valor es `true`, indica que el objeto fue creado en ambiente Live; o si es `false`, en ambiente Test.
	Livemode *bool `json:"livemode,omitempty"`
	// Estado actual de la retención. 
	Status *string `json:"status,omitempty"`
	// Dirección URL para verificar el estado de la retención en el portal del SAT. Este link es el mismo que aparece en el código QR, en el PDF de la retención.
	VerificationUrl *string `json:"verification_url,omitempty"`
	// Tipo de comprobante.
	Type *string `json:"type,omitempty"`
	// Folio fiscal de la retención, asignado por el SAT.
	Uuid *string `json:"uuid,omitempty"`
	Stamp *Stamp `json:"stamp,omitempty"`
	Customer *CuustomerInfo `json:"customer,omitempty"`
	// Clave de la retención o información de pagos de acuerdo al catálogo del SAT.
	CveRetenc *string `json:"cve_retenc,omitempty"`
	// Fecha de expedición del comprobante en formato ISO8601 (UTC String).
	FechaExp *time.Time `json:"fecha_exp,omitempty"`
	// Si la clave de la retención es “25” (Otro tipo de retenciones), este campo se usa para registrar la descripción de la retención.
	DescRetenc *string `json:"desc_retenc,omitempty"`
	// Identificador alfanumérico para control interno de la empresa y sin relevancia fiscal.
	FolioInt *string `json:"folio_int,omitempty"`
	Periodo *RetentionPropertiesPeriodo `json:"periodo,omitempty"`
	Totales *RetentionPropertiesTotales `json:"totales,omitempty"`
	// Identificador opcional que puedes usar para relacionar esta retención con tus registros y poder hacer búsquedas usando este identificador. Facturapi no valida que este campo sea único.
	ExternalId *string `json:"external_id,omitempty"`
	// Identificador único que puedes usar para evitar duplicados al reintentar una petición. Puede ser cualquier cadena de texto, mientras sea única para cada documento. Si se deja en blanco, no se tomará en cuenta. 
	IdempotencyKey *string `json:"idempotency_key,omitempty"`
	Complements []string `json:"complements,omitempty"`
	// En caso de que necesites incluir más información en el PDF, este campo te permite insertar código HTML con tu propio contenido.
	PdfCustomSection *string `json:"pdf_custom_section,omitempty"`
	// Código XML con la Addenda que se necesite agregar a la factura.
	Addenda *string `json:"addenda,omitempty"`
	Namespaces []NamespaceProperties `json:"namespaces,omitempty"`
}

// NewRetention instantiates a new Retention object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRetention() *Retention {
	this := Retention{}
	return &this
}

// NewRetentionWithDefaults instantiates a new Retention object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRetentionWithDefaults() *Retention {
	this := Retention{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Retention) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Retention) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Retention) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Retention) SetId(v string) {
	o.Id = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Retention) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Retention) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Retention) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Retention) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetLivemode returns the Livemode field value if set, zero value otherwise.
func (o *Retention) GetLivemode() bool {
	if o == nil || IsNil(o.Livemode) {
		var ret bool
		return ret
	}
	return *o.Livemode
}

// GetLivemodeOk returns a tuple with the Livemode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Retention) GetLivemodeOk() (*bool, bool) {
	if o == nil || IsNil(o.Livemode) {
		return nil, false
	}
	return o.Livemode, true
}

// HasLivemode returns a boolean if a field has been set.
func (o *Retention) HasLivemode() bool {
	if o != nil && !IsNil(o.Livemode) {
		return true
	}

	return false
}

// SetLivemode gets a reference to the given bool and assigns it to the Livemode field.
func (o *Retention) SetLivemode(v bool) {
	o.Livemode = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Retention) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Retention) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Retention) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Retention) SetStatus(v string) {
	o.Status = &v
}

// GetVerificationUrl returns the VerificationUrl field value if set, zero value otherwise.
func (o *Retention) GetVerificationUrl() string {
	if o == nil || IsNil(o.VerificationUrl) {
		var ret string
		return ret
	}
	return *o.VerificationUrl
}

// GetVerificationUrlOk returns a tuple with the VerificationUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Retention) GetVerificationUrlOk() (*string, bool) {
	if o == nil || IsNil(o.VerificationUrl) {
		return nil, false
	}
	return o.VerificationUrl, true
}

// HasVerificationUrl returns a boolean if a field has been set.
func (o *Retention) HasVerificationUrl() bool {
	if o != nil && !IsNil(o.VerificationUrl) {
		return true
	}

	return false
}

// SetVerificationUrl gets a reference to the given string and assigns it to the VerificationUrl field.
func (o *Retention) SetVerificationUrl(v string) {
	o.VerificationUrl = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Retention) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Retention) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Retention) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Retention) SetType(v string) {
	o.Type = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *Retention) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Retention) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *Retention) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *Retention) SetUuid(v string) {
	o.Uuid = &v
}

// GetStamp returns the Stamp field value if set, zero value otherwise.
func (o *Retention) GetStamp() Stamp {
	if o == nil || IsNil(o.Stamp) {
		var ret Stamp
		return ret
	}
	return *o.Stamp
}

// GetStampOk returns a tuple with the Stamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Retention) GetStampOk() (*Stamp, bool) {
	if o == nil || IsNil(o.Stamp) {
		return nil, false
	}
	return o.Stamp, true
}

// HasStamp returns a boolean if a field has been set.
func (o *Retention) HasStamp() bool {
	if o != nil && !IsNil(o.Stamp) {
		return true
	}

	return false
}

// SetStamp gets a reference to the given Stamp and assigns it to the Stamp field.
func (o *Retention) SetStamp(v Stamp) {
	o.Stamp = &v
}

// GetCustomer returns the Customer field value if set, zero value otherwise.
func (o *Retention) GetCustomer() CuustomerInfo {
	if o == nil || IsNil(o.Customer) {
		var ret CuustomerInfo
		return ret
	}
	return *o.Customer
}

// GetCustomerOk returns a tuple with the Customer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Retention) GetCustomerOk() (*CuustomerInfo, bool) {
	if o == nil || IsNil(o.Customer) {
		return nil, false
	}
	return o.Customer, true
}

// HasCustomer returns a boolean if a field has been set.
func (o *Retention) HasCustomer() bool {
	if o != nil && !IsNil(o.Customer) {
		return true
	}

	return false
}

// SetCustomer gets a reference to the given CuustomerInfo and assigns it to the Customer field.
func (o *Retention) SetCustomer(v CuustomerInfo) {
	o.Customer = &v
}

// GetCveRetenc returns the CveRetenc field value if set, zero value otherwise.
func (o *Retention) GetCveRetenc() string {
	if o == nil || IsNil(o.CveRetenc) {
		var ret string
		return ret
	}
	return *o.CveRetenc
}

// GetCveRetencOk returns a tuple with the CveRetenc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Retention) GetCveRetencOk() (*string, bool) {
	if o == nil || IsNil(o.CveRetenc) {
		return nil, false
	}
	return o.CveRetenc, true
}

// HasCveRetenc returns a boolean if a field has been set.
func (o *Retention) HasCveRetenc() bool {
	if o != nil && !IsNil(o.CveRetenc) {
		return true
	}

	return false
}

// SetCveRetenc gets a reference to the given string and assigns it to the CveRetenc field.
func (o *Retention) SetCveRetenc(v string) {
	o.CveRetenc = &v
}

// GetFechaExp returns the FechaExp field value if set, zero value otherwise.
func (o *Retention) GetFechaExp() time.Time {
	if o == nil || IsNil(o.FechaExp) {
		var ret time.Time
		return ret
	}
	return *o.FechaExp
}

// GetFechaExpOk returns a tuple with the FechaExp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Retention) GetFechaExpOk() (*time.Time, bool) {
	if o == nil || IsNil(o.FechaExp) {
		return nil, false
	}
	return o.FechaExp, true
}

// HasFechaExp returns a boolean if a field has been set.
func (o *Retention) HasFechaExp() bool {
	if o != nil && !IsNil(o.FechaExp) {
		return true
	}

	return false
}

// SetFechaExp gets a reference to the given time.Time and assigns it to the FechaExp field.
func (o *Retention) SetFechaExp(v time.Time) {
	o.FechaExp = &v
}

// GetDescRetenc returns the DescRetenc field value if set, zero value otherwise.
func (o *Retention) GetDescRetenc() string {
	if o == nil || IsNil(o.DescRetenc) {
		var ret string
		return ret
	}
	return *o.DescRetenc
}

// GetDescRetencOk returns a tuple with the DescRetenc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Retention) GetDescRetencOk() (*string, bool) {
	if o == nil || IsNil(o.DescRetenc) {
		return nil, false
	}
	return o.DescRetenc, true
}

// HasDescRetenc returns a boolean if a field has been set.
func (o *Retention) HasDescRetenc() bool {
	if o != nil && !IsNil(o.DescRetenc) {
		return true
	}

	return false
}

// SetDescRetenc gets a reference to the given string and assigns it to the DescRetenc field.
func (o *Retention) SetDescRetenc(v string) {
	o.DescRetenc = &v
}

// GetFolioInt returns the FolioInt field value if set, zero value otherwise.
func (o *Retention) GetFolioInt() string {
	if o == nil || IsNil(o.FolioInt) {
		var ret string
		return ret
	}
	return *o.FolioInt
}

// GetFolioIntOk returns a tuple with the FolioInt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Retention) GetFolioIntOk() (*string, bool) {
	if o == nil || IsNil(o.FolioInt) {
		return nil, false
	}
	return o.FolioInt, true
}

// HasFolioInt returns a boolean if a field has been set.
func (o *Retention) HasFolioInt() bool {
	if o != nil && !IsNil(o.FolioInt) {
		return true
	}

	return false
}

// SetFolioInt gets a reference to the given string and assigns it to the FolioInt field.
func (o *Retention) SetFolioInt(v string) {
	o.FolioInt = &v
}

// GetPeriodo returns the Periodo field value if set, zero value otherwise.
func (o *Retention) GetPeriodo() RetentionPropertiesPeriodo {
	if o == nil || IsNil(o.Periodo) {
		var ret RetentionPropertiesPeriodo
		return ret
	}
	return *o.Periodo
}

// GetPeriodoOk returns a tuple with the Periodo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Retention) GetPeriodoOk() (*RetentionPropertiesPeriodo, bool) {
	if o == nil || IsNil(o.Periodo) {
		return nil, false
	}
	return o.Periodo, true
}

// HasPeriodo returns a boolean if a field has been set.
func (o *Retention) HasPeriodo() bool {
	if o != nil && !IsNil(o.Periodo) {
		return true
	}

	return false
}

// SetPeriodo gets a reference to the given RetentionPropertiesPeriodo and assigns it to the Periodo field.
func (o *Retention) SetPeriodo(v RetentionPropertiesPeriodo) {
	o.Periodo = &v
}

// GetTotales returns the Totales field value if set, zero value otherwise.
func (o *Retention) GetTotales() RetentionPropertiesTotales {
	if o == nil || IsNil(o.Totales) {
		var ret RetentionPropertiesTotales
		return ret
	}
	return *o.Totales
}

// GetTotalesOk returns a tuple with the Totales field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Retention) GetTotalesOk() (*RetentionPropertiesTotales, bool) {
	if o == nil || IsNil(o.Totales) {
		return nil, false
	}
	return o.Totales, true
}

// HasTotales returns a boolean if a field has been set.
func (o *Retention) HasTotales() bool {
	if o != nil && !IsNil(o.Totales) {
		return true
	}

	return false
}

// SetTotales gets a reference to the given RetentionPropertiesTotales and assigns it to the Totales field.
func (o *Retention) SetTotales(v RetentionPropertiesTotales) {
	o.Totales = &v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *Retention) GetExternalId() string {
	if o == nil || IsNil(o.ExternalId) {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Retention) GetExternalIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalId) {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *Retention) HasExternalId() bool {
	if o != nil && !IsNil(o.ExternalId) {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *Retention) SetExternalId(v string) {
	o.ExternalId = &v
}

// GetIdempotencyKey returns the IdempotencyKey field value if set, zero value otherwise.
func (o *Retention) GetIdempotencyKey() string {
	if o == nil || IsNil(o.IdempotencyKey) {
		var ret string
		return ret
	}
	return *o.IdempotencyKey
}

// GetIdempotencyKeyOk returns a tuple with the IdempotencyKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Retention) GetIdempotencyKeyOk() (*string, bool) {
	if o == nil || IsNil(o.IdempotencyKey) {
		return nil, false
	}
	return o.IdempotencyKey, true
}

// HasIdempotencyKey returns a boolean if a field has been set.
func (o *Retention) HasIdempotencyKey() bool {
	if o != nil && !IsNil(o.IdempotencyKey) {
		return true
	}

	return false
}

// SetIdempotencyKey gets a reference to the given string and assigns it to the IdempotencyKey field.
func (o *Retention) SetIdempotencyKey(v string) {
	o.IdempotencyKey = &v
}

// GetComplements returns the Complements field value if set, zero value otherwise.
func (o *Retention) GetComplements() []string {
	if o == nil || IsNil(o.Complements) {
		var ret []string
		return ret
	}
	return o.Complements
}

// GetComplementsOk returns a tuple with the Complements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Retention) GetComplementsOk() ([]string, bool) {
	if o == nil || IsNil(o.Complements) {
		return nil, false
	}
	return o.Complements, true
}

// HasComplements returns a boolean if a field has been set.
func (o *Retention) HasComplements() bool {
	if o != nil && !IsNil(o.Complements) {
		return true
	}

	return false
}

// SetComplements gets a reference to the given []string and assigns it to the Complements field.
func (o *Retention) SetComplements(v []string) {
	o.Complements = v
}

// GetPdfCustomSection returns the PdfCustomSection field value if set, zero value otherwise.
func (o *Retention) GetPdfCustomSection() string {
	if o == nil || IsNil(o.PdfCustomSection) {
		var ret string
		return ret
	}
	return *o.PdfCustomSection
}

// GetPdfCustomSectionOk returns a tuple with the PdfCustomSection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Retention) GetPdfCustomSectionOk() (*string, bool) {
	if o == nil || IsNil(o.PdfCustomSection) {
		return nil, false
	}
	return o.PdfCustomSection, true
}

// HasPdfCustomSection returns a boolean if a field has been set.
func (o *Retention) HasPdfCustomSection() bool {
	if o != nil && !IsNil(o.PdfCustomSection) {
		return true
	}

	return false
}

// SetPdfCustomSection gets a reference to the given string and assigns it to the PdfCustomSection field.
func (o *Retention) SetPdfCustomSection(v string) {
	o.PdfCustomSection = &v
}

// GetAddenda returns the Addenda field value if set, zero value otherwise.
func (o *Retention) GetAddenda() string {
	if o == nil || IsNil(o.Addenda) {
		var ret string
		return ret
	}
	return *o.Addenda
}

// GetAddendaOk returns a tuple with the Addenda field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Retention) GetAddendaOk() (*string, bool) {
	if o == nil || IsNil(o.Addenda) {
		return nil, false
	}
	return o.Addenda, true
}

// HasAddenda returns a boolean if a field has been set.
func (o *Retention) HasAddenda() bool {
	if o != nil && !IsNil(o.Addenda) {
		return true
	}

	return false
}

// SetAddenda gets a reference to the given string and assigns it to the Addenda field.
func (o *Retention) SetAddenda(v string) {
	o.Addenda = &v
}

// GetNamespaces returns the Namespaces field value if set, zero value otherwise.
func (o *Retention) GetNamespaces() []NamespaceProperties {
	if o == nil || IsNil(o.Namespaces) {
		var ret []NamespaceProperties
		return ret
	}
	return o.Namespaces
}

// GetNamespacesOk returns a tuple with the Namespaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Retention) GetNamespacesOk() ([]NamespaceProperties, bool) {
	if o == nil || IsNil(o.Namespaces) {
		return nil, false
	}
	return o.Namespaces, true
}

// HasNamespaces returns a boolean if a field has been set.
func (o *Retention) HasNamespaces() bool {
	if o != nil && !IsNil(o.Namespaces) {
		return true
	}

	return false
}

// SetNamespaces gets a reference to the given []NamespaceProperties and assigns it to the Namespaces field.
func (o *Retention) SetNamespaces(v []NamespaceProperties) {
	o.Namespaces = v
}

func (o Retention) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Retention) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.Livemode) {
		toSerialize["livemode"] = o.Livemode
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.VerificationUrl) {
		toSerialize["verification_url"] = o.VerificationUrl
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.Stamp) {
		toSerialize["stamp"] = o.Stamp
	}
	if !IsNil(o.Customer) {
		toSerialize["customer"] = o.Customer
	}
	if !IsNil(o.CveRetenc) {
		toSerialize["cve_retenc"] = o.CveRetenc
	}
	if !IsNil(o.FechaExp) {
		toSerialize["fecha_exp"] = o.FechaExp
	}
	if !IsNil(o.DescRetenc) {
		toSerialize["desc_retenc"] = o.DescRetenc
	}
	if !IsNil(o.FolioInt) {
		toSerialize["folio_int"] = o.FolioInt
	}
	if !IsNil(o.Periodo) {
		toSerialize["periodo"] = o.Periodo
	}
	if !IsNil(o.Totales) {
		toSerialize["totales"] = o.Totales
	}
	if !IsNil(o.ExternalId) {
		toSerialize["external_id"] = o.ExternalId
	}
	if !IsNil(o.IdempotencyKey) {
		toSerialize["idempotency_key"] = o.IdempotencyKey
	}
	if !IsNil(o.Complements) {
		toSerialize["complements"] = o.Complements
	}
	if !IsNil(o.PdfCustomSection) {
		toSerialize["pdf_custom_section"] = o.PdfCustomSection
	}
	if !IsNil(o.Addenda) {
		toSerialize["addenda"] = o.Addenda
	}
	if !IsNil(o.Namespaces) {
		toSerialize["namespaces"] = o.Namespaces
	}
	return toSerialize, nil
}

type NullableRetention struct {
	value *Retention
	isSet bool
}

func (v NullableRetention) Get() *Retention {
	return v.value
}

func (v *NullableRetention) Set(val *Retention) {
	v.value = val
	v.isSet = true
}

func (v NullableRetention) IsSet() bool {
	return v.isSet
}

func (v *NullableRetention) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRetention(val *Retention) *NullableRetention {
	return &NullableRetention{value: val, isSet: true}
}

func (v NullableRetention) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRetention) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


