/*
Facturapi

<br /> <br />  En esta página enlistamos todos los métodos disponibles en la API de Facturapi, así como la referencia completa de los parámetros que acepta cada uno. Para ver las propiedades anidadas de un objeto o arreglo de objetos, puedes hacer clic sobre el nombre del campo y expandirlo.  La API de Facturapi está diseñada con el estándar [REST](https://developer.mozilla.org/en-US/docs/Glossary/REST) en mente. Los endpoints de la API están agrupados por recursos, tienen URLs predecibles, las respuestas tienen formato JSON y usamos códigos HTTP de respuesta, autenticación y verbos estándar.  Durante el desarrollo, puedes usar la API de Facturapi en ambiente Test y las facturas que emitas no se enviarán al SAT ni tendrán validez fiscal.  La llave secreta que utilices para autenticarte determinará tanto el ambiente en el que se creará la factura (Test o Live), así como la organización a utilizar como emisor de tu factura, o bien como dueña del recurso que solicites crear. 

API version: 2.0
Contact: soporte@facturapi.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OrganizationLegalInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrganizationLegalInput{}

// OrganizationLegalInput struct for OrganizationLegalInput
type OrganizationLegalInput struct {
	// Nombre comercial de la organización.
	Name string `json:"name"`
	// Nombre Fiscal o Razón Social de la organización, *sin* el régimen societario (ej.: S.A. de C.V.). 
	LegalName string `json:"legal_name"`
	// Código del Régimen Fiscal, del [catálogo del SAT](#régimen-fiscal).
	TaxSystem string `json:"tax_system"`
	// Sitio web de la organización, que aparecerá en el PDF y correos de facturas y recibos.
	Website *string `json:"website,omitempty"`
	// Dirección de correo electrónico para aclaraciones. Aparecerá en el PDF y correos de facturas y recibos.
	SupportEmail *string `json:"support_email,omitempty"`
	// Teléfono de la organización, que aparecerá en el PDF y correos de facturas y recibos.
	Phone *string `json:"phone,omitempty"`
	Address OrganizationLegalInputAddress `json:"address"`
}

// NewOrganizationLegalInput instantiates a new OrganizationLegalInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrganizationLegalInput(name string, legalName string, taxSystem string, address OrganizationLegalInputAddress) *OrganizationLegalInput {
	this := OrganizationLegalInput{}
	this.Name = name
	this.LegalName = legalName
	this.TaxSystem = taxSystem
	this.Address = address
	return &this
}

// NewOrganizationLegalInputWithDefaults instantiates a new OrganizationLegalInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrganizationLegalInputWithDefaults() *OrganizationLegalInput {
	this := OrganizationLegalInput{}
	return &this
}

// GetName returns the Name field value
func (o *OrganizationLegalInput) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *OrganizationLegalInput) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *OrganizationLegalInput) SetName(v string) {
	o.Name = v
}

// GetLegalName returns the LegalName field value
func (o *OrganizationLegalInput) GetLegalName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LegalName
}

// GetLegalNameOk returns a tuple with the LegalName field value
// and a boolean to check if the value has been set.
func (o *OrganizationLegalInput) GetLegalNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LegalName, true
}

// SetLegalName sets field value
func (o *OrganizationLegalInput) SetLegalName(v string) {
	o.LegalName = v
}

// GetTaxSystem returns the TaxSystem field value
func (o *OrganizationLegalInput) GetTaxSystem() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TaxSystem
}

// GetTaxSystemOk returns a tuple with the TaxSystem field value
// and a boolean to check if the value has been set.
func (o *OrganizationLegalInput) GetTaxSystemOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TaxSystem, true
}

// SetTaxSystem sets field value
func (o *OrganizationLegalInput) SetTaxSystem(v string) {
	o.TaxSystem = v
}

// GetWebsite returns the Website field value if set, zero value otherwise.
func (o *OrganizationLegalInput) GetWebsite() string {
	if o == nil || IsNil(o.Website) {
		var ret string
		return ret
	}
	return *o.Website
}

// GetWebsiteOk returns a tuple with the Website field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationLegalInput) GetWebsiteOk() (*string, bool) {
	if o == nil || IsNil(o.Website) {
		return nil, false
	}
	return o.Website, true
}

// HasWebsite returns a boolean if a field has been set.
func (o *OrganizationLegalInput) HasWebsite() bool {
	if o != nil && !IsNil(o.Website) {
		return true
	}

	return false
}

// SetWebsite gets a reference to the given string and assigns it to the Website field.
func (o *OrganizationLegalInput) SetWebsite(v string) {
	o.Website = &v
}

// GetSupportEmail returns the SupportEmail field value if set, zero value otherwise.
func (o *OrganizationLegalInput) GetSupportEmail() string {
	if o == nil || IsNil(o.SupportEmail) {
		var ret string
		return ret
	}
	return *o.SupportEmail
}

// GetSupportEmailOk returns a tuple with the SupportEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationLegalInput) GetSupportEmailOk() (*string, bool) {
	if o == nil || IsNil(o.SupportEmail) {
		return nil, false
	}
	return o.SupportEmail, true
}

// HasSupportEmail returns a boolean if a field has been set.
func (o *OrganizationLegalInput) HasSupportEmail() bool {
	if o != nil && !IsNil(o.SupportEmail) {
		return true
	}

	return false
}

// SetSupportEmail gets a reference to the given string and assigns it to the SupportEmail field.
func (o *OrganizationLegalInput) SetSupportEmail(v string) {
	o.SupportEmail = &v
}

// GetPhone returns the Phone field value if set, zero value otherwise.
func (o *OrganizationLegalInput) GetPhone() string {
	if o == nil || IsNil(o.Phone) {
		var ret string
		return ret
	}
	return *o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationLegalInput) GetPhoneOk() (*string, bool) {
	if o == nil || IsNil(o.Phone) {
		return nil, false
	}
	return o.Phone, true
}

// HasPhone returns a boolean if a field has been set.
func (o *OrganizationLegalInput) HasPhone() bool {
	if o != nil && !IsNil(o.Phone) {
		return true
	}

	return false
}

// SetPhone gets a reference to the given string and assigns it to the Phone field.
func (o *OrganizationLegalInput) SetPhone(v string) {
	o.Phone = &v
}

// GetAddress returns the Address field value
func (o *OrganizationLegalInput) GetAddress() OrganizationLegalInputAddress {
	if o == nil {
		var ret OrganizationLegalInputAddress
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *OrganizationLegalInput) GetAddressOk() (*OrganizationLegalInputAddress, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *OrganizationLegalInput) SetAddress(v OrganizationLegalInputAddress) {
	o.Address = v
}

func (o OrganizationLegalInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrganizationLegalInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["legal_name"] = o.LegalName
	toSerialize["tax_system"] = o.TaxSystem
	if !IsNil(o.Website) {
		toSerialize["website"] = o.Website
	}
	if !IsNil(o.SupportEmail) {
		toSerialize["support_email"] = o.SupportEmail
	}
	if !IsNil(o.Phone) {
		toSerialize["phone"] = o.Phone
	}
	toSerialize["address"] = o.Address
	return toSerialize, nil
}

type NullableOrganizationLegalInput struct {
	value *OrganizationLegalInput
	isSet bool
}

func (v NullableOrganizationLegalInput) Get() *OrganizationLegalInput {
	return v.value
}

func (v *NullableOrganizationLegalInput) Set(val *OrganizationLegalInput) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationLegalInput) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationLegalInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationLegalInput(val *OrganizationLegalInput) *NullableOrganizationLegalInput {
	return &NullableOrganizationLegalInput{value: val, isSet: true}
}

func (v NullableOrganizationLegalInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationLegalInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


