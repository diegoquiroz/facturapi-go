/*
Facturapi

Testing InvoiceAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_InvoiceAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test InvoiceAPIService CancelInvoice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var invoiceId string

		resp, httpRes, err := apiClient.InvoiceAPI.CancelInvoice(context.Background(), invoiceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoiceAPIService CreateInvoice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.InvoiceAPI.CreateInvoice(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoiceAPIService DownloadCancellationReceiptXml", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var invoiceId string

		resp, httpRes, err := apiClient.InvoiceAPI.DownloadCancellationReceiptXml(context.Background(), invoiceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoiceAPIService DownloadInvoice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var invoiceId string
		var format string

		resp, httpRes, err := apiClient.InvoiceAPI.DownloadInvoice(context.Background(), invoiceId, format).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoiceAPIService GetInvoice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var invoiceId string

		resp, httpRes, err := apiClient.InvoiceAPI.GetInvoice(context.Background(), invoiceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoiceAPIService ListInvoices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.InvoiceAPI.ListInvoices(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoiceAPIService SendInvoiceByEmail", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var invoiceId string

		resp, httpRes, err := apiClient.InvoiceAPI.SendInvoiceByEmail(context.Background(), invoiceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
