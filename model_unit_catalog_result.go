/*
Facturapi

<br /> <br />  En esta página enlistamos todos los métodos disponibles en la API de Facturapi, así como la referencia completa de los parámetros que acepta cada uno. Para ver las propiedades anidadas de un objeto o arreglo de objetos, puedes hacer clic sobre el nombre del campo y expandirlo.  La API de Facturapi está diseñada con el estándar [REST](https://developer.mozilla.org/en-US/docs/Glossary/REST) en mente. Los endpoints de la API están agrupados por recursos, tienen URLs predecibles, las respuestas tienen formato JSON y usamos códigos HTTP de respuesta, autenticación y verbos estándar.  Durante el desarrollo, puedes usar la API de Facturapi en ambiente Test y las facturas que emitas no se enviarán al SAT ni tendrán validez fiscal.  La llave secreta que utilices para autenticarte determinará tanto el ambiente en el que se creará la factura (Test o Live), así como la organización a utilizar como emisor de tu factura, o bien como dueña del recurso que solicites crear. 

API version: 2.0
Contact: soporte@facturapi.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package facturapi

import (
	"encoding/json"
)

// checks if the UnitCatalogResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UnitCatalogResult{}

// UnitCatalogResult struct for UnitCatalogResult
type UnitCatalogResult struct {
	// Clave del catálogo
	Key *string `json:"key,omitempty"`
	// Descripción
	Description *string `json:"description,omitempty"`
	// Número del 0 al 1 que representa el nivel de coincidencia del resultado con respecto a la consulta de búsqueda. 
	Score *float32 `json:"score,omitempty"`
}

// NewUnitCatalogResult instantiates a new UnitCatalogResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnitCatalogResult() *UnitCatalogResult {
	this := UnitCatalogResult{}
	return &this
}

// NewUnitCatalogResultWithDefaults instantiates a new UnitCatalogResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnitCatalogResultWithDefaults() *UnitCatalogResult {
	this := UnitCatalogResult{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *UnitCatalogResult) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnitCatalogResult) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *UnitCatalogResult) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *UnitCatalogResult) SetKey(v string) {
	o.Key = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UnitCatalogResult) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnitCatalogResult) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UnitCatalogResult) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UnitCatalogResult) SetDescription(v string) {
	o.Description = &v
}

// GetScore returns the Score field value if set, zero value otherwise.
func (o *UnitCatalogResult) GetScore() float32 {
	if o == nil || IsNil(o.Score) {
		var ret float32
		return ret
	}
	return *o.Score
}

// GetScoreOk returns a tuple with the Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnitCatalogResult) GetScoreOk() (*float32, bool) {
	if o == nil || IsNil(o.Score) {
		return nil, false
	}
	return o.Score, true
}

// HasScore returns a boolean if a field has been set.
func (o *UnitCatalogResult) HasScore() bool {
	if o != nil && !IsNil(o.Score) {
		return true
	}

	return false
}

// SetScore gets a reference to the given float32 and assigns it to the Score field.
func (o *UnitCatalogResult) SetScore(v float32) {
	o.Score = &v
}

func (o UnitCatalogResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UnitCatalogResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Score) {
		toSerialize["score"] = o.Score
	}
	return toSerialize, nil
}

type NullableUnitCatalogResult struct {
	value *UnitCatalogResult
	isSet bool
}

func (v NullableUnitCatalogResult) Get() *UnitCatalogResult {
	return v.value
}

func (v *NullableUnitCatalogResult) Set(val *UnitCatalogResult) {
	v.value = val
	v.isSet = true
}

func (v NullableUnitCatalogResult) IsSet() bool {
	return v.isSet
}

func (v *NullableUnitCatalogResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnitCatalogResult(val *UnitCatalogResult) *NullableUnitCatalogResult {
	return &NullableUnitCatalogResult{value: val, isSet: true}
}

func (v NullableUnitCatalogResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnitCatalogResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


