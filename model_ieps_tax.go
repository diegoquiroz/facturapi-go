/*
Facturapi

<br /> <br />  En esta página enlistamos todos los métodos disponibles en la API de Facturapi, así como la referencia completa de los parámetros que acepta cada uno. Para ver las propiedades anidadas de un objeto o arreglo de objetos, puedes hacer clic sobre el nombre del campo y expandirlo.  La API de Facturapi está diseñada con el estándar [REST](https://developer.mozilla.org/en-US/docs/Glossary/REST) en mente. Los endpoints de la API están agrupados por recursos, tienen URLs predecibles, las respuestas tienen formato JSON y usamos códigos HTTP de respuesta, autenticación y verbos estándar.  Durante el desarrollo, puedes usar la API de Facturapi en ambiente Test y las facturas que emitas no se enviarán al SAT ni tendrán validez fiscal.  La llave secreta que utilices para autenticarte determinará tanto el ambiente en el que se creará la factura (Test o Live), así como la organización a utilizar como emisor de tu factura, o bien como dueña del recurso que solicites crear. 

API version: 2.0
Contact: soporte@facturapi.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package facturapi

import (
	"encoding/json"
)

// checks if the IepsTax type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IepsTax{}

// IepsTax struct for IepsTax
type IepsTax struct {
	BaseTax
	// Indica la manera de cobrar el impuesto, y puede tener los valores:  `\"sum_before_taxes\"`: Aplica primero el IEPS al subtotal y usa el resultado como base del resto de impuestos en el producto.  `\"break_down\"`: Cobra y desgloza el IEPS al mismo nivel que el resto de los impuestos en el producto.  `\"unit\"`: Aplica el IEPS antes del precio unitario, y usa el precio unitario original como base para el resto de impuestos.  Consulta con tu contador qué caso aplica para tu giro de empresa y producto. 
	IepsMode *string `json:"ieps_mode,omitempty"`
}

// NewIepsTax instantiates a new IepsTax object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIepsTax(rate float32) *IepsTax {
	this := IepsTax{}
	this.Rate = rate
	var type_ string = "IVA"
	this.Type = &type_
	var factor string = "Tasa"
	this.Factor = &factor
	var withholding bool = false
	this.Withholding = &withholding
	var iepsMode string = "sum_before_taxes"
	this.IepsMode = &iepsMode
	return &this
}

// NewIepsTaxWithDefaults instantiates a new IepsTax object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIepsTaxWithDefaults() *IepsTax {
	this := IepsTax{}
	var iepsMode string = "sum_before_taxes"
	this.IepsMode = &iepsMode
	return &this
}

// GetIepsMode returns the IepsMode field value if set, zero value otherwise.
func (o *IepsTax) GetIepsMode() string {
	if o == nil || IsNil(o.IepsMode) {
		var ret string
		return ret
	}
	return *o.IepsMode
}

// GetIepsModeOk returns a tuple with the IepsMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IepsTax) GetIepsModeOk() (*string, bool) {
	if o == nil || IsNil(o.IepsMode) {
		return nil, false
	}
	return o.IepsMode, true
}

// HasIepsMode returns a boolean if a field has been set.
func (o *IepsTax) HasIepsMode() bool {
	if o != nil && !IsNil(o.IepsMode) {
		return true
	}

	return false
}

// SetIepsMode gets a reference to the given string and assigns it to the IepsMode field.
func (o *IepsTax) SetIepsMode(v string) {
	o.IepsMode = &v
}

func (o IepsTax) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IepsTax) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedBaseTax, errBaseTax := json.Marshal(o.BaseTax)
	if errBaseTax != nil {
		return map[string]interface{}{}, errBaseTax
	}
	errBaseTax = json.Unmarshal([]byte(serializedBaseTax), &toSerialize)
	if errBaseTax != nil {
		return map[string]interface{}{}, errBaseTax
	}
	if !IsNil(o.IepsMode) {
		toSerialize["ieps_mode"] = o.IepsMode
	}
	return toSerialize, nil
}

type NullableIepsTax struct {
	value *IepsTax
	isSet bool
}

func (v NullableIepsTax) Get() *IepsTax {
	return v.value
}

func (v *NullableIepsTax) Set(val *IepsTax) {
	v.value = val
	v.isSet = true
}

func (v NullableIepsTax) IsSet() bool {
	return v.isSet
}

func (v *NullableIepsTax) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIepsTax(val *IepsTax) *NullableIepsTax {
	return &NullableIepsTax{value: val, isSet: true}
}

func (v NullableIepsTax) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIepsTax) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


