/*
Facturapi

<br /> <br />  En esta página enlistamos todos los métodos disponibles en la API de Facturapi, así como la referencia completa de los parámetros que acepta cada uno. Para ver las propiedades anidadas de un objeto o arreglo de objetos, puedes hacer clic sobre el nombre del campo y expandirlo.  La API de Facturapi está diseñada con el estándar [REST](https://developer.mozilla.org/en-US/docs/Glossary/REST) en mente. Los endpoints de la API están agrupados por recursos, tienen URLs predecibles, las respuestas tienen formato JSON y usamos códigos HTTP de respuesta, autenticación y verbos estándar.  Durante el desarrollo, puedes usar la API de Facturapi en ambiente Test y las facturas que emitas no se enviarán al SAT ni tendrán validez fiscal.  La llave secreta que utilices para autenticarte determinará tanto el ambiente en el que se creará la factura (Test o Live), así como la organización a utilizar como emisor de tu factura, o bien como dueña del recurso que solicites crear. 

API version: 2.0
Contact: soporte@facturapi.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package facturapi-go

import (
	"encoding/json"
)

// checks if the NominaPercepcionesProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NominaPercepcionesProperties{}

// NominaPercepcionesProperties Objeto para indicar las percepciones aplicables.
type NominaPercepcionesProperties struct {
	Percepcion []NominaPercepcionProperties `json:"percepcion,omitempty"`
	JubilacionPensionRetiro *NominaJubilacionProperties `json:"jubilacion_pension_retiro,omitempty"`
	SeparacionIndemnizacion *NominaSeparacionProperties `json:"separacion_indemnizacion,omitempty"`
}

// NewNominaPercepcionesProperties instantiates a new NominaPercepcionesProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNominaPercepcionesProperties() *NominaPercepcionesProperties {
	this := NominaPercepcionesProperties{}
	return &this
}

// NewNominaPercepcionesPropertiesWithDefaults instantiates a new NominaPercepcionesProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNominaPercepcionesPropertiesWithDefaults() *NominaPercepcionesProperties {
	this := NominaPercepcionesProperties{}
	return &this
}

// GetPercepcion returns the Percepcion field value if set, zero value otherwise.
func (o *NominaPercepcionesProperties) GetPercepcion() []NominaPercepcionProperties {
	if o == nil || IsNil(o.Percepcion) {
		var ret []NominaPercepcionProperties
		return ret
	}
	return o.Percepcion
}

// GetPercepcionOk returns a tuple with the Percepcion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NominaPercepcionesProperties) GetPercepcionOk() ([]NominaPercepcionProperties, bool) {
	if o == nil || IsNil(o.Percepcion) {
		return nil, false
	}
	return o.Percepcion, true
}

// HasPercepcion returns a boolean if a field has been set.
func (o *NominaPercepcionesProperties) HasPercepcion() bool {
	if o != nil && !IsNil(o.Percepcion) {
		return true
	}

	return false
}

// SetPercepcion gets a reference to the given []NominaPercepcionProperties and assigns it to the Percepcion field.
func (o *NominaPercepcionesProperties) SetPercepcion(v []NominaPercepcionProperties) {
	o.Percepcion = v
}

// GetJubilacionPensionRetiro returns the JubilacionPensionRetiro field value if set, zero value otherwise.
func (o *NominaPercepcionesProperties) GetJubilacionPensionRetiro() NominaJubilacionProperties {
	if o == nil || IsNil(o.JubilacionPensionRetiro) {
		var ret NominaJubilacionProperties
		return ret
	}
	return *o.JubilacionPensionRetiro
}

// GetJubilacionPensionRetiroOk returns a tuple with the JubilacionPensionRetiro field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NominaPercepcionesProperties) GetJubilacionPensionRetiroOk() (*NominaJubilacionProperties, bool) {
	if o == nil || IsNil(o.JubilacionPensionRetiro) {
		return nil, false
	}
	return o.JubilacionPensionRetiro, true
}

// HasJubilacionPensionRetiro returns a boolean if a field has been set.
func (o *NominaPercepcionesProperties) HasJubilacionPensionRetiro() bool {
	if o != nil && !IsNil(o.JubilacionPensionRetiro) {
		return true
	}

	return false
}

// SetJubilacionPensionRetiro gets a reference to the given NominaJubilacionProperties and assigns it to the JubilacionPensionRetiro field.
func (o *NominaPercepcionesProperties) SetJubilacionPensionRetiro(v NominaJubilacionProperties) {
	o.JubilacionPensionRetiro = &v
}

// GetSeparacionIndemnizacion returns the SeparacionIndemnizacion field value if set, zero value otherwise.
func (o *NominaPercepcionesProperties) GetSeparacionIndemnizacion() NominaSeparacionProperties {
	if o == nil || IsNil(o.SeparacionIndemnizacion) {
		var ret NominaSeparacionProperties
		return ret
	}
	return *o.SeparacionIndemnizacion
}

// GetSeparacionIndemnizacionOk returns a tuple with the SeparacionIndemnizacion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NominaPercepcionesProperties) GetSeparacionIndemnizacionOk() (*NominaSeparacionProperties, bool) {
	if o == nil || IsNil(o.SeparacionIndemnizacion) {
		return nil, false
	}
	return o.SeparacionIndemnizacion, true
}

// HasSeparacionIndemnizacion returns a boolean if a field has been set.
func (o *NominaPercepcionesProperties) HasSeparacionIndemnizacion() bool {
	if o != nil && !IsNil(o.SeparacionIndemnizacion) {
		return true
	}

	return false
}

// SetSeparacionIndemnizacion gets a reference to the given NominaSeparacionProperties and assigns it to the SeparacionIndemnizacion field.
func (o *NominaPercepcionesProperties) SetSeparacionIndemnizacion(v NominaSeparacionProperties) {
	o.SeparacionIndemnizacion = &v
}

func (o NominaPercepcionesProperties) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NominaPercepcionesProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Percepcion) {
		toSerialize["percepcion"] = o.Percepcion
	}
	if !IsNil(o.JubilacionPensionRetiro) {
		toSerialize["jubilacion_pension_retiro"] = o.JubilacionPensionRetiro
	}
	if !IsNil(o.SeparacionIndemnizacion) {
		toSerialize["separacion_indemnizacion"] = o.SeparacionIndemnizacion
	}
	return toSerialize, nil
}

type NullableNominaPercepcionesProperties struct {
	value *NominaPercepcionesProperties
	isSet bool
}

func (v NullableNominaPercepcionesProperties) Get() *NominaPercepcionesProperties {
	return v.value
}

func (v *NullableNominaPercepcionesProperties) Set(val *NominaPercepcionesProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableNominaPercepcionesProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableNominaPercepcionesProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNominaPercepcionesProperties(val *NominaPercepcionesProperties) *NullableNominaPercepcionesProperties {
	return &NullableNominaPercepcionesProperties{value: val, isSet: true}
}

func (v NullableNominaPercepcionesProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNominaPercepcionesProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


