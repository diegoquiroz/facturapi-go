openapi: 3.1.0
info:
  contact:
    email: soporte@facturapi.io
    name: Facturapi
    url: https://www.facturapi.io
  description: |
    <br />
    <br />

    En esta página enlistamos todos los métodos
    disponibles en la API de Facturapi, así como
    la referencia completa de los parámetros
    que acepta cada uno. Para ver las propiedades
    anidadas de un objeto o arreglo de objetos,
    puedes hacer clic sobre el nombre del campo y
    expandirlo.

    La API de Facturapi está diseñada con el
    estándar [REST](https://developer.mozilla.org/en-US/docs/Glossary/REST)
    en mente. Los endpoints de la API están agrupados
    por recursos, tienen URLs predecibles, las respuestas
    tienen formato JSON y usamos códigos HTTP de respuesta,
    autenticación y verbos estándar.

    Durante el desarrollo, puedes usar la API de Facturapi en
    ambiente Test y las facturas que emitas no se enviarán al SAT ni
    tendrán validez fiscal.

    La llave secreta que utilices para autenticarte
    determinará tanto el ambiente en el que se creará la factura
    (Test o Live), así como la organización a utilizar como emisor
    de tu factura, o bien como dueña del recurso que solicites crear.
  title: Facturapi
  version: "2.0"
  x-logo:
    url: https://www.facturapi.io/img/logo.svg
    altText: Facturapi
servers:
- url: https://www.facturapi.io/v2
tags:
- name: tools
  x-displayName: Herramientas
- name: customer
  x-displayName: Clientes
- name: product
  x-displayName: Productos
- name: invoice
  x-displayName: Facturas
- name: receipt
  x-displayName: Recibos
- name: retention
  x-displayName: Retenciones
- name: organization
  x-displayName: Organizaciones
- description: |
    Los eventos ocurren cuando Facturapi realiza una operación
    de manera asíncrona, es decir, fuera del ciclo de vida de
    una petición a la API.

    Para recibir estos eventos en tu servidor, puedes registrar una URL de escucha
    creando un **Webhook** desde tu dashboard: https://dashboard.facturapi.io/integration/webhooks
  name: events
  x-displayName: Eventos
- description: "Principales catálogos del SAT, incluídos aquí por conveniencia. Puedes\
    \ consultar estos y más catálogos desde el portal oficial del SAT: http://omawww.sat.gob.mx/tramitesyservicios/Paginas/anexo_20_version3-3.htm\n\
    \n### Forma de pago\n\nClave | Descripción\n:-----:| -----------\n\"01\" | Efectivo\n\
    \"02\" | Cheque nominativo\n\"03\" | Transferencia electrónica de fondos\n\"04\"\
    \ | Tarjeta de crédito\n\"05\" | Monedero electrónico\n\"06\" | Dinero electró\
    nico\n\"08\" | Vales de despensa\n\"12\" | Dación en pago\n\"13\" | Pago por subrogació\
    n\n\"14\" | Pago por consignación\n\"15\" | Condonación\n\"17\" | Compensació\
    n\n\"23\" | Novación\n\"24\" | Confusión\n\"25\" | Remisión de deuda\n\"26\" |\
    \ Prescripción o caducidad\n\"27\" | A satisfacción del acreedor\n\"28\" | Tarjeta\
    \ de débito\n\"29\" | Tarjeta de servicios\n\"30\" | Aplicación de anticipos\n\
    \"31\" | Intermediario pagos\n\"99\" | Por definir\n\n### Método de pago\n\nClave\
    \ | Descripción\n:-----:| -----------\n\"PUE\" | Pago en una sola exhibición (de\
    \ contado).\n\"PPD\" | Pago en parcialidades o diferido (total o parcialmente\
    \ a crédito). Requiere expedir un comprobante de pago cuando se reciba un pago\
    \ subsecuente.\n\n### Uso CFDI\n\nClave | Descripción | Régimen Fiscal \n:-----:|\
    \ ----------- | -----------\n\"G01\" | Adquisición de mercancías. | 601, 603,\
    \ 606, 612, 620, 621, 622, 623, 624, 625,626\n\"G02\" | Devoluciones, descuentos\
    \ o bonificaciones. | 601, 603, 606, 612, 620, 621, 622, 623, 624, 625,626\n\"\
    G03\" | Gastos en general. | 601, 603, 606, 612, 620, 621, 622, 623, 624, 625,\
    \ 626\n\"I01\" | Construcciones. | 601, 603, 606, 612, 620, 621, 622, 623, 624,\
    \ 625, 626\n\"I02\" | Mobiliario y equipo de oficina por inversiones. | 601, 603,\
    \ 606, 612, 620, 621, 622, 623, 624, 625, 626\n\"I03\" | Equipo de transporte.\
    \ | 601, 603, 606, 612, 620, 621, 622, 623, 624, 625, 626\n\"I04\" | Equipo de\
    \ computo y accesorios. | 601, 603, 606, 612, 620, 621, 622, 623, 624, 625, 626\n\
    \"I05\" | Dados, troqueles, moldes, matrices y herramental. | 601, 603, 606, 612,\
    \ 620, 621, 622, 623, 624, 625, 626\n\"I06\" | Comunicaciones telefónicas. | 601,\
    \ 603, 606, 612, 620, 621, 622, 623, 624, 625, 626\n\"I07\" | Comunicaciones satelitales.\
    \ | 601, 603, 606, 612, 620, 621, 622, 623, 624, 625, 626\n\"I08\" | Otra maquinaria\
    \ y equipo. | 601, 603, 606, 612, 620, 621, 622, 623, 624, 625, 626\n\"D01\" |\
    \ Honorarios médicos, dentales y gastos hospitalarios. | 605, 606, 608, 611, 612,\
    \ 614, 607, 615, 625\n\"D02\" | Gastos médicos por incapacidad o discapacidad.\
    \ | 605, 606, 608, 611, 612, 614, 607, 615, 625\n\"D03\" | Gastos funerales. |\
    \ 605, 606, 608, 611, 612, 614, 607, 615, 625\n\"D04\" | Donativos. | 605, 606,\
    \ 608, 611, 612, 614, 607, 615, 625\n\"D05\" | Intereses reales efectivamente\
    \ pagados por créditos hipotecarios (casa habitación). | 605, 606, 608, 611, 612,\
    \ 614, 607, 615, 625\n\"D06\" | Aportaciones voluntarias al SAR. | 605, 606, 608,\
    \ 611, 612, 614, 607, 615, 625\n\"D07\" | Primas por seguros de gastos médicos.\
    \ | 605, 606, 608, 611, 612, 614, 607, 615, 625\n\"D08\" | Gastos de transportació\
    n escolar obligatoria. | 605, 606, 608, 611, 612, 614, 607, 615, 625\n\"D09\"\
    \ | Depósitos en cuentas para el ahorro, primas que tengan como base planes de\
    \ pensiones. | 605, 606, 608, 611, 612, 614, 607, 615, 625\n\"D10\" | Pagos por\
    \ servicios educativos (colegiaturas). | 605, 606, 608, 611, 612, 614, 607, 615,\
    \ 625\n\"S01\" | Sin efectos fiscales.  | 601, 603, 605, 606, 608, 610, 611, 612,\
    \ 614, 616, 620, 621, 622, 623, 624, 607, 615, 625, 626\n\"CP01\" | Pagos |  601,\
    \ 603, 605, 606, 608, 610, 611, 612, 614, 616, 620, 621, 622, 623, 624, 607, 615,\
    \ 625, 626\n\"CN01\" | Nómina | 605\n\n### Relación entre facturas\n\nClave |\
    \ Descripción\n:-----:| -----------\n\"01\" | Nota de crédito de los documentos\
    \ relacionados\n\"02\" | Nota de débito de los documentos relacionados\n\"03\"\
    \ | Devolución de mercancía sobre facturas o traslados previos\n\"04\" | Sustitució\
    n de los CFDI previos\n\"05\" | Traslados de mercancias facturados previamente\n\
    \"06\" | Factura generada por los traslados previos\n\"07\" | CFDI por aplicació\
    n de anticipo\n\"08\" | Factura generada por pagos en parcialidades\n\"09\" |\
    \ Factura generada por pagos diferidos\n\n### Régimen Fiscal\n\nClave | Descripció\
    n\n:-----:| -----------\n\"601\" |\tGeneral de Ley Personas Morales\n\"603\" |\t\
    Personas Morales con Fines no Lucrativos\n\"605\" |\tSueldos y Salarios e Ingresos\
    \ Asimilados a Salarios\n\"606\" |\tArrendamiento\n\"608\" |\tDemás ingresos\n\
    \"609\" |\tConsolidación\n\"610\" |\tResidentes en el Extranjero sin Establecimiento\
    \ Permanente en México\n\"611\" |\tIngresos por Dividendos (socios y accionistas)\n\
    \"612\" |\tPersonas Físicas con Actividades Empresariales y Profesionales\n\"\
    614\" |\tIngresos por intereses\n\"616\" |\tSin obligaciones fiscales\n\"620\"\
    \ |\tSociedades Cooperativas de Producción que optan por diferir sus ingresos\n\
    \"621\" |\tIncorporación Fiscal\n\"622\" |\tActividades Agrícolas, Ganaderas,\
    \ Silvícolas y Pesqueras\n\"623\" |\tOpcional para Grupos de Sociedades\n\"624\"\
    \ |\tCoordinados\n\"628\" |\tHidrocarburos\n\"607\" |\tRégimen de Enajenación\
    \ o Adquisición de Bienes\n\"629\" |\tDe los Regímenes Fiscales Preferentes y\
    \ de las Empresas Multinacionales\n\"630\" |\tEnajenación de acciones en bolsa\
    \ de valores\n\"615\" |\tRégimen de los ingresos por obtención de premios\n\"\
    625\" |\tRégimen de las Actividades Empresariales con ingresos a través de Plataformas\
    \ Tecnológicas\n\"626\" | Régimen Simplificado de Confianza\n\n### Meses y bimestres\n\
    \nClave | Descripción\n:-----:| -----------\n01 | Enero\n02 | Febrero\n03 | Marzo\n\
    04 | Abril\n05 | Mayo\n06 | Junio\n07 | Julio\n08 | Agosto\n09 | Septiembre\n\
    10 | Octubre\n11 | Noviembre\n12 | Diciembre\n13 | Enero-Febrero\n14 | Marzo-Abril\n\
    15 | Mayo-Junio\n16 | Julio-Agosto\n17 | Septiembre-Octubre\n18 | Noviembre-Diciembre\n\
    \n### Tipo de Contrato\n\nClave | Descripción\n:-----:| -----------\n\"01\" |\
    \ Contrato de trabajo por tiempo indeterminado\n\"02\" | Contrato de trabajo para\
    \ obra determinada\n\"03\" | Contrato de trabajo por tiempo determinado\n\"04\"\
    \ | Contrato de trabajo por temporada\n\"05\" | Contrato de trabajo sujeto a prueba\n\
    \"06\" | Contrato de trabajo con capacitación inicial\n\"07\" | Modalidad de contratació\
    n por pago de hora laborada\n\"08\" | Modalidad de trabajo por comisión laboral\n\
    \"09\" | Modalidades de contratación donde no existe relación de trabajo\n\"10\"\
    \ | Jubilación, pensión, retiro.\n\"99\" | Otro contrato\n\n### Tipo de Jornada\n\
    \nClave | Descripción\n:-----:| -----------\n\"01\" | Diurna\n\"02\" | Nocturna\n\
    \"03\" | Mixta\n\"04\" | Por hora\n\"05\" | Reducida\n\"06\" | Continuada\n\"\
    07\" | Partida\n\"08\" | Por turnos\n\"99\" | Otra Jornada\n\n### Tipo de Régimen\n\
    \nClave | Descripción\n:-----:| -----------\n\"02\" | Sueldos (Incluye ingresos\
    \ señalados en la fracción I del artículo 94 de LISR)\n\"03\" | Jubilados\n\"\
    04\" | Pensionados\n\"05\" | Asimilados Miembros Sociedades Cooperativas Produccion\n\
    \"06\" | Asimilados Integrantes Sociedades Asociaciones Civiles\n\"07\" | Asimilados\
    \ Miembros consejos\n\"08\" | Asimilados comisionistas\n\"09\" | Asimilados Honorarios\n\
    \"10\" | Asimilados acciones\n\"11\" | Asimilados otros\n\"12\" | Jubilados o\
    \ Pensionados\n\"13\" | Indemnización o Separación\n\"99\" | Otro Regimen\n\n\
    ### Riesgo del Puesto\n\nClave | Descripción\n:-----:| -----------\n\"1\" | Clase\
    \ I\n\"2\" | Clase II\n\"3\" | Clase III\n\"4\" | Clase IV\n\"5\" | Clase V\n\"\
    99\" | No aplica\n\n### Periodicidad del Pago\n\nClave | Descripción\n:-----:|\
    \ -----------\n\"01\" | Diario\n\"02\" | Semanal\n\"03\" | Catorcenal\n\"04\"\
    \ | Quincenal\n\"05\" | Mensual\n\"06\" | Bimestral\n\"07\" | Unidad obra\n\"\
    08\" | Comisión\n\"09\" | Precio alzado\n\"10\" | Decenal\n\"99\" | Otra Periodicidad\n\
    \n### Tipo de Percepción\n\nClave | Descripción\n:-----:| -----------\n\"001\"\
    \ | Sueldos, Salarios  Rayas y Jornales\n\"002\" | Gratificación Anual (Aguinaldo)\n\
    \"003\" | Participación de los Trabajadores en las Utilidades PTU\n\"004\" | Reembolso\
    \ de Gastos Médicos Dentales y Hospitalarios\n\"005\" | Fondo de Ahorro\n\"006\"\
    \ | Caja de ahorro\n\"009\" | Contribuciones a Cargo del Trabajador Pagadas por\
    \ el Patrón\n\"010\" | Premios por puntualidad\n\"011\" | Prima de Seguro de vida\n\
    \"012\" | Seguro de Gastos Médicos Mayores\n\"013\" | Cuotas Sindicales Pagadas\
    \ por el Patrón\n\"014\" | Subsidios por incapacidad\n\"015\" | Becas para trabajadores\
    \ y/o hijos\n\"019\" | Horas extra\n\"020\" | Prima dominical\n\"021\" | Prima\
    \ vacacional\n\"022\" | Prima por antigüedad\n\"023\" | Pagos por separación\n\
    \"024\" | Seguro de retiro\n\"025\" | Indemnizaciones\n\"026\" | Reembolso por\
    \ funeral\n\"027\" | Cuotas de seguridad social pagadas por el patrón\n\"028\"\
    \ | Comisiones\n\"029\" | Vales de despensa\n\"030\" | Vales de restaurante\n\"\
    031\" | Vales de gasolina\n\"032\" | Vales de ropa\n\"033\" | Ayuda para renta\n\
    \"034\" | Ayuda para artículos escolares\n\"035\" | Ayuda para anteojos\n\"036\"\
    \ | Ayuda para transporte\n\"037\" | Ayuda para gastos de funeral\n\"038\" | Otros\
    \ ingresos por salarios\n\"039\" | Jubilaciones, pensiones o haberes de retiro\n\
    \"044\" | Jubilaciones, pensiones o haberes de retiro en parcialidades\n\"045\"\
    \ | Ingresos en acciones o títulos valor que representan bienes\n\"046\" | Ingresos\
    \ asimilados a salarios\n\"047\" | Alimentación diferentes a los establecidos\
    \ en el Art 94 último párrafo LISR\n\"048\" | Habitación\n\"049\" | Premios por\
    \ asistencia\n\"050\" | Viáticos\n\"051\" | Pagos por gratificaciones, primas,\
    \ compensaciones, recompensas u otros en parcialidades\n\"052\" | Pagos por jubilació\
    n en parcialidades derivados de una resolución judicial\n\"053\" | Pagos por jubilació\
    n en una sola exhibición derivados de la ejecución de una resolución judicial\n\
    \n### Tipo de Horas\n\nClave | Descripción\n:-----:| -----------\n\"01\" | Dobles\n\
    \"02\" | Triples\n\"03\" | Simples\n\n### Tipo de Deducción\n\nClave | Descripció\
    n\n:-----:| -----------\n\"001\" | Seguridad social\n\"002\" | ISR\n\"003\" |\
    \ Aportaciones a retiro, cesantía en edad avanzada y vejez.\n\"004\" | Otros\n\
    \"005\" | Aportaciones a Fondo de vivienda\n\"006\" | Descuento por incapacidad\n\
    \"007\" | Pensión alimenticia\n\"008\" | Renta\n\"009\" | Préstamos provenientes\
    \ del Fondo Nacional de la Vivienda para los Trabajadores\n\"010\" | Pago por\
    \ crédito de vivienda\n\"011\" | Pago de abonos INFONACOT\n\"012\" | Anticipo\
    \ de salarios\n\"013\" | Pagos hechos con exceso al trabajador\n\"014\" | Errores\n\
    \"015\" | Pérdidas\n\"016\" | Averías\n\"017\" | Adquisición de artículos producidos\
    \ por la empresa o establecimiento\n\"018\" | Cuotas para la constitución y fomento\
    \ de sociedades cooperativas y de cajas de ahorro\n\"019\" | Cuotas sindicales\n\
    \"020\" | Ausencia (Ausentismo)\n\"021\" | Cuotas obrero patronales\n\"022\" |\
    \ Impuestos Locales\n\"023\" | Aportaciones voluntarias\n\"024\" | Ajuste en Gratificació\
    n Anual (Aguinaldo) Exento\n\"025\" | Ajuste en Gratificación Anual (Aguinaldo)\
    \ Gravado\n\"026\" | Ajuste en Participación de los Trabajadores en las Utilidades\
    \ PTU Exento\n\"027\" | Ajuste en Participación de los Trabajadores en las Utilidades\
    \ PTU Gravado\n\"028\" | Ajuste en Reembolso de Gastos Médicos Dentales y Hospitalarios\
    \ Exento\n\"029\" | Ajuste en Fondo de ahorro Exento\n\"030\" | Ajuste en Caja\
    \ de ahorro Exento\n\"031\" | Ajuste en Contribuciones a Cargo del Trabajador\
    \ Pagadas por el Patrón Exento\n\"032\" | Ajuste en Premios por puntualidad Gravado\n\
    \"033\" | Ajuste en Prima de Seguro de vida Exento\n\"034\" | Ajuste en Seguro\
    \ de Gastos Médicos Mayores Exento\n\"035\" | Ajuste en Cuotas Sindicales Pagadas\
    \ por el Patrón Exento\n\"036\" | Ajuste en Subsidios por incapacidad Exento\n\
    \"037\" | Ajuste en Becas para trabajadores y/o hijos Exento\n\"038\" | Ajuste\
    \ en Horas extra Exento\n\"039\" | Ajuste en Horas extra Gravado\n\"040\" | Ajuste\
    \ en Prima dominical Exento\n\"041\" | Ajuste en Prima dominical Gravado\n\"042\"\
    \ | Ajuste en Prima vacacional Exento\n\"043\" | Ajuste en Prima vacacional Gravado\n\
    \"044\" | Ajuste en Prima por antigüedad Exento\n\"045\" | Ajuste en Prima por\
    \ antigüedad Gravado\n\"046\" | Ajuste en Pagos por separación Exento\n\"047\"\
    \ | Ajuste en Pagos por separación Gravado\n\"048\" | Ajuste en Seguro de retiro\
    \ Exento\n\"049\" | Ajuste en Indemnizaciones Exento\n\"050\" | Ajuste en Indemnizaciones\
    \ Gravado\n\"051\" | Ajuste en Reembolso por funeral Exento\n\"052\" | Ajuste\
    \ en Cuotas de seguridad social pagadas por el patrón Exento\n\"053\" | Ajuste\
    \ en Comisiones Gravado\n\"054\" | Ajuste en Vales de despensa Exento\n\"055\"\
    \ | Ajuste en Vales de restaurante Exento\n\"056\" | Ajuste en Vales de gasolina\
    \ Exento\n\"057\" | Ajuste en Vales de ropa Exento\n\"058\" | Ajuste en Ayuda\
    \ para renta Exento\n\"059\" | Ajuste en Ayuda para artículos escolares Exento\n\
    \"060\" | Ajuste en Ayuda para anteojos Exento\n\"061\" | Ajuste en Ayuda para\
    \ transporte Exento\n\"062\" | Ajuste en Ayuda para gastos de funeral Exento\n\
    \"063\" | Ajuste en Otros ingresos por salarios Exento\n\"064\" | Ajuste en Otros\
    \ ingresos por salarios Gravado\n\"065\" | Ajuste en Jubilaciones, pensiones o\
    \ haberes de retiro en una sola exhibición Exento\n\"066\" | Ajuste en Jubilaciones,\
    \ pensiones o haberes de retiro en una sola exhibición Gravado\n\"067\" | Ajuste\
    \ en Pagos por separación Acumulable\n\"068\" | Ajuste en Pagos por separació\
    n No acumulable\n\"069\" | Ajuste en Jubilaciones, pensiones o haberes de retiro\
    \ en parcialidades Exento\n\"070\" | Ajuste en Jubilaciones, pensiones o haberes\
    \ de retiro en parcialidades Gravado\n\"071\" | Ajuste en Subsidio para el empleo\
    \ (efectivamente entregado al trabajador)\n\"072\" | Ajuste en Ingresos en acciones\
    \ o títulos valor que representan bienes Exento\n\"073\" | Ajuste en Ingresos\
    \ en acciones o títulos valor que representan bienes Gravado\n\"074\" | Ajuste\
    \ en Alimentación Exento\n\"075\" | Ajuste en Alimentación Gravado\n\"076\" |\
    \ Ajuste en Habitación Exento\n\"077\" | Ajuste en Habitación Gravado\n\"078\"\
    \ | Ajuste en Premios por asistencia\n\"079\" | Ajuste en Pagos distintos a los\
    \ listados\n\"080\" | Ajuste en Viáticos gravados\n\"081\" | Ajuste en Viáticos\
    \ (entregados al trabajador)\n\"082\" | Ajuste en Fondo de ahorro Gravado\n\"\
    083\" | Ajuste en Caja de ahorro Gravado\n\"084\" | Ajuste en Prima de Seguro\
    \ de vida Gravado\n\"085\" | Ajuste en Seguro de Gastos Médicos Mayores Gravado\n\
    \"086\" | Ajuste en Subsidios por incapacidad Gravado\n\"087\" | Ajuste en Becas\
    \ para trabajadores y/o hijos Gravado\n\"088\" | Ajuste en Seguro de retiro Gravado\n\
    \"089\" | Ajuste en Vales de despensa Gravado\n\"090\" | Ajuste en Vales de restaurante\
    \ Gravado\n\"091\" | Ajuste en Vales de gasolina Gravado\n\"092\" | Ajuste en\
    \ Vales de ropa Gravado\n\"093\" | Ajuste en Ayuda para renta Gravado\n\"094\"\
    \ | Ajuste en Ayuda para artículos escolares Gravado\n\"095\" | Ajuste en Ayuda\
    \ para anteojos Gravado\n\"096\" | Ajuste en Ayuda para transporte Gravado\n\"\
    097\" | Ajuste en Ayuda para gastos de funeral Gravado\n\"098\" | Ajuste a ingresos\
    \ asimilados a salarios gravados\n\"099\" | Ajuste a ingresos por sueldos y salarios\
    \ gravados\n\"100\" | Ajuste en Viáticos exentos\n\"101\" | ISR Retenido de ejercicio\
    \ anterior\n\"102\" | Ajuste a pagos por gratificaciones, primas, compensaciones,\
    \ recompensas u otros\n\"103\" | Ajuste a pagos en parcialidades derivados de\
    \ una resolución judicial gravados\n\"104\" | Ajuste a pagos en parcialidades\
    \ derivados de una resolución judicial exentos\n\"105\" | Ajuste a pagos en una\
    \ sola exhibición derivados de una resolución judicial gravados\n\"106\" | Ajuste\
    \ a pagos en una sola exhibición derivados de una resolución judicial exentos\n\
    \"107\" | Ajuste al Subsidio Causado\n\n### Tipo de Otro Pago\n\nClave | Descripció\
    n\n:-----:| -----------\n\"001\" | Reintegro de ISR pagado en exceso.\n\"002\"\
    \ | Subsidio para el empleo (efectivamente entregado al trabajador).\n\"003\"\
    \ | Viáticos (entregados al trabajador).\n\"004\" | Aplicación de saldo a favor\
    \ por compensación anual.\n\"005\" | Reintegro de ISR retenido en exceso de ejercicio\
    \ anterior\n\"006\" | Alimentos en bienes (Servicios de comedor y comida).\n\"\
    007\" | ISR ajustado por subsidio.\n\"008\" | Subsidio efectivamente entregado\
    \ que no correspondía.\n\"009\" | Reembolso de descuentos efectuados para el cré\
    dito de vivienda.\n\"999\" | Pagos distintos a los listados.\n\n### Tipo de Incapacidad\n\
    \nClave | Descripción\n:-----:| -----------\n\"01\" | Riesgo de trabajo.\n\"02\"\
    \ | Enfermedad en general.\n\"03\" | Maternidad.\n\"04\" | Licencia por cuidados\
    \ médicos de hijos diagnosticados con cáncer.\n\n### Clave de retención\n\nClave\
    \ | Descripción\n:-----:| -----------\n\"01\" | Servicios profesionales.\n\"02\"\
    \ | Regalías por derechos de autor.\n\"03\" | Autotransporte terrestre de carga.\n\
    \"04\" | Servicios prestados por comisionistas.\n\"05\" | Arrendamiento.\n\"06\"\
    \ | Enajenación de acciones.\n\"07\" | Enajenación de bienes objeto de la LIEPS,\
    \ a través de mediadores, agentes, representantes, corredores, consignatarios\
    \ o distribuidores.\n\"08\" | Enajenación de bienes inmuebles consignada en escritura\
    \ pública.\n\"09\" | Enajenación de otros bienes, no consignada en escritura pú\
    blica.\n\"10\" | Adquisición de desperdicios industriales.\n\"11\" | Adquisició\
    n de bienes consignada en escritura pública.\n\"12\" | Adquisición de otros bienes,\
    \ no consignada en escritura pública.\n\"13\" | Otros retiros de AFORE.\n\"14\"\
    \ | Dividendos o utilidades distribuidas.\n\"15\" | Remanente distribuible.\n\"\
    16\" | Intereses.\n\"17\" | Arrendamiento en fideicomiso.\n\"18\" | Pagos realizados\
    \ a favor de residentes en el extranjero.\n\"19\" | Enajenación de acciones u\
    \ operaciones en bolsa de valores.\n\"20\" | Obtención de premios.\n\"21\" | Fideicomisos\
    \ que no realizan actividades empresariales.\n\"22\" | Planes personales de retiro.\n\
    \"23\" | Intereses reales deducibles por créditos hipotecarios.\n\"24\" | Operaciones\
    \ Financieras Derivadas de Capital.\n\"25\" | Otro tipo de retenciones.\n\"26\"\
    \ | Servicios mediante Plataformas Tecnológicas\n\n### Validez de obligaciones\n\
    \n| Validez | IVA Exento | Tasa 0% | Tasa 8% Fronteriza Norte | Tasa 8% Fronteriza\
    \ Sur | Tasa 16%\n|:-------:|:----------:|:-------:|:------------------------:|:----------------------:|:--------\n\
    | \"0\" <td colspan=\"5\">El contribuyente no está autorizado para emitir facturas</td>\n\
    | \"1\" | Sí | Sí | No | No | Sí\n| \"2\" | Sí | Sí | Sí | No | Sí\n| \"3\" |\
    \ Sí | Sí | No | Sí | Sí\n| \"4\" | Sí | Sí | Sí | Sí | Sí\n\n#### Situación del\
    \ contribuyente\n\n| Valor | Explicación\n|:-----:|:-----------\n| \"Previsto\"\
    \ | Vía buzón tributario o notificaciones por estrados, el contribuyente recibe\
    \ un oficio en el que se establece su situación y se le solicita que demuestre\
    \ la materialidad de las operaciones facturadas.\n| \"Presunto\" | El contribuyente\
    \ notificado se considera presunto cuando, en su página web, la autoridad emite\
    \ sus datos dentro de la relación de los EFOS, es decir, en las listas negras\
    \ del SAT.\n| \"Desvirtuado\" | En este caso, el contribuyente acusado de operaciones\
    \ inexistentes ya aportó a la autoridad la documentación e información pertinente\
    \ para desvirtuar los hechos que llevaron a notificarlo.\n| \"Definitivo\" | En\
    \ este caso, el EFO no atendió el llamado de la autoridad en el plazo de 15 dí\
    as, a partir de la última notificación; o bien, no pudo desvirtuar los hechos\
    \ imputados.\n| \"Sentencia favorable\" | Los contribuyentes EFOS “definitivos”\
    \ que se inconforman e interponen algún medio de defensa, el cual concluye a su\
    \ favor, son clasificados en la lista de “sentencia favorable”.\n| \"EFOS de informació\
    n suprimida\" | En esta categoría, se encuentran los EFOS “presuntos” y “definitivos”\
    \ que presentaron algún medio de defensa (amparo, juicio de nulidad) y, por lo\
    \ tanto, un juez ordenó suprimir sus datos de la lista, sin ser eliminados.\n"
  name: sat_keys
  x-displayName: Claves de catálogos
- description: |
    <SchemaDefinition schemaRef="#/components/schemas/Customer" />
  name: customer_model
  x-displayName: Objeto Customer
- description: |
    <SchemaDefinition schemaRef="#/components/schemas/Product" />
  name: product_model
  x-displayName: Objeto Product
- description: |
    <SchemaDefinition schemaRef="#/components/schemas/Invoice" />
  name: invoice_model
  x-displayName: Objeto Invoice
- description: |
    <SchemaDefinition schemaRef="#/components/schemas/Receipt" />
  name: receipt_model
  x-displayName: Objeto Receipt
- description: |
    <SchemaDefinition schemaRef="#/components/schemas/Retention" />
  name: retention_model
  x-displayName: Objeto Retention
- description: |
    <SchemaDefinition schemaRef="#/components/schemas/Organization" />
  name: organization_model
  x-displayName: Objeto Organización
paths:
  /customers:
    get:
      description: Regresa una lista paginada de todos los clientes de una organización
        o realiza una búsqueda de acuerdo a parámetros
      operationId: listCustomers
      parameters:
      - description: Consulta. Texto a buscar en `legal_name` (nombre fiscal) o en
          `tax_id` (RFC).
        explode: true
        in: query
        name: q
        required: false
        schema:
          type: string
        style: form
      - $ref: '#/components/parameters/SearchDate'
      - $ref: '#/components/parameters/SearchPage'
      - $ref: '#/components/parameters/SearchLimit'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerSearchResult'
          description: Resultado de la búsqueda
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthenticated'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/UnexpectedError'
      security:
      - Secret Live Key: []
      - Secret Test Key: []
      summary: Listar clientes
      tags:
      - customer
      x-codeSamples:
      - lang: Bash
        label: cURL
        source: |
          curl https://www.facturapi.io/v2/customers \
            -H "Authorization: Bearer sk_test_API_KEY"
            -G
            -d 'q=Dunder'
            -d 'date[gt]=2021-07-14T06:00:00.000Z'
            -d 'date[lt]=2021-08-14T06:00:00.000Z'
            -d 'page=1'
      - lang: JavaScript
        label: Node.js
        source: |
          const Facturapi = require('facturapi');
          const facturapi = new Facturapi('sk_test_API_KEY');
          const searchResult = await facturapi.customers.list({
            q: 'Dunder',
            date: {
              gt: new Date('2021-07-14T06:00:00.000Z'),
              lt: new Date('2021-08-14T06:00:00.000Z')
            },
            page: 1
          });
      - lang: csharp
        label: C#
        source: |
          var facturapi = new FacturapiClient("sk_test_API_KEY");
          var searchResult = await facturapi.Customer.ListAsync(new Dictionary<string, object>
          {
            ["q"] = "Dunder",
            ["date"] = new Dictionary<string, object>
              {
                ["gt"] = new DateTime("2021-07-14T06:00:00.000Z"),
                ["lt"] = new DateTime("2021-08-14T06:00:00.000Z")
              },
            ["page"] = 1
          });
      - lang: PHP
        source: |
          $facturapi = new Facturapi( "sk_test_API_KEY" );
          $searchResult = $facturapi->Customers->all([
            "q" => "Dunder",
            "date" => [
              "gt" => new DateTime("2021-07-14T06:00:00.000Z"),
              "lt" => new DateTime("2021-08-14T06:00:00.000Z")
            ],
            "page" => 1
          ]);
    post:
      description: |
        Registra un nuevo cliente en Facturapi.

        Esta llamada valida que los datos fiscales coincidan con
        los registros del SAT para ese RFC, de lo contrario, la llamada
        devolverá un error indicando el problema.

        Una vez creado el cliente y obtenido un objeto de respuesta,
        te recomendamos guardar el ID en tu base de datos junto a la información
        de tu cliente. Posteriormente, puedes llamar al encpoint de Crear Factura
        pasando el ID del cliente en lugar de repetir la información.

        Por último, ten en cuenta que los clientes que crees en ambiente _Test_ **no se
        comparten** con el ambiente _Live_.
      operationId: createCustomer
      requestBody:
        $ref: '#/components/requestBodies/CustomerCreate'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
          description: Nuevo objeto `Customer` creado
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
          description: Un objeto `Customer` con la misma información ya existía
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthenticated'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/UnexpectedError'
      security:
      - Secret Live Key: []
      - Secret Test Key: []
      summary: Crear cliente
      tags:
      - customer
      x-codeSamples:
      - lang: Bash
        label: cURL
        source: |
          curl https://www.facturapi.io/v2/customers \
            -H "Authorization: Bearer sk_test_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
                  "legal_name": "Dunder Mifflin",
                  "email": "email@example.com",
                  "tax_id": "ABC101010111",
                  "tax_system": "601",
                  "address": {
                    "zip": "01234"
                  }
                }'
      - lang: JavaScript
        label: Node.js
        source: |
          const Facturapi = require('facturapi');
          const facturapi = new Facturapi('sk_test_API_KEY');
          const customer = await facturapi.customers.create({
            legal_name: 'Dunder Mifflin',
            email: 'email@example.com',
            tax_id: 'ABC101010111',
            tax_system: '601',
            address: {
              zip: '01234'
            }
          });
      - lang: csharp
        label: C#
        source: |
          var facturapi = new FacturapiClient("sk_test_API_KEY");
          var customer = await facturapi.Customer.CreateAsync(new Dictionary<string, object>
          {
            ["legal_name"] = "Dunder Mifflin",
            ["email"] = "email@example.com",
            ["tax_id"] = "ABC101010111",
            ["tax_system"] = "601",
            ["address"] = new Dictionary<string, object>
            {
              ["zip"] = "01234"
            }
          });
      - lang: PHP
        source: |
          $facturapi = new Facturapi( "sk_test_API_KEY" );
          $customer = $facturapi->Customers->create([
            "email" => "email@example.com",
            "legal_name" => "Dunder Mifflin",
            "tax_id" => "ABC101010111",
            "tax_system" => "601",
            "address" => [
              "zip" => "01234"
            ]
          ]);
  /customers/{customer_id}:
    delete:
      description: Elimina el cliente de tu organización. Las facturas asociadas al
        cliente **no** se eliminarán.
      operationId: deleteCustomer
      parameters:
      - description: ID del objeto a eliminar
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
          description: Objeto `Customer` eliminado correctamente
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthenticated'
        "500":
          $ref: '#/components/responses/UnexpectedError'
      security:
      - Secret Live Key: []
      - Secret Test Key: []
      summary: Eliminar cliente
      tags:
      - customer
      x-codeSamples:
      - lang: Bash
        label: cURL
        source: |
          curl https://www.facturapi.io/v2/customers/590ce6c56d04f840aa8438af \
            -X DELETE \
            -H "Authorization: Bearer sk_test_API_KEY"
      - lang: JavaScript
        label: Node.js
        source: |
          const Facturapi = require('facturapi');
          const facturapi = new Facturapi('sk_test_API_KEY');
          const removedCustomer = await facturapi.customers.del('590ce6c56d04f840aa8438af');
      - lang: csharp
        label: C#
        source: |
          var facturapi = new FacturapiClient("sk_test_API_KEY");
          var customer = await facturapi.Customer.DeleteAsync("590ce6c56d04f840aa8438af");
      - lang: PHP
        source: |
          $facturapi = new Facturapi( "sk_test_API_KEY" );
          $facturapi->Customers->delete( "5a3fefd9f508333611ad6b43" );
    get:
      description: Regresa el objeto 'Customer' relacionado al `id` especificado.
      operationId: getCustomer
      parameters:
      - description: ID del objeto a obtener
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
          description: Objeto `Customer`
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthenticated'
        "500":
          $ref: '#/components/responses/UnexpectedError'
      security:
      - Secret Live Key: []
      - Secret Test Key: []
      summary: Obtener cliente por ID
      tags:
      - customer
      x-codeSamples:
      - lang: Bash
        label: cURL
        source: |
          curl https://www.facturapi.io/v2/customers/590ce6c56d04f840aa8438af \
            -H "Authorization: Bearer sk_test_API_KEY"
      - lang: JavaScript
        label: Node.js
        source: |
          const Facturapi = require('facturapi');
          const facturapi = new Facturapi('sk_test_API_KEY');
          const customer = await facturapi.customers.retrieve('590ce6c56d04f840aa8438af');
      - lang: csharp
        label: C#
        source: |
          var facturapi = new FacturapiClient("sk_test_API_KEY");
          var customer = await facturapi.Customer.RetrieveAsync("590ce6c56d04f840aa8438af");
      - lang: PHP
        source: |
          $facturapi = new Facturapi( "sk_test_API_KEY" );
          $customer = $facturapi->Customers->retrieve( "5a3ee743f508333611ad6b3c" );
    put:
      description: "Actualiza la información de un cliente existente, asignando los\
        \ valores de los parámetros enviados. Los parámetros que no se envíen en la\
        \ petición no se modificarán."
      operationId: editCustomer
      parameters:
      - description: ID del objeto a editar
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/CustomerEdit'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
          description: Objeto `Customer` editado correctamente
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthenticated'
        "500":
          $ref: '#/components/responses/UnexpectedError'
      security:
      - Secret Live Key: []
      - Secret Test Key: []
      summary: Editar cliente
      tags:
      - customer
      x-codeSamples:
      - lang: Bash
        label: cURL
        source: |
          curl https://www.facturapi.io/v2/customers/590ce6c56d04f840aa8438af \
            -X PUT
            -H "Authorization: Bearer sk_test_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
                  "email": "jdoe@example.com",
                  "address": {
                    "street": "Santa Monica Ave."
                  }
                }'
      - lang: JavaScript
        label: Node.js
        source: |
          const Facturapi = require('facturapi');
          const facturapi = new Facturapi('sk_test_API_KEY');
          const customer = await facturapi.customers.update(
            '590ce6c56d04f840aa8438af',
            {
              email: 'jdoe@example.com',
              address: {
                street: 'Santa Monica Ave.'
              }
            }
          );
      - lang: csharp
        label: C#
        source: |
          var facturapi = new FacturapiClient("sk_test_API_KEY");
          var customer = await facturapi.Customer.UpdateAsync(
            "590ce6c56d04f840aa8438af",
            new Dictionary<string, object>
            {
              ["email"] = "jdoe@example.com",
              ["address"] = new Dictionary<string, object>
              {
                ["street"] = "Santa Monica Ave."
              }
            }
          );
      - lang: PHP
        source: |
          $facturapi = new Facturapi( "sk_test_API_KEY" );
          $customer = $facturapi->Customers->update("590ce6c56d04f840aa8438af", [
            "email" => "jdoe@example.com",
            "legal_name" => "Dunder Mifflin",
            "address" => [
              "street" => "Santa Monica Ave."
            ]
          ]);
  /customers/{customer_id}/tax-info-validation:
    get:
      description: |
        Valida que la información fiscal del cliente coincida con los registros del SAT.

        Su función principal es validar que los datos del cliente registraado siguen cumpliendo la validación del SAT.

        :::tip
          Las operaciones de crear cliente, editar cliente y crear factura ya realizan una
          validación de la información del cliente, por lo que **no** es necesario llamar a este endpoint
          antes de realizar dichas operaciones.
        :::
      operationId: validateCustomerTaxInfo
      parameters:
      - description: ID del objeto `Customer` a validar
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/validateCustomerTaxInfo_200_response'
          description: Resultado de la validación
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthenticated'
        "500":
          $ref: '#/components/responses/UnexpectedError'
      security:
      - Secret Live Key: []
      summary: Validar información fiscal
      tags:
      - customer
      x-codeSamples:
      - lang: Bash
        label: cURL
        source: |
          curl https://www.facturapi.io/v2/customers/590ce6c56d04f840aa8438af/tax-info-validation \
            -H "Authorization: Bearer sk_test_API_KEY"
      - lang: JavaScript
        label: Node.js
        source: |
          const Facturapi = require('facturapi');
          const facturapi = new Facturapi('sk_test_API_KEY');
          const customer = await facturapi.customers.validateTaxInfo('590ce6c56d04f840aa8438af');
      - lang: csharp
        label: C#
        source: |
          var facturapi = new FacturapiClient("sk_test_API_KEY");
          var customer = await facturapi.Customer.ValidateTaxInfoAsync("590ce6c56d04f840aa8438af");
      - lang: PHP
        source: |
          $facturapi = new Facturapi( "sk_test_API_KEY" );
          $customer = $facturapi->Customers->validateTaxInfo( "5a3ee743f508333611ad6b3c" );
  /products:
    get:
      description: Regresa una lista paginada de todos los productos de una organización
        o realiza una búsqueda de acuerdo a parámetros
      operationId: listProducts
      parameters:
      - description: Consulta.  Texto a buscar en la descripción del producto o SKU.
        explode: true
        in: query
        name: q
        required: false
        schema:
          type: string
        style: form
      - $ref: '#/components/parameters/SearchPage'
      - $ref: '#/components/parameters/SearchLimit'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductSearchResult'
          description: Resultado de la búsqueda
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthenticated'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/UnexpectedError'
      security:
      - Secret Live Key: []
      - Secret Test Key: []
      summary: Listar productos
      tags:
      - product
      x-codeSamples:
      - lang: Bash
        label: cURL
        source: |
          curl https://www.facturapi.io/v2/products \
            -H "Authorization: Bearer sk_test_API_KEY"
            -G
            -d 'q=ukelele'
            -d 'page=1'
      - lang: JavaScript
        label: Node.js
        source: |
          const Facturapi = require('facturapi');
          const facturapi = new Facturapi('sk_test_API_KEY');
          const searchResult = await facturapi.products.list({
            q: 'ukelele',
            page: 1
          });
      - lang: csharp
        label: C#
        source: |
          var facturapi = new FacturapiClient("sk_test_API_KEY");
          var searchResult = await facturapi.Product.ListAsync(new Dictionary<string, object>
          {
            ["q"] = "ukelele",
            ["date"] = new Dictionary<string, object>
              {
                ["gt"] = new DateTime("2021-07-14T06:00:00.000Z"),
                ["lt"] = new DateTime("2021-08-14T06:00:00.000Z")
              },
            ["page"] = 1
          });
      - lang: PHP
        source: |
          $facturapi = new Facturapi( "sk_test_API_KEY" );
          $searchResult = $facturapi->Products->all([
            "q" => "ukelele",
            "page" => 1
          ]);
    post:
      description: |
        Registra un nuevo producto o servicio en tu catálogo de Facturapi.

        Puedes usar el ID del producto para crear facturas sin tener que enviar todos los datos del producto cada vez.

        Te en cuenta que los productos que crees en ambiente _Test_ **no se
        comparten** con el ambiente _Live_.
      operationId: createProduct
      requestBody:
        $ref: '#/components/requestBodies/ProductCreate'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: Nuevo objeto `Product` creado
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthenticated'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/UnexpectedError'
      security:
      - Secret Live Key: []
      - Secret Test Key: []
      summary: Crear producto
      tags:
      - product
      x-codeSamples:
      - lang: Bash
        label: cURL
        source: |
          curl https://www.facturapi.io/v2/products \
            -H "Authorization: Bearer sk_test_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
                  "description": "Ukelele",
                  "product_key": "60131324",
                  "price": 345.60,
                  "sku": "ABC1234"
              }'
      - lang: JavaScript
        label: Node.js
        source: |
          const Facturapi = require('facturapi');
          const facturapi = new Facturapi('sk_test_API_KEY');
          const product = await facturapi.products.create({
            description: 'Ukelele',
            product_key: '60131324',
            price: 345.60,
            sku: 'ABC1234'
          });
      - lang: csharp
        label: C#
        source: |
          var facturapi = new FacturapiClient("sk_test_API_KEY");
          var product = await facturapi.Product.CreateAsync(new Dictionary<string, object>
          {
            ["description"] = "Ukelele",
            ["product_key"] = "60131324",
            ["price"] = 345.60,
            ["sku"] = "ABC1234"
          });
      - lang: PHP
        source: |
          $facturapi = new Facturapi( "sk_test_API_KEY" );
          $product = $facturapi->Products->create([
            "description" => "Ukelele",
            "product_key" => "60131324",
            "price" => 345.60,
            "sku" => "ABC1234"
          ]);
  /products/{product_id}:
    delete:
      description: Elimina el producto de tu organización. Las facturas asociadas
        al producto **no** se eliminarán.
      operationId: deleteProduct
      parameters:
      - description: ID del objeto a eliminar
        explode: false
        in: path
        name: product_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: Objeto `Product` eliminado correctamente
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthenticated'
        "500":
          $ref: '#/components/responses/UnexpectedError'
      security:
      - Secret Live Key: []
      - Secret Test Key: []
      summary: Eliminar producto
      tags:
      - product
      x-codeSamples:
      - lang: Bash
        label: cURL
        source: |
          curl https://www.facturapi.io/v2/products/590e22c26d04f840aa8438b2 \
            -X DELETE \
            -H "Authorization: Bearer sk_test_API_KEY"
      - lang: JavaScript
        label: Node.js
        source: |
          const Facturapi = require('facturapi');
          const facturapi = new Facturapi('sk_test_API_KEY');
          const removedProduct = await facturapi.products.del('590e22c26d04f840aa8438b2');
      - lang: csharp
        label: C#
        source: |
          var facturapi = new FacturapiClient("sk_test_API_KEY");
          var product = await facturapi.Product.DeleteAsync("590e22c26d04f840aa8438b2");
      - lang: PHP
        source: |
          $facturapi = new Facturapi( "sk_test_API_KEY" );
          $facturapi->Products->delete( "590e22c26d04f840aa8438b2" );
    get:
      description: Regresa el objeto `Product` relacionado al `id` especificado.
      operationId: getProduct
      parameters:
      - description: ID del objeto a obtener
        explode: false
        in: path
        name: product_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: Objeto `Product`
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthenticated'
        "500":
          $ref: '#/components/responses/UnexpectedError'
      security:
      - Secret Live Key: []
      - Secret Test Key: []
      summary: Obtener producto por ID
      tags:
      - product
      x-codeSamples:
      - lang: Bash
        label: cURL
        source: |
          curl https://www.facturapi.io/v2/products/590e22c26d04f840aa8438b2 \
            -H "Authorization: Bearer sk_test_API_KEY"
      - lang: JavaScript
        label: Node.js
        source: |
          const Facturapi = require('facturapi');
          const facturapi = new Facturapi('sk_test_API_KEY');
          const product = await facturapi.products.retrieve('590e22c26d04f840aa8438b2');
      - lang: csharp
        label: C#
        source: |
          var facturapi = new FacturapiClient("sk_test_API_KEY");
          var product = await facturapi.Product.RetrieveAsync("590e22c26d04f840aa8438b2");
      - lang: PHP
        source: |
          $facturapi = new Facturapi( "sk_test_API_KEY" );
          $product = $facturapi->Product->retrieve( "590e22c26d04f840aa8438b2" );
    put:
      description: "Actualiza la información de un producto existente, asignando los\
        \ valores de los parámetros enviados. Los parámetros que no se envíen en la\
        \ petición no se modificarán."
      operationId: editProduct
      parameters:
      - description: ID del objeto a editar
        explode: false
        in: path
        name: product_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/ProductEdit'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: Objeto `Product` editado correctamente
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthenticated'
        "500":
          $ref: '#/components/responses/UnexpectedError'
      security:
      - Secret Live Key: []
      - Secret Test Key: []
      summary: Editar producto
      tags:
      - product
      x-codeSamples:
      - lang: Bash
        label: cURL
        source: |
          curl https://www.facturapi.io/v2/products/590e22c26d04f840aa8438b2 \
            -X PUT
            -H "Authorization: Bearer sk_test_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
                  "price": 456.70
                }'
      - lang: JavaScript
        label: Node.js
        source: |
          const Facturapi = require('facturapi');
          const facturapi = new Facturapi('sk_test_API_KEY');
          const product = await facturapi.products.update(
            '590e22c26d04f840aa8438b2',
            {
              email: 'jdoe@example.com',
              address: {
                street: 'Santa Monica Ave.'
              }
            }
          );
      - lang: csharp
        label: C#
        source: |
          var facturapi = new FacturapiClient("sk_test_API_KEY");
          var product = await facturapi.Product.UpdateAsync(
            "590e22c26d04f840aa8438b2",
            new Dictionary<string, object>
            {
              ["price"] = 456.70
            }
          );
      - lang: PHP
        source: |
          $facturapi = new Facturapi( "sk_test_API_KEY" );
          $product = $facturapi->Products->update("590e22c26d04f840aa8438b2", [
            "price" => 456.70
          ]);
  /invoices:
    get:
      description: Regresa una lista paginada de todas las facturas de una organización
        o realiza una búsqueda de acuerdo a parámetros
      operationId: listInvoices
      parameters:
      - description: |
          Consulta. Texto a buscar en la factura.

          La búsqueda se realizará por coincidencias **parciales** en los campos:

          - `items[].product.description`
          - `customer.legal_name`

          Y por coincidencias **exactas** en los campos:

          - `id`
          - `uuid`
          - `customer.tax_id`
          - `folio_number`
          - `total`
        explode: true
        in: query
        name: q
        required: false
        schema:
          type: string
        style: form
      - description: Identificador del cliente. Útil para obtener las facturas emitidas
          a un sólo cliente.
        explode: true
        in: query
        name: customer
        required: false
        schema:
          type: string
        style: form
      - description: Tipo de factura. Búsqueda por tipo de factura con las claves
          exactas.
        explode: true
        in: query
        name: type
        required: false
        schema:
          enum:
          - I
          - E
          - P
          - "N"
          - T
          type: string
        style: form
      - description: Método de pago. Búsqueda exacta por método de pago.
        explode: true
        in: query
        name: payment_method
        required: false
        schema:
          enum:
          - PUE
          - PPD
          type: string
        style: form
      - $ref: '#/components/parameters/SearchDate'
      - $ref: '#/components/parameters/SearchPage'
      - $ref: '#/components/parameters/SearchLimit'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceSearchResult'
          description: Resultado de la búsqueda
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthenticated'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/UnexpectedError'
      security:
      - Secret Live Key: []
      - Secret Test Key: []
      summary: Listar facturas
      tags:
      - invoice
      x-codeSamples:
      - lang: Bash
        label: cURL
        source: |
          # Todas las facturas de la organización
          curl "https://www.facturapi.io/v2/invoices" \
            -G \
            -H "Authorization: Bearer sk_test_API_KEY"

          # Todas las facturas emitidas para cierto cliente
          curl "https://www.facturapi.io/v2/invoices" \
            -G \
            -H "Authorization: Bearer sk_test_API_KEY" \
            -d "customer=58e93bd8e86eb318b0197456"

          # Página 3 de los resultados de búsqueda de texto libre
          # de facturas emitidas por cierto cliente entre 2017 y 2019
          curl "https://www.facturapi.io/v2/invoices" \
            -G \
            -H "Authorization: Bearer sk_test_API_KEY" \
            -d "q=Aspiradora+Robot&customer=58e93bd8e86eb318b0197456&date[gte]=2017-01-01T00:00:00.000Z&date[lt]=2020-01-01T00:00:00.000Z&page=3&limit=10"
      - lang: JavaScript
        label: Node.js
        source: |
          const Facturapi = require('facturapi');
          const facturapi = new Facturapi('sk_test_API_KEY');

          // Todas las facturas de la organización
          const invoiceSearch = await facturapi.invoices.list();

          // Todas las facturas emitidas para cierto cliente
          const invoiceSearch = await facturapi.invoices.list({
            customer: '590ce6c56d04f840aa8438af'
          });

          // Página 3 de los resultados de búsqueda de texto libre
          // de facturas emitidas por cierto cliente entre 2017 y 2019
          const invoiceSearch = await facturapi.invoices.list({
            q: 'Aspiradora Robot',
            customer: '590ce6c56d04f840aa8438af',
            date: {
              gte: new Date('2017-01-01T00:00:00.000Z'),
              lt: new Date('2020-01-01T00:00:00.000Z')
            },
            page: 3,
            limit: 10,
          });
      - lang: csharp
        label: C#
        source: "var facturapi = new FacturapiClient(\"sk_test_API_KEY\");\n\n// Todas\
          \ las facturas de la organización\nvar searchResult = await facturapi.Invoice.ListAsync();\n\
          \n// Todas las facturas emitidas para cierto cliente\nvar searchResult =\
          \ await facturapi.Invoice.ListAsync(\n  new Dictionary<string, object>\n\
          \  {\n    [\"customer\"] = \"590ce6c56d04f840aa8438af\"\n  }\n);\n\n// Pá\
          gina 3 de los resultados de búsqueda de texto libre\n// de facturas emitidas\
          \ por cierto cliente entre 2017 y 2019\nvar searchResult = await facturapi.Invoice.ListAsync(\n\
          \  new Dictionary<string, object>\n  {\n    [\"q\"] = \"Aspiradora Robot\"\
          ,\n    [\"customer\"] = \"590ce6c56d04f840aa8438af\",  \n    [\"date\"]\
          \ = new Dictionary<string, object>\n      {\n        [\"gte\"] = new DateTime(\"\
          2017-01-01T00:00:00.000Z\"),\n        [\"lt\"] = new DateTime(\"2020-01-01T00:00:00.000Z\"\
          )\n      },\n    [\"page\"] = 3,\n    [\"limit\"] = 10,\n  }\n);\n"
      - lang: PHP
        source: |
          $facturapi = new Facturapi( "sk_test_API_KEY" );

          // Todas las facturas de la organización
          $invoices = $facturapi->Invoices->all();

          // Todas las facturas emitidas para cierto cliente
          $invoices = $facturapi->Invoices->all([
            customer => "590ce6c56d04f840aa8438af"
          ]);

          // Página 3 de los resultados de búsqueda de texto libre
          // de facturas emitidas por cierto cliente entre 2017 y 2019
          $invoices = $facturapi->Invoices->all([
            q => "Aspiradora Robot",
            customer => "590ce6c56d04f840aa8438af"
            date => [
              gte => new DateTime("2017-01-01T00:00:00.000Z"),
              lt => new DateTime("2020-01-01T00:00:00.000Z")
            ],
            page => 3,
            limit => 10,
          ]);
    post:
      description: |
        Crea una nueva Factura. Si la factura es creada en ambiente Live, ésta será **timbrada y enviada al SAT**.
      operationId: createInvoice
      requestBody:
        $ref: '#/components/requestBodies/InvoiceCreate'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
          description: Nuevo objeto `Invoice` creado
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthenticated'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/UnexpectedError'
      security:
      - Secret Live Key: []
      - Secret Test Key: []
      summary: Crear factura (CFDI 4.0)
      tags:
      - invoice
      x-codeSamples:
      - lang: Bash
        label: cURL
        source: |
          curl https://www.facturapi.io/v2/invoices \
            -H "Authorization: Bearer sk_test_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
              "customer": {
                "legal_name": "Dunder Mifflin",
                "email": "email@example.com",
                "tax_id": "ABC101010111",
                "tax_system": "601",
                "address": {
                  "zip": "85900"
                }
              },
              "items": [{
                "quantity": 2,
                "product": {
                  "description": "Ukelele",
                  "product_key": "60131324",
                  "price": 345.60
                }
              }],
              "payment_form": "06",
              "folio_number": 914,
              "series": "F"
            }'
      - lang: JavaScript
        label: Node.js
        source: |
          const Facturapi = require('facturapi');
          const facturapi = new Facturapi('sk_test_API_KEY');
          const invoice = await facturapi.invoices.create({
            customer: {
              legal_name: 'Dunder Mifflin',
              email: 'email@example.com',
              tax_id: 'ABC101010111',
              tax_system: '601',
              address: {
                zip: '85900'
              }
            },
            items: [{
              quantity: 2,
              product: {
                description: 'Ukelele',
                product_key: '60131324',
                price: 345.60
              }
            }],
            payment_form: Facturapi.PaymentForm.DINERO_ELECTRONICO,
            folio_number: 914,
            series: 'F'
          });
      - lang: csharp
        label: C#
        source: |
          var facturapi = new FacturapiClient("sk_test_API_KEY");
          var invoice = await facturapi.Invoice.CreateAsync(new Dictionary<string, object>
          {
            ["customer"] = new Dictionary<string, object>
            {
              ["legal_name"] = "Dunder Mifflin",
              ["email"] = "email@example.com",
              ["tax_id"] = "ABC101010111",
              ["tax_system"] = "601",
              ["address"] = new Dictionary<string, object>
              {
                ["zip"] = "85900"
              }
            },
            ["items"] = new Dictionary<string, object>[]
            {
              new Dictionary<string, object>
              {
                ["product"] = new Dictionary<string, object>
                {
                  ["description"] = "Ukelele",
                  ["product_key"] = "60131324",
                  ["price"] = 345.60
                }
              }
            },
            ["payment_form"] = Facturapi.PaymentForm.DINERO_ELECTRONICO,
            ["folio_number"] = 914,
            ["series"] = "F"
          });
      - lang: PHP
        source: |
          $facturapi = new Facturapi( "sk_test_API_KEY" );
          $invoice = $facturapi->Invoices->create([
            "customer" => [
              "legal_name" => "Dunder Mifflin",
              "email" => "email@example.com",
              "tax_id" => "ABC101010111",
              "tax_system" => "601",
              "address" => [
                "zip" => "85900"
              ]
            ],
            "items" => [
              [
                "quantity" => 2,
                "product" => [
                  "description" => "Ukelele",
                  "product_key" => "60131324",
                  "price" => 420.69,
                  "sku" => "ABC4567"
                ]
              ] // Add as many products as you want to include in your invoice
            ],
            "payment_form" => \Facturapi\PaymentForm::EFECTIVO,
            "folio_number" => 581,
            "series" => "F"
          ]);
  /invoices/{invoice_id}:
    delete:
      description: |
        Realiza una solicitud de cancelación de factura ante el SAT, soportando el esquema de cancelación 2022.

        Al usar este método pueden ocurrir 3 posibles resultados:

        - Que la llamada regrese un error con la explicación de por qué no se pudo cancelar.
        - Que la llamada sea satisfactoria y regrese un objeto `invoice` con la propiedad `status: "canceled"`.
        - Que la llamada sea satisfactoria, pero que la cancelación requiera de confirmación de parte de tu cliente, en cuyo caso se obtendrá como respuesta el objeto `invoice` con las propiedades `status: "valid"` y `cancellation_status: "pending"`.

        En el tercer escenario, el valor de `cancellation_status` será actualizado automáticamente por Facturapi cuando tu cliente acepte, rechace o deje expirar la solicitud, de tal manera que al consultar una factura (usando [Obtener Factura](#operation/getInvoice)), la propiedad `cancellation_status` reflejará el estado más reciente de la soliitud.

        Consulta los valores posibles de `cancellation_status` más abajo.

        Después de la cancelación la factura ya no tendrá validez, el objeto cambiará su `status` a `"canceled"` y seguirá estando disponible para futuras consultas.
      operationId: cancelInvoice
      parameters:
      - description: ID de la factura a cancelar
        explode: false
        in: path
        name: invoice_id
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Clave que representa el motivo de la cancelación de la factura.

          - `01`: **Comprobante emitido con errores con relación**. Cuando la
            factura contiene algún error en las cantidades, claves o cualquier otro dato y ya
            se ha emitido el comprobante que la sustituye, el cual deberá indicarse por medio
            del atributo `substitution`.
          - `02`: **Comprobante emitido con errores sin relación**. Cuando la
            factura contiene algún error en las cantidades, claves o cualquier otro dato y no
            se requiere relacionar con otra factura.
          - `03`: **No se llevó a cabo la operación**. Cuando la venta o transacción no se concretó.
          - `04`: **Operación nominativa relacionada en la factura global**. Cuando se requiere cancelar
            una factura al público en general porque el cliente solicita su comprobante.
        explode: true
        in: query
        name: motive
        required: true
        schema:
          enum:
          - "01"
          - "02"
          - "03"
          - "04"
          type: string
        style: form
      - description: |
          ID de la factura que sustituye a la factura que se está cancelando.

          Puedes usar el ID de Facturapi o el folio fiscal (UUID).
        explode: true
        in: query
        name: substitution
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
          description: Solicitud de cancelación exitosa
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthenticated'
        "500":
          $ref: '#/components/responses/UnexpectedError'
      security:
      - Secret Live Key: []
      - Secret Test Key: []
      summary: Cancelar factura
      tags:
      - invoice
      x-codeSamples:
      - lang: Bash
        label: cURL
        source: |
          curl https://www.facturapi.io/v2/invoices/58e93bd8e86eb318b019743d?motive=02 \
            -H "Authorization: Bearer sk_test_API_KEY" \
            -X DELETE
      - lang: JavaScript
        label: Node.js
        source: |
          const Facturapi = require('facturapi');
          const facturapi = new Facturapi('sk_test_API_KEY');
          const invoice = await facturapi.invoices.cancel(
            '58e93bd8e86eb318b019743d',
            { motive: '02' }
          );
      - lang: csharp
        label: C#
        source: |
          var facturapi = new FacturapiClient("sk_test_API_KEY");
          var invoice = await facturapi.Invoice.CancelAsync(
            "58e93bd8e86eb318b019743d",
            new Dictionary<string, object>
            {
              ["motive"] = "02"
            }
          );
      - lang: PHP
        source: |
          $facturapi = new Facturapi( "sk_test_API_KEY" );
          $facturapi->Invoices->cancel(
            "58e93bd8e86eb318b019743d",
            [
              "motive" => "02"
            ]
          );
    get:
      description: Regresa el objeto 'Invoice' relacionado al `id` especificado.
      operationId: getInvoice
      parameters:
      - description: ID del objeto a obtener
        explode: false
        in: path
        name: invoice_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
          description: Objeto `Invoice`
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthenticated'
        "500":
          $ref: '#/components/responses/UnexpectedError'
      security:
      - Secret Live Key: []
      - Secret Test Key: []
      summary: Obtener factura por ID
      tags:
      - invoice
      x-codeSamples:
      - lang: Bash
        label: cURL
        source: |
          curl https://www.facturapi.io/v2/invoices/58e93bd8e86eb318b019743d \
            -H "Authorization: Bearer sk_test_API_KEY"
      - lang: JavaScript
        label: Node.js
        source: |
          const Facturapi = require('facturapi');
          const facturapi = new Facturapi('sk_test_API_KEY');
          const invoice = await facturapi.invoices.retrieve('58e93bd8e86eb318b019743d');
      - lang: csharp
        label: C#
        source: |
          var facturapi = new FacturapiClient("sk_test_API_KEY");
          var invoice = await facturapi.Invoice.RetrieveAsync("58e93bd8e86eb318b019743d");
      - lang: PHP
        source: |
          $facturapi = new Facturapi( "sk_test_API_KEY" );
          $invoice = $facturapi->Invoices->retrieve( "58e93bd8e86eb318b019743d" );
  /invoices/{invoice_id}/cancellation_receipt/xml:
    get:
      description: Descarga acuse de recibo de cancelación de una factura en un archivo
        xml.
      operationId: downloadCancellationReceiptXml
      parameters:
      - description: ID del objeto a obtener
        explode: false
        in: path
        name: invoice_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: Archivo del acuse de recibo de cancelación
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthenticated'
        "500":
          $ref: '#/components/responses/UnexpectedError'
      security:
      - Secret Live Key: []
      - Secret Test Key: []
      summary: Descargar acuse de cancelación
      tags:
      - invoice
      x-codeSamples:
      - lang: Bash
        label: cURL
        source: |
          # Acuse de factura cancelada
          curl https://www.facturapi.io/v2/invoices/58e93bd8e86eb318b019743d/cancellation_receipt/xml \
            -H "Authorization: Bearer sk_test_API_KEY"
            -X GET
      - lang: JavaScript
        label: Node.js
        source: |
          const Facturapi = require('facturapi');
          const facturapi = new Facturapi('sk_test_API_KEY');

          // Acuse de factura cancelada
          await facturapi.invoices.downloadCancellationReceiptXml('58e93bd8e86eb318b019743d');
      - lang: csharp
        label: C#
        source: |
          // Acuse de factura cancelada
          await facturapi.Invoice.DownloadCancellationReceiptXmlAsync("58e93bd8e86eb318b019743d");
      - lang: PHP
        source: |
          $facturapi = new Facturapi( "sk_test_API_KEY" );

          // Acuse de factura cancelada
          $facturapi->Invoices->download_cancellation_receipt_xml("58e93bd8e86eb318b019743d");
  /invoices/{invoice_id}/{format}:
    get:
      description: "Descarga tu Factura en PDF, XML o ambos en un archivo comprimido\
        \ ZIP."
      operationId: downloadInvoice
      parameters:
      - description: ID del objeto a descargar
        explode: false
        in: path
        name: invoice_id
        required: true
        schema:
          type: string
        style: simple
      - description: Formato del archivo de descarga
        explode: false
        in: path
        name: format
        required: true
        schema:
          enum:
          - xml
          - pdf
          - zip
          type: string
        style: simple
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: Archivo del comprobante CFDI en el formato solicitado
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthenticated'
        "500":
          $ref: '#/components/responses/UnexpectedError'
      security:
      - Secret Live Key: []
      - Secret Test Key: []
      summary: Descargar factura
      tags:
      - invoice
      x-codeSamples:
      - lang: Bash
        label: cURL
        source: |
          ## Descargar PDF y XML comprimidos en archivo ZIP
          curl https://www.facturapi.io/v2/invoices/58e93bd8e86eb318b019743d/zip \
            -H "Authorization: Bearer sk_test_API_KEY"

          ## Descargar sólo el PDF
          curl https://www.facturapi.io/v2/invoices/58e93bd8e86eb318b019743d/pdf \
            -H "Authorization: Bearer sk_test_API_KEY"

          ## Descargar sólo el XML
          curl https://www.facturapi.io/v2/invoices/58e93bd8e86eb318b019743d/xml \
            -H "Authorization: Bearer sk_test_API_KEY"
      - lang: JavaScript
        label: Node.js
        source: |
          const fs = require('fs');
          const Facturapi = require('facturapi');
          const facturapi = new Facturapi('sk_test_API_KEY');

          // Descargar PDF y XML comprimidos en archivo ZIP
          const zipStream = await facturapi.invoices.downloadZip('58e93bd8e86eb318b019743d');
          const zipFile = fs.createWriteStream('./factura.zip');
          zipStream.pipe(zipFile);

          // Descargar sólo el PDF
          const pdfStream = await facturapi.invoices.downloadPdf('58e93bd8e86eb318b019743d');
          const pdfFile = fs.createWriteStream('./factura.pdf');
          pdfStream.pipe(pdfFile);

          // Descargar sólo el XML
          const xmlStream = await facturapi.invoices.downloadXml('58e93bd8e86eb318b019743d');
          const xmlFile = fs.createWriteStream('./factura.xml');
          xmlStream.pipe(xmlFile);
      - lang: csharp
        label: C#
        source: |
          // Descargar PDF y XML comprimidos en archivo ZIP
          var zipStream = await facturapi.Invoice.DownloadZipAsync("58e93bd8e86eb318b019743d");
          // Descargar sólo el XML
          var xmlStream = await facturapi.Invoice.DownloadXmlAsync("58e93bd8e86eb318b019743d");
          // Descargar sólo el PDF
          var pdfStream = await facturapi.Invoice.DownloadPdfAsync("58e93bd8e86eb318b019743d");

          // Para guardar la descarga en un archivo
          var file = new System.IO.FileStream("C:\\route\\to\\save\\invoice.zip", FileMode.Create);
          zipStream.CopyTo(file);
          file.Close();
      - lang: PHP
        source: "$facturapi = new Facturapi( \"sk_test_API_KEY\" );\n\n// stream containing\
          \ the PDF and XML as a ZIP file\n$zip = $facturapi->Invoices->download_zip(\"\
          58e93bd8e86eb318b019743d\");\n// stream containing the PDF file\n$pdf =\
          \ $facturapi->Invoices->download_pdf(\"58e93bd8e86eb318b019743d\"); \n//\
          \ stream containing the XML file\n$xml = $facturapi->Invoices->download_xml(\"\
          58e93bd8e86eb318b019743d\");\n"
  /invoices/{invoice_id}/email:
    post:
      description: "Envía un correo electrónico a la dirección de tu cliente, con\
        \ los archivos XML y PDF adjuntos al mensaje."
      operationId: sendInvoiceByEmail
      parameters:
      - description: ID del objeto a obtener
        explode: false
        in: path
        name: invoice_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sendInvoiceByEmail_request'
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: Archivo del comprobante CFDI en el formato solicitado
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthenticated'
        "500":
          $ref: '#/components/responses/UnexpectedError'
      security:
      - Secret Live Key: []
      - Secret Test Key: []
      summary: Enviar factura por correo electrónico
      tags:
      - invoice
      x-codeSamples:
      - lang: Bash
        label: cURL
        source: |
          # Enviar al correo del cliente
          curl https://www.facturapi.io/v2/invoices/58e93bd8e86eb318b019743d/email \
            -H "Authorization: Bearer sk_test_API_KEY"
            -X POST

          # Enviar a otro correo
          curl https://www.facturapi.io/v2/invoices/58e93bd8e86eb318b019743d/email \
            -H "Authorization: Bearer sk_test_API_KEY"
            -X POST
            -H "Content-Type: application/json" \
            -d '{
                  "email": "another_email@example.com"
                }'
      - lang: JavaScript
        label: Node.js
        source: "const Facturapi = require('facturapi');\nconst facturapi = new Facturapi('sk_test_API_KEY');\n\
          \n// Enviar al correo del cliente\nawait facturapi.invoices.sendByEmail('58e93bd8e86eb318b019743d');\n\
          \n// Enviar a otro correo\nawait facturapi.invoices.sendByEmail(\n  '58e93bd8e86eb318b019743d',\n\
          \  { email: 'otro@correo.com' }\n);\n\n// Enviar a más de un correo (má\
          x. 10)\nawait facturapi.invoices.sendByEmail(\n  '58e93bd8e86eb318b019743d',\n\
          \  { \n    email: [\n      'primer@correo.com',\n      'segundo@correo.com'\n\
          \    ]\n  }\n);\n"
      - lang: csharp
        label: C#
        source: |
          // Enviar al correo del cliente
          await facturapi.Invoice.SendByEmailAsync("58e93bd8e86eb318b019743d");

          // Enviar a otro correo
          await facturapi.Invoice.SendByEmailAsync(
            "58e93bd8e86eb318b019743d",
            new Dictionary<string, object>
            {
              ["email"] = "otro@correo.com"
            }
          );

          // Enviar a más de un correo
          await facturapi.Invoice.SendByEmailAsync(
            "58e93bd8e86eb318b019743d",
            new Dictionary<string, object>
            {
              ["email"] = new String[]
              {
                "primer@correo.com",
                "segundo@correo.com"
              }
            }
          );
      - lang: PHP
        source: |
          $facturapi = new Facturapi( "sk_test_API_KEY" );

          // Enviar al correo del cliente
          $facturapi->Invoices->send_by_email("58e93bd8e86eb318b019743d");

          // Enviar a otro correo
          $facturapi->Invoices->send_by_email(
            "58e93bd8e86eb318b019743d",
            "otro@correo.com"
          );

          // Enviar a más de un correo (máx 10)
          $facturapi->Invoices->send_by_email(
            "58e93bd8e86eb318b019743d",
            [
              "primer@correo.com",
              "segundo@correo.com"
            ]
          );
  /receipts:
    get:
      description: Regresa una lista paginada de todos los recibos de una organización
        o realiza una búsqueda de acuerdo a parámetros
      operationId: listReceipts
      parameters:
      - description: |
          Consulta. Texto a buscar en la descripción de los conceptos del recibo o el SKU.
        explode: true
        in: query
        name: q
        required: false
        schema:
          type: string
        style: form
      - description: |
          Código que representa la forma de pago, de acuerdo al [catálogo del SAT](#forma-de-pago). Si se incluye, los recibos se agruparán y se listarán de acuerdo a la forma de pago.
        example: "02"
        explode: true
        in: query
        name: payment_form
        required: false
        schema:
          maxLength: 2
          minLength: 2
          type: string
        style: form
      - $ref: '#/components/parameters/SearchDate'
      - $ref: '#/components/parameters/SearchPage'
      - $ref: '#/components/parameters/SearchLimit'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReceiptSearchResult'
          description: Resultado de la búsqueda
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthenticated'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/UnexpectedError'
      security:
      - Secret Live Key: []
      - Secret Test Key: []
      summary: Listar recibos
      tags:
      - receipt
      x-codeSamples:
      - lang: Bash
        label: cURL
        source: |
          # Todos los recibos de la organización
          curl "https://www.facturapi.io/v2/receipts" \
            -G \
            -H "Authorization: Bearer sk_test_API_KEY"

          # Página 3 de los resultados de búsqueda de texto libre
          # de recibos creados entre 2017 y 2019
          curl "https://www.facturapi.io/v2/receipts" \
            -G \
            -H "Authorization: Bearer sk_test_API_KEY" \
            -d "q=Aspiradora+Robot&date[gte]=2017-01-01T00:00:00.000Z&date[lt]=2020-01-01T00:00:00.000Z&page=3&limit=10"
      - lang: JavaScript
        label: Node.js
        source: |
          const Facturapi = require('facturapi');
          const facturapi = new Facturapi('sk_test_API_KEY');

          // Todos los recibos de la organización
          const receiptSearch = await facturapi.receipts.list();

          // Página 3 de los resultados de búsqueda de texto libre
          // de recibos creados entre 2017 y 2019
          const receiptSearch = await facturapi.receipts.list({
            q: 'Aspiradora Robot',
            date: {
              gte: new Date('2017-01-01T00:00:00.000Z'),
              lt: new Date('2020-01-01T00:00:00.000Z')
            },
            page: 3,
            limit: 10,
          });
      - lang: csharp
        label: C#
        source: |
          var facturapi = new FacturapiClient("sk_test_API_KEY");

          // Todos los recibos de la organización
          var searchResult = await facturapi.Receipt.ListAsync();

          // Página 3 de los resultados de búsqueda de texto libre
          // de recibos creados entre 2017 y 2019
          var searchResult = await facturapi.Receipt.ListAsync(
            new Dictionary<string, object>
            {
              ["q"] = "Aspiradora Robot",
              ["date"] = new Dictionary<string, object>
                {
                  ["gte"] = new DateTime("2017-01-01T00:00:00.000Z"),
                  ["lt"] = new DateTime("2020-01-01T00:00:00.000Z")
                },
              ["page"] = 3,
              ["limit"] = 10,
            }
          );
      - lang: PHP
        source: |
          $facturapi = new Facturapi( "sk_test_API_KEY" );

          // Todos los recibos de la organización
          $searchResult = $facturapi->Receipts->all();

          // Página 3 de los resultados de búsqueda de texto libre
          // de recibos creados entre 2017 y 2019
          $searchResult = $facturapi->Receipts->all([
            q => "Aspiradora Robot",
            date => [
              gte => new DateTime("2017-01-01T00:00:00.000Z"),
              lt => new DateTime("2020-01-01T00:00:00.000Z")
            ],
            page => 3,
            limit => 10,
          ]);
    post:
      description: |
        Crea un nuevo Recibo, el cual funge como nota de venta.

        Todos los recibos generan una URL de autofactura que cliente puede
        visitar para llenar sus datos fiscales en un micrositio con el branding
        de la organización.
      operationId: createReceipt
      requestBody:
        $ref: '#/components/requestBodies/ReceiptCreate'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Receipt'
          description: Nuevo objeto `Receipt` creado
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthenticated'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/UnexpectedError'
      security:
      - Secret User Key: []
      summary: Crear recibo
      tags:
      - receipt
      x-codeSamples:
      - lang: Bash
        label: cURL
        source: |
          curl https://www.facturapi.io/v2/receipts \
            -H "Authorization: Bearer sk_test_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
                  "folio_number": 1234,
                  "payment_form": "03",
                  "items": [{
                    "quantity": 1,
                    "product": {
                      "description": "Ukelele",
                      "product_key": "60131324",
                      "price": 345.60,
                      "sku": "ABC1234"
                    }
                  }]
                }'
      - lang: JavaScript
        label: Node.js
        source: |
          const Facturapi = require('facturapi');
          const facturapi = new Facturapi('sk_test_API_KEY');

          const receipt = await facturapi.receipts.create({
            folio_number: 1234,
            payment_form: Facturapi.PaymentForm.DINERO_ELECTRONICO,
            items: [{
              quantity: 1,
              product: {
                description: 'Ukelele',
                product_key: '60131324',
                price: 345.60,
                sku: 'ABC1234'
              }
            }]
          });
      - lang: csharp
        label: C#
        source: |
          var facturapi = new FacturapiClient("sk_test_API_KEY");
          var receipt = await facturapi.Receipt.CreateAsync(new Dictionary<string, object>
          {
            ["folio_number"] = 1234,
            ["payment_form"] = Facturapi.PaymentForm.DINERO_ELECTRONICO,
            ["items"] = new Dictionary<string, object>[]
            {
              new Dictionary<string, object> {
                ["description"] = "Ukelele",
                ["product_key"] = "60131324",
                ["price"] = 345.60,
                ["sku"] = "ABC1234"
              }
            }
          });
      - lang: PHP
        source: |
          $facturapi = new Facturapi( "sk_test_API_KEY" );

          $receipt = $facturapi->Receipts->create([
            "folio_number" => 1234,
            "payment_form" => "03",
            "items" => [
              [
                "product" => [
                  "description" => "Ukelele",
                  "product_key" => "60131324",
                  "price" => 345.60,
                  "sku" => "ABC1234"
                ]
              ]
            ]
          ]);
  /receipts/{receipt_id}:
    delete:
      description: |
        Marca un recibo como cancelado, cambiando su propiedad `status` a `"canceled"`.

        Una vez cancelado, el recibo no podrá ser facturado.
      operationId: cancelReceipt
      parameters:
      - description: ID del recibo a cancelar
        explode: false
        in: path
        name: receipt_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Receipt'
          description: Objeto 'Receipt' cancelado exitosamente
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthenticated'
        "500":
          $ref: '#/components/responses/UnexpectedError'
      security:
      - Secret Live Key: []
      - Secret Test Key: []
      summary: Cancelar recibo
      tags:
      - receipt
      x-codeSamples:
      - lang: Bash
        label: cURL
        source: |
          curl https://www.facturapi.io/v2/receipts/5ebd8e56f5687a013ca0df46 \
            -X DELETE \
            -H "Authorization: Bearer sk_test_API_KEY"
      - lang: JavaScript
        label: Node.js
        source: |
          const Facturapi = require('facturapi');
          const facturapi = new Facturapi('sk_test_API_KEY');
          const receipt = await facturapi.receipts.cancel('5ebd8e56f5687a013ca0df46');
      - lang: csharp
        label: C#
        source: |
          var facturapi = new FacturapiClient("sk_test_API_KEY");
          var receipt = await facturapi.Receipt.CancelAsync("5ebd8e56f5687a013ca0df46");
      - lang: PHP
        source: |
          $facturapi = new Facturapi( "sk_test_API_KEY" );
          $facturapi->Receipts->cancel("5ebd8e56f5687a013ca0df46");
    get:
      description: Regresa el objeto 'Receipt' relacionado al `id` especificado.
      operationId: getReceipt
      parameters:
      - description: ID del objeto a obtener
        explode: false
        in: path
        name: receipt_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Receipt'
          description: Objeto `Receipt`
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthenticated'
        "500":
          $ref: '#/components/responses/UnexpectedError'
      security:
      - Secret Live Key: []
      - Secret Test Key: []
      summary: Obtener recibo por ID
      tags:
      - receipt
      x-codeSamples:
      - lang: Bash
        label: cURL
        source: |
          curl https://www.facturapi.io/v2/receipts/58e93bd8e86eb318b019743d \
            -H "Authorization: Bearer sk_test_API_KEY"
      - lang: JavaScript
        label: Node.js
        source: |
          const Facturapi = require('facturapi');
          const facturapi = new Facturapi('sk_test_API_KEY');
          const receipt = await facturapi.receipts.retrieve('58e93bd8e86eb318b019743d');
      - lang: csharp
        label: C#
        source: |
          var facturapi = new FacturapiClient("sk_test_API_KEY");
          var receipt = await facturapi.Receipt.RetrieveAsync("58e93bd8e86eb318b019743d");
      - lang: PHP
        source: |
          $facturapi = new Facturapi( "sk_test_API_KEY" );
          $receipt = $facturapi->Receipts->retrieve( "58e93bd8e86eb318b019743d" );
  /receipts/{receipt_id}/pdf:
    get:
      description: Descarga el recibo digital en formato PDF.
      operationId: downloadReceiptPdf
      parameters:
      - description: ID del objeto a descargar
        explode: false
        in: path
        name: receipt_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: Archivo del recibo digital en formato PDF
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthenticated'
        "500":
          $ref: '#/components/responses/UnexpectedError'
      security:
      - Secret Live Key: []
      - Secret Test Key: []
      summary: Descargar PDF
      tags:
      - receipt
      x-codeSamples:
      - lang: Bash
        label: cURL
        source: |
          curl https://www.facturapi.io/v2/receipts/58e93bd8e86eb318b019743d/pdf \
            -H "Authorization: Bearer sk_test_API_KEY"
      - lang: JavaScript
        label: Node.js
        source: |
          const fs = require('fs');
          const Facturapi = require('facturapi');
          const facturapi = new Facturapi('sk_test_API_KEY');

          // Descargar recibo en formato PDF
          const pdfStream = await facturapi.receipts.downloadPdf('58e93bd8e86eb318b019743d');
          const pdfFile = fs.createWriteStream('./recibo.pdf');
          pdfStream.pipe(pdfFile);
      - lang: csharp
        label: C#
        source: |
          // Descargar recibo en formato PDF
          var pdfStream = await facturapi.Receipt.DownloadPdfAsync("58e93bd8e86eb318b019743d");

          // Para guardar la descarga en un archivo
          var file = new System.IO.FileStream("C:\\route\\to\\save\\receipt.pdf", FileMode.Create);
          pdfStream.CopyTo(file);
          file.Close();
      - lang: PHP
        source: |
          $facturapi = new Facturapi( "sk_test_API_KEY" );

          // stream containing the PDF file
          $pdf = $facturapi->Receipts->download_pdf("58e93bd8e86eb318b019743d");
  /receipts/{receipt_id}/email:
    post:
      description: |
        Envía un correo electrónico a la dirección de tu cliente.

        El correo enviado estará personalizado con el logotipo y los colores de la organización que lo creó,
        e incluirá un botón para facturar el recibo, así con el recibo en formato PDF adjunto al mensaje.
      operationId: sendReceiptByEmail
      parameters:
      - description: ID del objeto a obtener
        explode: false
        in: path
        name: receipt_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sendReceiptByEmail_request'
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: Archivo del comprobante CFDI en el formato solicitado
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthenticated'
        "500":
          $ref: '#/components/responses/UnexpectedError'
      security:
      - Secret Live Key: []
      - Secret Test Key: []
      summary: Enviar recibo por correo electrónico
      tags:
      - receipt
      x-codeSamples:
      - lang: Bash
        label: cURL
        source: |
          # Enviar recibo por correo electrónico
          curl https://www.facturapi.io/v2/receipts/58e93bd8e86eb318b019743d/email \
            -H "Authorization: Bearer sk_test_API_KEY"
            -X POST
            -H "Content-Type: application/json" \
            -d '{
                  "email": "another_email@example.com"
                }'
      - lang: JavaScript
        label: Node.js
        source: "const Facturapi = require('facturapi');\nconst facturapi = new Facturapi('sk_test_API_KEY');\n\
          \n// Enviar recibo por correo electrónico\nawait facturapi.receipts.sendByEmail(\n\
          \  '58e93bd8e86eb318b019743d',\n  { email: 'ejemplo@correo.com' }\n);\n\n\
          // Enviar a más de un correo (máx. 10)\nawait facturapi.receipts.sendByEmail(\n\
          \  '58e93bd8e86eb318b019743d',\n  { \n    email: [\n      'primer@correo.com',\n\
          \      'segundo@correo.com'\n    ]\n  }\n);\n"
      - lang: csharp
        label: C#
        source: |
          // Enviar recibo por correo electrónico
          await facturapi.Receipt.SendByEmailAsync(
            "58e93bd8e86eb318b019743d",
            new Dictionary<string, object>
            {
              ["email"] = "ejemplo@correo.com"
            }
          );

          // Enviar a más de un correo
          await facturapi.Receipt.SendByEmailAsync(
            "58e93bd8e86eb318b019743d",
            new Dictionary<string, object>
            {
              ["email"] = new String[]
              {
                "primer@correo.com",
                "segundo@correo.com"
              }
            }
          );
      - lang: PHP
        source: |
          $facturapi = new Facturapi( "sk_test_API_KEY" );

          // Enviar recibo por correo electrónico
          $facturapi->Receipts->send_by_email(
            "58e93bd8e86eb318b019743d",
            "ejemplo@correo.com"
          );

          // Enviar a más de un correo (máx 10)
          $facturapi->Receipts->send_by_email(
            "58e93bd8e86eb318b019743d",
            [
              "primer@correo.com",
              "segundo@correo.com"
            ]
          );
  /receipts/{receipt_id}/invoice:
    post:
      description: |
        Crea una factura a partir de un recibo.

        Sólo pueden facturarse recibos abiertos (`status = "open"`)

        Una vez facturado, el `status` del recibo cambiará a `"invoiced_to_customer"`.
      operationId: invoiceReceipt
      requestBody:
        $ref: '#/components/requestBodies/ReceiptInvoice'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
          description: Nuevo objeto `Invoice` creado
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthenticated'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/UnexpectedError'
      security:
      - Secret Live Key: []
      - Secret Test Key: []
      summary: Facturar recibo
      tags:
      - receipt
      x-codeSamples:
      - lang: Bash
        label: cURL
        source: |
          curl https://www.facturapi.io/v2/receipts/5ebd8e56f5687a013ca0df46/invoice \
            -H "Authorization: Bearer sk_test_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
                  "customer": "58e93bd8e86eb318b0197456",
                  "folio_number": 914,
                  "series": "F"
              }'
      - lang: JavaScript
        label: Node.js
        source: |
          const Facturapi = require('facturapi');
          const facturapi = new Facturapi('sk_test_API_KEY');

          const invoice = await facturapi.receipts.invoice('5ebd8e56f5687a013ca0df46', {
            customer: '58e93bd8e86eb318b0197456',
            folio_number: 914,
            series: 'F'
          });
      - lang: csharp
        label: C#
        source: |
          var facturapi = new FacturapiClient("sk_test_API_KEY");
          var invoice = await facturapi.Receipt.InvoiceAsync("5ebd8e56f5687a013ca0df46", new Dictionary<string, object>
          {
            ["customer"] = "58e93bd8e86eb318b0197456",
            ["folio_number"] = 914,
            ["series"] = "F"
          });
      - lang: PHP
        source: |
          $facturapi = new Facturapi("sk_test_API_KEY");

          $invoice = $facturapi->Receipts->invoice("5a3f3e35f508333611ad6b3e", [
            "customer" => "58e93bd8e86eb318b0197456",
            "folio_number" => 914,
            "series" => "F"
          ]);
  /receipts/global-invoice:
    post:
      description: |
        Crea una factura global que incluirá todos los recibos con `status = “open”` de un cierto periodo.
      operationId: createGlobalInvoice
      requestBody:
        $ref: '#/components/requestBodies/ReceiptCreateGlobalInvoice'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
          description: Nuevo objeto `Invoice` creado
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthenticated'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/UnexpectedError'
      security:
      - Secret Live Key: []
      - Secret Test Key: []
      summary: Crear factura global
      tags:
      - receipt
      x-codeSamples:
      - lang: Bash
        label: cURL
        source: |
          curl https://www.facturapi.io/v2/receipts/global-invoice \
            -H "Authorization: Bearer sk_test_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
                  "from": "2021-01-01T05:00:00.000Z",
                  "to": "2021-01-31T04:59:59.999Z",
                  "periodicity": "month",
                  "months": "01",
                  "year": 2021,
                  "folio_number": 1234,
                  "series": "G"
              }'
      - lang: JavaScript
        label: Node.js
        source: |
          const Facturapi = require('facturapi');
          const facturapi = new Facturapi('sk_test_API_KEY');

          const invoice = await facturapi.receipts.createGlobalInvoice({
            from: '2020-12-01T05:00:00.000Z',
            to: '2020-12-31T04:59:59.999Z',
            periodicity: 'month',
            months: '01',
            year: 2021
            folio_number: 1234,
            series: 'G'
          });
      - lang: csharp
        label: C#
        source: |
          var facturapi = new FacturapiClient("sk_test_API_KEY");
          var invoice = await facturapi.Receipt.CreateGlobalInvoiceAsync(new Dictionary<string, object>
          {
            ["from"] = "2020-12-01T05:00:00.000Z",
            ["to"] = "2020-12-31T04:59:59.999Z",
            ["periodicity"] = "month",
            ["months"] = "01",
            ["year"] = 2021,
            ["folio_number"] = 1234,
            ["series"] = "G"
          });
      - lang: PHP
        source: |
          $facturapi = new Facturapi("sk_test_API_KEY");

          $invoice = $facturapi->Receipts->createGlobalInvoice([
            "from" => "2020-12-01T05:00:00.000Z",
            "to" => "2020-12-31T04:59:59.999Z",
            "periodicity" => "month",
            "months" => "01",
            "year" => 2021,
            "folio_number" => 1234,
            "series" => "G"
          ]);
  /retentions:
    get:
      description: Regresa una lista paginada de todas las retenciones de una organización
        o realiza una búsqueda de acuerdo a parámetros
      operationId: listRetentions
      parameters:
      - description: Consulta. Texto a buscar en el nombre fiscal del cliente o su
          RFC.
        explode: true
        in: query
        name: q
        required: false
        schema:
          type: string
        style: form
      - description: Identificador del cliente. Útil para obtener las retenciones
          emitidas a un sólo cliente.
        explode: true
        in: query
        name: customer
        required: false
        schema:
          type: string
        style: form
      - $ref: '#/components/parameters/SearchDate'
      - $ref: '#/components/parameters/SearchPage'
      - $ref: '#/components/parameters/SearchLimit'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetentionSearchResult'
          description: Resultado de la búsqueda
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthenticated'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/UnexpectedError'
      security:
      - Secret Live Key: []
      - Secret Test Key: []
      summary: Listar retenciones
      tags:
      - retention
      x-codeSamples:
      - lang: Bash
        label: cURL
        source: |
          # Todas las retenciones de la organización
          curl https://www.facturapi.io/v2/retentions \
            -H "Authorization: Bearer sk_test_API_KEY"

          # Todas las retenciones emitidas para cierto cliente
          curl "https://www.facturapi.io/v2/retentions" \
            -G \
            -H "Authorization: Bearer sk_test_API_KEY" \
            -d "customer=58e93bd8e86eb318b0197456"

          # Página 3 de los resultados de búsqueda de texto libre
          # de retenciones emitidas entre 2017 y 2019
          curl "https://www.facturapi.io/v2/retentions" \
            -G \
            -H "Authorization: Bearer sk_test_API_KEY" \
            -d "q=John+Doe6&date[gte]=2017-01-01T00:00:00.000Z&date[lt]=2020-01-01T00:00:00.000Z&page=3&limit=10"
      - lang: JavaScript
        label: Node.js
        source: |
          const Facturapi = require('facturapi');
          const facturapi = new Facturapi('sk_test_API_KEY');

          // Todas las retenciones de la organización
          const retentionSearch = await facturapi.retentions.list();

          // Todas las retenciones emitidas para cierto cliente
          const retentionSearch = await facturapi.retentions.list({
            customer: '590ce6c56d04f840aa8438af'
          });

          // Página 3 de los resultados de búsqueda de texto libre
          // de retenciones emitidas entre 2017 y 2019
          const retentionSearch = await facturapi.retentions.list({
            q: 'John Doe',
            date: {
              gte: new Date('2017-01-01T00:00:00.000Z'),
              lt: new Date('2020-01-01T00:00:00.000Z')
            },
            page: 3,
            limit: 10,
          });
      - lang: csharp
        label: C#
        source: |
          var facturapi = new FacturapiClient("sk_test_API_KEY");

          // Todas las retenciones de la organización
          var searchResult = await facturapi.Retention.ListAsync();

          // Todas las retenciones emitidas para cierto cliente
          var searchResult = await facturapi.Retention.ListAsync(
            new Dictionary<string, object>
            {
              ["customer"] = "590ce6c56d04f840aa8438af"
            }
          );

          // Página 3 de los resultados de búsqueda de texto libre
          // de retenciones emitidas entre 2017 y 2019
          var searchResult = await facturapi.Retention.ListAsync(
            new Dictionary<string, object>
            {
              ["q"] = "John Doe",
              ["date"] = new Dictionary<string, object>
                {
                  ["gte"] = new DateTime("2017-01-01T00:00:00.000Z"),
                  ["lt"] = new DateTime("2020-01-01T00:00:00.000Z")
                },
              ["page"] = 3,
              ["limit"] = 10,
            }
          );
      - lang: PHP
        source: |
          $facturapi = new Facturapi( "sk_test_API_KEY" );

          // Todas las retenciones de la organización
          $retentions = $facturapi->Retentions->all();

          // Todas las retenciones emitidas para cierto cliente
          $retentions = $facturapi->Retentions->all([
            customer => "590ce6c56d04f840aa8438af"
          ]);

          // Página 3 de los resultados de búsqueda de texto libre
          // de retenciones emitidas entre 2017 y 2019
          $retentions = $facturapi->Retentions->all([
            q => "John Doe",
            date => [
              gte => new DateTime("2017-01-01T00:00:00.000Z"),
              lt => new DateTime("2020-01-01T00:00:00.000Z")
            ],
            page => 3,
            limit => 10,
          ]);
    post:
      description: |
        Crea una nueva Retención. Si el comprobante es creado en ambiente Live, ésta será **timbrado y enviado al SAT**.
      operationId: createRetention
      requestBody:
        $ref: '#/components/requestBodies/RetentionCreate'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Retention'
          description: Nuevo objeto `Retention` creado
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthenticated'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/UnexpectedError'
      security:
      - Secret Live Key: []
      - Secret Test Key: []
      summary: Crear retención
      tags:
      - retention
      x-codeSamples:
      - lang: Bash
        label: cURL
        source: |
          curl https://www.facturapi.io/v2/retentions \
            -H "Authorization: Bearer sk_test_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
                  "customer": "58e93bd8e86eb318b0197456",
                  "cve_retenc": "26",
                  "periodo": {
                    "mes_ini": 1,
                    "mes_fin": 12,
                    "ejerc": 2020
                  },
                  "totales": {
                    "monto_tot_operacion": 244.654321,
                    "monto_tot_exent": 145.123456,
                    "imp_retenidos": [
                      {
                        "monto_ret": 40,
                        "base_ret": 250
                      }
                    ]
                  }
                }'
      - lang: JavaScript
        label: Node.js
        source: |
          const Facturapi = require('facturapi');
          const facturapi = new Facturapi('sk_test_API_KEY');
          const retention = await facturapi.retentions.create({
            customer: '58e93bd8e86eb318b0197456',
            cve_retenc: '26',
            periodo: {
              mes_ini: 1,
              mes_fin: 12,
              ejerc: 2020
            },
            totales: {
              monto_tot_operacion: 244.654321,
              monto_tot_exent: 145.123456,
              imp_retenidos: [
                {
                  monto_ret: 40,
                  base_ret: 250
                }
              ]
            }
          });
      - lang: csharp
        label: C#
        source: |
          var facturapi = new FacturapiClient("sk_test_API_KEY");
          var retention = await facturapi.Retention.CreateAsync(new Dictionary<string, object>
          {
            ["customer"] = "58e93bd8e86eb318b0197456",
            ["cve_retenc"] = "26",
            ["periodo"] = new Dictionary<string, object>
            {
              ["mes_ini"] = 1,
              ["mes_fin"] = 12,
              ["ejerc"] = 2020
            },
            ["totales"] = new Dictionary<string, object>
            {
              ["monto_tot_operacion"] = 244.654321,
              ["monto_tot_exent"] = 145.123456,
              ["imp_retenidos"] = new Dictionary<string, object>[]
              {
                new Dictionary<string, object>
                {
                  ["]
                  ["monto_ret"] = 40,
                  ["base_ret"] = 250
                }
              }
            }
          });
      - lang: PHP
        source: |
          $facturapi = new Facturapi( "sk_test_API_KEY" );
          $retention = $facturapi->Retentions->create([
            "customer" => "58e93bd8e86eb318b0197456",
            "cve_retenc" => "26",
            "periodo" => [
              "mes_ini" => 1,
              "mes_fin" => 12,
              "ejerc" => 2020
            ],
            "totales" => [
              "monto_tot_operacion" => 244.654321,
              "monto_tot_exent" => 145.123456,
              "imp_retenidos" => [
                [
                  "impuesto" => "ISR",
                  "monto_ret" => 40,
                  "base_ret" => 250
                ]
              ]
            ]
          ]);
  /retentions/{retention_id}:
    delete:
      description: |
        Realiza una solicitud de cancelación de retención ante el SAT.

        A diferencia de las facturas comúnes, la cancelación de la retención es inmediata y no requiere autorización de parte del receptor.
      operationId: cancelRetention
      parameters:
      - description: ID de la retención a cancelar
        explode: false
        in: path
        name: retention_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Retention'
          description: Objeto `Retention` cancelado exitosamente
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthenticated'
        "500":
          $ref: '#/components/responses/UnexpectedError'
      security:
      - Secret Live Key: []
      - Secret Test Key: []
      summary: Cancelar retención
      tags:
      - retention
      x-codeSamples:
      - lang: Bash
        label: cURL
        source: |
          curl https://www.facturapi.io/v2/retentions/6062d9fb226600001cd22f71 \
            -H "Authorization: Bearer sk_test_API_KEY" \
            -X DELETE
      - lang: JavaScript
        label: Node.js
        source: |
          const Facturapi = require('facturapi');
          const facturapi = new Facturapi('sk_test_API_KEY');
          const canceledRetention = await facturapi.retentions.cancel('6062d9fb226600001cd22f71');
      - lang: csharp
        label: C#
        source: |
          var facturapi = new FacturapiClient("sk_test_API_KEY");
          var canceledRetention = await facturapi.Retention.CancelAsync("6062d9fb226600001cd22f71");
      - lang: PHP
        source: |
          $facturapi = new Facturapi( "sk_test_API_KEY" );
          $canceledRetention = $facturapi->Retentions->cancel("6062d9fb226600001cd22f71");
    get:
      description: Regresa el objeto 'Retention' relacionado al `id` especificado.
      operationId: getRetention
      parameters:
      - description: ID del objeto a obtener
        explode: false
        in: path
        name: retention_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Retention'
          description: Objeto `Retention`
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthenticated'
        "500":
          $ref: '#/components/responses/UnexpectedError'
      security:
      - Secret Live Key: []
      - Secret Test Key: []
      summary: Obtener retención por ID
      tags:
      - retention
      x-codeSamples:
      - lang: Bash
        label: cURL
        source: |
          curl https://www.facturapi.io/v2/retentions/6062d9fb226600001cd22f71 \
            -H "Authorization: Bearer sk_test_API_KEY"
      - lang: JavaScript
        label: Node.js
        source: |
          const Facturapi = require('facturapi');
          const facturapi = new Facturapi('sk_test_API_KEY');
          const retention = await facturapi.retentions.retrieve('6062d9fb226600001cd22f71');
      - lang: csharp
        label: C#
        source: |
          var facturapi = new FacturapiClient("sk_test_API_KEY");
          var retention = await facturapi.Retention.RetrieveAsync("6062d9fb226600001cd22f71");
      - lang: PHP
        source: |
          $facturapi = new Facturapi( "sk_test_API_KEY" );
          $retention = $facturapi->Retentions->retrieve( "6062d9fb226600001cd22f71" );
  /retentions/{retention_id}/{format}:
    get:
      description: "Descarga una retención en PDF, XML o ambos en un archivo comprimido\
        \ ZIP."
      operationId: downloadRetention
      parameters:
      - description: ID del objeto a descargar
        explode: false
        in: path
        name: retention_id
        required: true
        schema:
          type: string
        style: simple
      - description: Formato del archivo de descarga
        explode: false
        in: path
        name: format
        required: true
        schema:
          enum:
          - xml
          - pdf
          - zip
          type: string
        style: simple
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: Archivo del comprobante CFDI en el formato solicitado
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthenticated'
        "500":
          $ref: '#/components/responses/UnexpectedError'
      security:
      - Secret Live Key: []
      - Secret Test Key: []
      summary: Descargar retención
      tags:
      - retention
      x-codeSamples:
      - lang: Bash
        label: cURL
        source: |
          ## Descargar PDF y XML comprimidos en archivo ZIP
          curl https://www.facturapi.io/v2/retentions/58e93bd8e86eb318b019743d/zip \
            -H "Authorization: Bearer sk_test_API_KEY"

          ## Descargar sólo el PDF
          curl https://www.facturapi.io/v2/retentions/58e93bd8e86eb318b019743d/pdf \
            -H "Authorization: Bearer sk_test_API_KEY"

          ## Descargar sólo el XML
          curl https://www.facturapi.io/v2/retentions/58e93bd8e86eb318b019743d/xml \
            -H "Authorization: Bearer sk_test_API_KEY"
      - lang: JavaScript
        label: Node.js
        source: |
          const fs = require('fs');
          const Facturapi = require('facturapi');
          const facturapi = new Facturapi('sk_test_API_KEY');

          // Descargar PDF y XML comprimidos en archivo ZIP
          const zipStream = await facturapi.retentions.downloadZip('58e93bd8e86eb318b019743d');
          const zipFile = fs.createWriteStream('./retencion.zip');
          zipStream.pipe(zipFile);

          // Descargar sólo el PDF
          const pdfStream = await facturapi.retentions.downloadPdf('58e93bd8e86eb318b019743d');
          const pdfFile = fs.createWriteStream('./retencion.pdf');
          pdfStream.pipe(pdfFile);

          // Descargar sólo el XML
          const xmlStream = await facturapi.retentions.downloadXml('58e93bd8e86eb318b019743d');
          const xmlFile = fs.createWriteStream('./retencion.xml');
          xmlStream.pipe(xmlFile);
      - lang: csharp
        label: C#
        source: |
          // Descargar PDF y XML comprimidos en archivo ZIP
          var zipStream = await facturapi.Retention.DownloadZipAsync("58e93bd8e86eb318b019743d");
          // Descargar sólo el XML
          var xmlStream = await facturapi.Retention.DownloadXmlAsync("58e93bd8e86eb318b019743d");
          // Descargar sólo el PDF
          var pdfStream = await facturapi.Retention.DownloadPdfAsync("58e93bd8e86eb318b019743d");

          // Para guardar la descarga en un archivo
          var file = new System.IO.FileStream("C:\\route\\to\\save\\retention.zip", FileMode.Create);
          zipStream.CopyTo(file);
          file.Close();
      - lang: PHP
        source: "$facturapi = new Facturapi( \"sk_test_API_KEY\" );\n\n// stream containing\
          \ the PDF and XML as a ZIP file\n$zip = $facturapi->Retentions->download_zip(\"\
          58e93bd8e86eb318b019743d\");\n// stream containing the PDF file\n$pdf =\
          \ $facturapi->Retentions->download_pdf(\"58e93bd8e86eb318b019743d\"); \n\
          // stream containing the XML file\n$xml = $facturapi->Retentions->download_xml(\"\
          58e93bd8e86eb318b019743d\");\n"
  /retentions/{retention_id}/email:
    post:
      description: "Envía un correo electrónico a la dirección de tu cliente, con\
        \ los archivos XML y PDF adjuntos al mensaje."
      operationId: sendRetentionByEmail
      parameters:
      - description: ID del objeto a obtener
        explode: false
        in: path
        name: retention_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sendInvoiceByEmail_request'
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: Archivo del comprobante en el formato solicitado
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthenticated'
        "500":
          $ref: '#/components/responses/UnexpectedError'
      security:
      - Secret Live Key: []
      - Secret Test Key: []
      summary: Enviar retención por correo electrónico
      tags:
      - retention
      x-codeSamples:
      - lang: Bash
        label: cURL
        source: |
          # Enviar al correo del cliente
          curl https://www.facturapi.io/v2/retentions/58e93bd8e86eb318b019743d/email \
            -H "Authorization: Bearer sk_test_API_KEY"
            -X POST

          # Enviar a otro correo
          curl https://www.facturapi.io/v2/retentions/58e93bd8e86eb318b019743d/email \
            -H "Authorization: Bearer sk_test_API_KEY"
            -X POST
            -H "Content-Type: application/json" \
            -d '{
                  "email": "another_email@example.com"
                }'
      - lang: JavaScript
        label: Node.js
        source: "const Facturapi = require('facturapi');\nconst facturapi = new Facturapi('sk_test_API_KEY');\n\
          \n// Enviar al correo del cliente\nawait facturapi.retentions.sendByEmail('58e93bd8e86eb318b019743d');\n\
          \n// Enviar a otro correo\nawait facturapi.retentions.sendByEmail(\n  '58e93bd8e86eb318b019743d',\n\
          \  { email: 'otro@correo.com' }\n);\n\n// Enviar a más de un correo (má\
          x. 10)\nawait facturapi.retentions.sendByEmail(\n  '58e93bd8e86eb318b019743d',\n\
          \  { \n    email: [\n      'primer@correo.com',\n      'segundo@correo.com'\n\
          \    ]\n  }\n);\n"
      - lang: csharp
        label: C#
        source: |
          // Enviar al correo del cliente
          await facturapi.Retention.SendByEmailAsync("58e93bd8e86eb318b019743d");

          // Enviar a otro correo
          await facturapi.Retention.SendByEmailAsync(
            "58e93bd8e86eb318b019743d",
            new Dictionary<string, object>
            {
              ["email"] = "otro@correo.com"
            }
          );

          // Enviar a más de un correo
          await facturapi.Retention.SendByEmailAsync(
            "58e93bd8e86eb318b019743d",
            new Dictionary<string, object>
            {
              ["email"] = new String[]
              {
                "primer@correo.com",
                "segundo@correo.com"
              }
            }
          );
      - lang: PHP
        source: |
          $facturapi = new Facturapi( "sk_test_API_KEY" );

          // Enviar al correo del cliente
          $facturapi->Retentions->send_by_email("58e93bd8e86eb318b019743d");

          // Enviar a otro correo
          $facturapi->Retentions->send_by_email(
            "58e93bd8e86eb318b019743d",
            "otro@correo.com"
          );

          // Enviar a más de un correo (máx 10)
          $facturapi->Retentions->send_by_email(
            "58e93bd8e86eb318b019743d",
            [
              "primer@correo.com",
              "segundo@correo.com"
            ]
          );
  /organizations:
    get:
      description: "Regresa una lista paginada de todas las organizationes registradas\
        \ bajo tu cuenta, o realiza una búsqueda de acuerdo a parámetros."
      operationId: listOrganizations
      parameters:
      - description: "Consulta. Texto a buscar en `name` (nombre comercial), `legal_name`\
          \ (nombre fiscal) o en `tax_id` (RFC)."
        explode: true
        in: query
        name: q
        required: false
        schema:
          type: string
        style: form
      - $ref: '#/components/parameters/SearchDate'
      - $ref: '#/components/parameters/SearchPage'
      - $ref: '#/components/parameters/SearchLimit'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationSearchResult'
          description: Resultado de la búsqueda
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthenticated'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/UnexpectedError'
      security:
      - Secret User Key: []
      summary: Listar organizaciones
      tags:
      - organization
      x-codeSamples:
      - lang: Bash
        label: cURL
        source: |
          curl https://www.facturapi.io/v2/organizations \
            -H "Authorization: Bearer sk_user_API_KEY"
      - lang: JavaScript
        label: Node.js
        source: |
          const Facturapi = require('facturapi');
          const facturapi = new Facturapi('sk_test_API_KEY');

          const organizationResults = await facturapi.organizations.list();
      - lang: csharp
        label: C#
        source: |
          var facturapi = new FacturapiClient("sk_test_API_KEY");

          var searchResult = await facturapi.Organization.ListAsync();
      - lang: PHP
        source: |
          $facturapi = new Facturapi( "sk_test_API_KEY" );

          $organizations = $facturapi->Organizations->all()
    post:
      description: |
        Crea una nueva Organización que pertenecerá a tu cuenta de usuario.

        Después de crear la organización y antes de poder emitir facturas con
        la organización, deberás de terminar de configurarla llamando a los
        métodos de [Actualizar datos fiscales](#operation/editOrganizationLegal) y
        [Subir certificados (CSD)](#operation/uploadOrganizationCertificate)

        Recuerda que los folios de tu suscripción podrán ser consumidos por
        cualquiera de las organizaaciones registradas bajo tu cuenta.
      operationId: createOrganization
      requestBody:
        $ref: '#/components/requestBodies/OrganizationCreate'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: Nuevo objeto `Organization` creado
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthenticated'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/UnexpectedError'
      security:
      - Secret User Key: []
      summary: Crear organización
      tags:
      - organization
      x-codeSamples:
      - lang: Bash
        label: cURL
        source: |
          curl https://www.facturapi.io/v2/organizations \
            -H "Authorization: Bearer sk_user_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
                "name": "Skynet"
              }'
      - lang: JavaScript
        label: Node.js
        source: |
          const Facturapi = require('facturapi');
          const facturapi = new Facturapi('sk_user_API_KEY');
          const organization = await facturapi.organizations.create({
            name: 'Skynet'
          });
      - lang: csharp
        label: C#
        source: |
          var facturapi = new FacturapiClient("sk_user_API_KEY");
          var organization = await facturapi.Organization.CreateAsync(new Dictionary<string, object>
          {
            ["name"] = "Skynet"
          });
      - lang: PHP
        source: |
          $facturapi = new Facturapi("sk_user_API_KEY");
          $organization = $facturapi->Organizations->create([
            "name" => "Skynet"
          ]);
  /organizations/{organization_id}/legal:
    put:
      description: |
        Actualiza los datos fiscales de la organización.

        Si estás buscando cómo editar el RFC, recuerda que la propiedad
        `tax_id` se asigna automáticamente al subir los Certificados de Sello
        Digital.
      operationId: editOrganizationLegal
      parameters:
      - description: ID de la organización
        explode: false
        in: path
        name: organization_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/OrganizationEditLegal'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: Objeto `Organization` modificado
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthenticated'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/UnexpectedError'
      security:
      - Secret User Key: []
      summary: Editar datos fiscales
      tags:
      - organization
      x-codeSamples:
      - lang: Bash
        label: cURL
        source: |
          curl https://www.facturapi.io/v2/organizations/5a2a307be93a2f00129ea035/legal \
            -X PUT \
            -H "Authorization: Bearer sk_user_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
                  "name": "Skynet",
                  "legal_name": "Skynet",
                  "tax_system": "601",
                  "website": "www.sky.net",
                  "phone": "555-555-5555",
                  "address": {
                    "exterior": "1414",
                    "interior": "12",
                    "zip": "44940",
                    "neighborhood": "Villa Toscana",
                    "city": "Guadalajara",
                    "municipality": "Guadalajara",
                    "state": "Jalisco",
                    "country": "México"
                  }
              }'
      - lang: JavaScript
        label: Node.js
        source: |
          const Facturapi = require('facturapi');
          const facturapi = new Facturapi('sk_user_API_KEY');
          const organization = await facturapi.organizations.updateLegal(
            '5a2a307be93a2f00129ea035',
            {
              name: 'Skynet',
              legal_name: 'Skynet',
              tax_system: Facturapi.TaxSystem.GENERAL_LEY_DE_PERSONAS_MORALES,
              website: 'www.sky.net',
              phone: '555-555-5555',
              address: {
                exterior: '1414',
                interior: '12',
                zip: '44940',
                neighborhood: 'Villa Toscana',
                city: 'Guadalajara',
                municipality: 'Guadalajara',
                state: 'Jalisco',
                country: 'México'
              }
            }
          );
      - lang: csharp
        label: C#
        source: |
          var facturapi = new FacturapiClient("sk_user_API_KEY");
          var organization = await facturapi.Organization.UpdateLegalAsync(
            "5a2a307be93a2f00129ea035",
            new Dictionary<string, object>
            {
              ["name"] = "Skynet",
              ["legal_name"] = "Skynet",
              ["tax_system"] = "601",
              ["website"] = "www.sky.net",
              ["phone"] = "555-555-5555",
              ["address"] = new Dictionary<string, object>
              {
                ["exterior"] = "1414",
                ["interior"] = "12",
                ["zip"] = "44940",
                ["neighborhood"] = "Villa Toscana",
                ["city"] = "Guadalajara",
                ["municipality"] = "Guadalajara",
                ["state"] = "Jalisco",
                ["country"] = "México"
              }
            }
          );
      - lang: PHP
        source: |
          $facturapi = new Facturapi("sk_user_API_KEY");
          $organization = $facturapi->Organizations->updateLegal(
            "5a2a307be93a2f00129ea035", [
              "name" => "Skynet",
              "legal_name" => "Skynet",
              "tax_system" => "601",
              "website" => "www.sky.net",
              "phone" => "555-555-5555",
              "address" => [
                "exterior" => "1414",
                "interior" => "12",
                "zip" => "44940",
                "neighborhood" => "Villa Toscana",
                "city" => "Guadalajara",
                "municipality" => "Guadalajara",
                "state" => "Jalisco",
                "country" => "México"
              )
            ]
          ];
  /organizations/{organization_id}/certificate:
    put:
      description: |
        Sube los archivos del Certificado de Sello Digital (CSD) proporcionado
        por el SAT. Esta llamada también debe usarse para reemplazar los
        certificados existentes en caso de solicitar nuevos.

        Al actualizar tus certificados se leerá el RFC y asignará
        automáticamente a `legal.tax_id`.
      operationId: uploadOrganizationCertificate
      parameters:
      - description: ID de la organización
        explode: false
        in: path
        name: organization_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/OrganizationUploadCerts'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: Objeto `Organization` modificado
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthenticated'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/UnexpectedError'
      security:
      - Secret User Key: []
      summary: Subir certificados (CSD)
      tags:
      - organization
      x-codeSamples:
      - lang: Bash
        label: cURL
        source: |
          curl https://www.facturapi.io/v2/organizations/5a2a307be93a2f00129ea035/certificate \
            -X PUT \
            -H "Authorization: Bearer sk_user_API_KEY" \
            -H "Content-Type: multipart/form-data" \
            -F 'cer=@/path/to/your/CSD.cer' \
            -F 'key=@/path/to/your/CSD.key' \
            -F 'password=CONTRASEÑA_DEL_CERTIFICADO'
      - lang: JavaScript
        label: Node.js
        source: |
          const fs = require('fs');
          const Facturapi = require('facturapi');
          const facturapi = new Facturapi('sk_user_API_KEY');

          const cerFileStream = fs.createReadStream('/path/to/your/CSD.cer');
          const keyFileStream = fs.createReadStream('/path/to/your/CSD.key');

          const organization = await facturapi.organizations.uploadCertificate(
            '5a2a307be93a2f00129ea035',
            cerFileStream,
            keyFileStream,
            'CONTRASEÑA_DEL_CERTIFICADO'
          );
      - lang: csharp
        label: C#
        source: |
          var facturapi = new FacturapiClient("sk_user_API_KEY");

          var cerFileStream = File.OpenRead(@"C:\path\to\your\CSD.cer");
          var keyFileStream = File.OpenRead(@"C:\path\to\your\CSD.key");

          var organization = await facturapi.Organization.UploadCertificateAsync(
            "5a2a307be93a2f00129ea035",
            cerFileStream,
            keyFileStream,
            "CONTRASEÑA_DEL_CERTIFICADO"
          );
      - lang: PHP
        source: |
          $facturapi = new Facturapi("sk_user_API_KEY");

          $organization = $facturapi->Organizations->uploadCertificate(
            "5a2a307be93a2f00129ea035",
            [
              "cerFile" => "/path/to/CSD.cer",
              "keyFile" => "/path/to/CSD.key",
              "password" => "mYp455w0rD1553cUr3!"
            ]
          );
  /organizations/{organization_id}/logo:
    put:
      description: |
        Sube el logotipo de la organización que será colocado en el PDF y en
        los correos que se envían al cliente con la factura adjunta.

        El archivo debe ser una imagen en formato JPG o PNG y tener un tamaño
        no mayor a 500 KB. Las dimensiones recomendadas son 800 × 500px.

        Si la organización ya tiene un logotipo, esta llamada reemplaza el
        logotipo anterior.
      operationId: uploadOrganizationLogo
      parameters:
      - description: ID de la organización
        explode: false
        in: path
        name: organization_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/OrganizationUploadLogo'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: Objeto `Organization` modificado
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthenticated'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/UnexpectedError'
      security:
      - Secret User Key: []
      summary: Subir logotipo
      tags:
      - organization
      x-codeSamples:
      - lang: Bash
        label: cURL
        source: |
          curl https://www.facturapi.io/v2/organizations/5a2a307be93a2f00129ea035/logo \
            -X PUT \
            -H "Authorization: Bearer sk_user_API_KEY" \
            -H "Content-Type: multipart/form-data" \
            -F 'file=@/path/to/your/logo.jpg'
      - lang: JavaScript
        label: Node.js
        source: |
          const fs = require('fs');
          const Facturapi = require('facturapi');
          const facturapi = new Facturapi('sk_user_API_KEY');

          const fileStream = fs.createReadStream('/path/to/your/logo.jpg');
          const organization = await facturapi.organizations.uploadLogo(
            '5a2a307be93a2f00129ea035',
            fileStream
          );
      - lang: csharp
        label: C#
        source: |
          var facturapi = new FacturapiClient("sk_user_API_KEY");

          var fileStream = File.OpenRead(@"C:\path\to\your\logo.jpg");

          var organization = await facturapi.Organization.UploadLogoAsync(
            "5a2a307be93a2f00129ea035",
            fileStream
          );
      - lang: PHP
        source: |
          $facturapi = new Facturapi("sk_user_API_KEY");

          $organization = $facturapi->Organizations->uploadLogo(
            "5a2a307be93a2f00129ea035",
            "/path/to/logo.jpg"
          ));
  /organizations/{organization_id}/customization:
    put:
      description: |
        Actualiza la información relacionada con la identidad o branding de la organización.
      operationId: editOrganizationCustomization
      parameters:
      - description: ID de la organización
        explode: false
        in: path
        name: organization_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/OrganizationEditCustomization'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: Objeto `Organization` modificado
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthenticated'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/UnexpectedError'
      security:
      - Secret User Key: []
      summary: Editar personalización
      tags:
      - organization
      x-codeSamples:
      - lang: Bash
        label: cURL
        source: |
          curl https://www.facturapi.io/v2/organizations/5a2a307be93a2f00129ea035/customization \
            -X PUT \
            -H "Authorization: Bearer sk_user_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
                  "color": "#BADA55",
                  "pdf_extra": {
                    "codes": false,
                    "product_key": true
                  }
              }'
      - lang: JavaScript
        label: Node.js
        source: |
          const Facturapi = require('facturapi');
          const facturapi = new Facturapi('sk_user_API_KEY');

          const organization = await facturapi.organizations.updateCustomization(
            '5a2a307be93a2f00129ea035',
            {
              color: '#BADA55',
              pdf_extra: {
                codes: false,
                product_key: true
              }
            }
          );
      - lang: csharp
        label: C#
        source: |
          var facturapi = new FacturapiClient("sk_user_API_KEY");

          var organization = await facturapi.Organization.UpdateCustomizationAsync(
            "5a2a307be93a2f00129ea035",
            new Dictionary<string, object>
            {
              ["color"] = "#BADA55",
              ["pdf_extra"] = new Dictionary<string, object>
              {
                ["codes"] = false,
                ["product_key"] = true
              }
            }
          );
      - lang: PHP
        source: |
          $facturapi = new Facturapi("sk_user_API_KEY");

          $organization = $facturapi->Organizations->updateCustomization(
            "5a2a307be93a2f00129ea035",
            array(
              "color" => "#BADA55",
              "pdf_extra" => array(
                "codes" => false,
                "product_key" => true
              )
            )
          );
  /organizations/{organization_id}/receipts:
    put:
      description: |
        Actualiza la configuración de recibos de la organización.
      operationId: editOrganizationReceiptsSettings
      parameters:
      - description: ID de la organización
        explode: false
        in: path
        name: organization_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/OrganizationEditReceiptsSettings'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: Objeto `Organization` modificado
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthenticated'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/UnexpectedError'
      security:
      - Secret User Key: []
      summary: Editar config. recibos
      tags:
      - organization
      x-codeSamples:
      - lang: Bash
        label: cURL
        source: |
          curl https://www.facturapi.io/v2/organizations/5a2a307be93a2f00129ea035/receipts \
            -X PUT \
            -H "Authorization: Bearer sk_user_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
                  "invoicing_period": "month",
                  "duration_days": 14,
                  "next_folio_number": 100
              }'
      - lang: JavaScript
        label: Node.js
        source: |
          const Facturapi = require('facturapi');
          const facturapi = new Facturapi('sk_user_API_KEY');

          const organization = await facturapi.organizations.updateReceiptSettings(
            '5a2a307be93a2f00129ea035',
            {
              invoicing_period: "month",
              duration_days: 14,
              next_folio_number: 100
            }
          );
      - lang: csharp
        label: C#
        source: |
          var facturapi = new FacturapiClient("sk_user_API_KEY");

          var organization = await facturapi.Organization.UpdateReceiptSettingsAsync(
            "5a2a307be93a2f00129ea035",
            new Dictionary<string, object>
            {
              ["invoicing_period"] = "month",
              ["duration_days"] = 14,
              ["next_folio_number"] = 100
            }
          );
      - lang: PHP
        source: |
          $facturapi = new Facturapi("sk_user_API_KEY");

          $organization = $facturapi->Organizations->updateReceiptSettings(
            "5a2a307be93a2f00129ea035",
            [
              "invoicing_period" => "month",
              "duration_days" => 14,
              "next_folio_number" => 100
            ]
          );
  /organizations/domain-check:
    get:
      description: Revisa si un identificador está disponible para elegir como dominio
        para el portal de autofactura.
      operationId: checkDomainAvailability
      parameters:
      - explode: true
        in: query
        name: domain
        required: false
        schema:
          $ref: '#/components/schemas/DomainField'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/checkDomainAvailability_200_response'
          description: Objeto `Organization`
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthenticated'
        "500":
          $ref: '#/components/responses/UnexpectedError'
      security:
      - Secret User Key: []
      summary: Revisar dominio disponible
      tags:
      - organization
      x-codeSamples:
      - lang: Bash
        label: cURL
        source: |
          curl https://www.facturapi.io/v2/organizations/domain-check?domain=empresa-demo \
            -H "Authorization: Bearer sk_user_API_KEY"
      - lang: JavaScript
        label: Node.js
        source: |
          const Facturapi = require('facturapi');
          const facturapi = new Facturapi('sk_user_API_KEY');

          const organization = await facturapi.organizations.checkDomainIsAvailable({
            domain: 'empresa-demo'
          });
      - lang: csharp
        label: C#
        source: |
          var facturapi = new FacturapiClient("sk_user_API_KEY");
          var organization = await facturapi.Organization.CheckDomainIsAvailableAsync(
            new Dictionary<string, object>
            {
              ["domain"] = "empresa-demo"
            }
          );
      - lang: PHP
        source: |
          $facturapi = new Facturapi( "sk_user_API_KEY" );
          $organization = $facturapi->Organizations->checkDomainIsAvailable(
            ["domain" => "empresa-demo"]
          );
  /organizations/{organization_id}/domain:
    put:
      description: |
        Elige el dominio que utilizará esta organización en su micrositio de
        autofactura. Una vez elegido el dominio, deberás ponerte en contacto
        con nosotros si necesitas cambiarlo.

        El dominio que elijas será el que aparecerá en el campo
        `self_invoice_url` al crear un nuevo recibo, de la siguiente manera:

        `https://factura.space/{DOMAIN}/{RECEIPT_KEY}`
      operationId: editOrganizationDomain
      parameters:
      - description: ID de la organización
        explode: false
        in: path
        name: organization_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/OrganizationEditDomain'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: Objeto `Organization` modificado
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthenticated'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/UnexpectedError'
      security:
      - Secret User Key: []
      summary: Elegir dominio de autofactura
      tags:
      - organization
      x-codeSamples:
      - lang: Bash
        label: cURL
        source: |
          curl https://www.facturapi.io/v2/organizations/5a2a307be93a2f00129ea035/domain \
            -X PUT \
            -H "Authorization: Bearer sk_user_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
                  "domain": "empresa-demo"
              }'
      - lang: JavaScript
        label: Node.js
        source: |
          const Facturapi = require('facturapi');
          const facturapi = new Facturapi('sk_user_API_KEY');

          const organization = await facturapi.organizations.updateDomain(
            '5a2a307be93a2f00129ea035',
            { domain: 'empresa-demo' }
          );
      - lang: csharp
        label: C#
        source: |
          var facturapi = new FacturapiClient("sk_user_API_KEY");

          var organization = await facturapi.Organization.UpdateDomainAsync(
            "5a2a307be93a2f00129ea035",
            new Dictionary<string, object>
            {
              ["domain"] = "empresa-demo"
            }
          );
      - lang: PHP
        source: |
          $facturapi = new Facturapi("sk_user_API_KEY");

          $organization = $facturapi->Organizations->updateDomain(
            "5a2a307be93a2f00129ea035",
            array( "domain" => "empresa-demo" )
          );
  /organizations/{organization_id}:
    delete:
      description: |
        Elimina la organización de tu cuenta de Facturapi. Una vez eliminada,
        ya no podrás acceder a sus recursos, tales como clientes, productos,
        facturas, recibos o retenciones.
      operationId: deleteOrganization
      parameters:
      - description: ID del objeto a eliminar
        explode: false
        in: path
        name: organization_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: Objeto `Organization` eliminado correctamente
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthenticated'
        "500":
          $ref: '#/components/responses/UnexpectedError'
      security:
      - Secret User Key: []
      summary: Eliminar organización
      tags:
      - organization
      x-codeSamples:
      - lang: Bash
        label: cURL
        source: |
          curl https://www.facturapi.io/v2/organizations/5a2a307be93a2f00129ea035 \
            -X DELETE \
            -H "Authorization: Bearer sk_user_API_KEY"
      - lang: JavaScript
        label: Node.js
        source: |
          const Facturapi = require('facturapi');
          const facturapi = new Facturapi('sk_user_API_KEY');
          const organization = await facturapi.organizations.del(
            '5a2a307be93a2f00129ea035'
          );
      - lang: csharp
        label: C#
        source: |
          var facturapi = new FacturapiClient("sk_user_API_KEY");
          var organization = await facturapi.Organization.DeleteAsync(
            "5a2a307be93a2f00129ea035"
          );
      - lang: PHP
        source: |
          $facturapi = new Facturapi( "sk_user_API_KEY" );
          $organization = $facturapi->Organizations->delete(
            "5a2a307be93a2f00129ea035"
          );
    get:
      description: Regresa el objeto 'Organization' relacionado al `id` especificado.
      operationId: getOrganization
      parameters:
      - description: ID de la organización
        explode: false
        in: path
        name: organization_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: Objeto `Organization`
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthenticated'
        "500":
          $ref: '#/components/responses/UnexpectedError'
      security:
      - Secret User Key: []
      summary: Obtener organización por ID
      tags:
      - organization
      x-codeSamples:
      - lang: Bash
        label: cURL
        source: |
          curl https://www.facturapi.io/v2/organizations/5a2a307be93a2f00129ea035 \
            -H "Authorization: Bearer sk_user_API_KEY"
      - lang: JavaScript
        label: Node.js
        source: |
          const Facturapi = require('facturapi');
          const facturapi = new Facturapi('sk_user_API_KEY');
          const organization = await facturapi.organizations.retrieve(
            '5a2a307be93a2f00129ea035'
          );
      - lang: csharp
        label: C#
        source: |
          var facturapi = new FacturapiClient("sk_user_API_KEY");
          var organization = await facturapi.Organization.RetrieveAsync(
            "5a2a307be93a2f00129ea035"
          );
      - lang: PHP
        source: |
          $facturapi = new Facturapi( "sk_user_API_KEY" );
          $organization = $facturapi->Organizations->retrieve("5a2a307be93a2f00129ea035");
  /organizations/{organization_id}/apikeys/test:
    get:
      description: Obtiene la llave secreta de ambiente Test de la organización.
      operationId: getTestApiKey
      parameters:
      - description: ID de la organización
        explode: false
        in: path
        name: organization_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                example: sk_test_API_KEY
                type: string
          description: Test API Key
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthenticated'
        "500":
          $ref: '#/components/responses/UnexpectedError'
      security:
      - Secret User Key: []
      summary: Obtener Test Api Key
      tags:
      - organization
      x-codeSamples:
      - lang: Bash
        label: cURL
        source: |
          curl https://www.facturapi.io/v2/organizations/5a2a307be93a2f00129ea035/apikeys/test \
            -H "Authorization: Bearer sk_user_API_KEY"
      - lang: JavaScript
        label: Node.js
        source: |
          const Facturapi = require('facturapi');
          const facturapi = new Facturapi('sk_user_API_KEY');

          const apiKeys = await facturapi.organizations.getTestApiKey(
            '5a2a307be93a2f00129ea035'
          );
      - lang: csharp
        label: C#
        source: |
          var facturapi = new FacturapiClient("sk_user_API_KEY");
          var apiKeys = await facturapi.Organization.GetTestApiKeyAsync(
            "5a2a307be93a2f00129ea035"
          );
      - lang: PHP
        source: |
          $facturapi = new Facturapi( "sk_user_API_KEY" );
          $organization = $facturapi->Organizations->getTestApiKey(
            "5a2a307be93a2f00129ea035"
          );
    put:
      description: Renueva la llave secreta de ambiente Test de la organización e
        invalida inmediatamente la anterior.
      operationId: renewTestApiKey
      parameters:
      - description: ID de la organización
        explode: false
        in: path
        name: organization_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                example: sk_test_API_KEY
                type: string
          description: Test API Key
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthenticated'
        "500":
          $ref: '#/components/responses/UnexpectedError'
      security:
      - Secret User Key: []
      summary: Renovar Test Api Key
      tags:
      - organization
      x-codeSamples:
      - lang: Bash
        label: cURL
        source: |
          curl https://www.facturapi.io/v2/organizations/5a2a307be93a2f00129ea035/apikeys/test \
            -X PUT \
            -H "Authorization: Bearer sk_user_API_KEY"
      - lang: JavaScript
        label: Node.js
        source: |
          const Facturapi = require('facturapi');
          const facturapi = new Facturapi('sk_user_API_KEY');

          const newTestApiKey = await facturapi.organizations.renewTestApiKey(
            '5a2a307be93a2f00129ea035'
          );
      - lang: csharp
        label: C#
        source: |
          var facturapi = new FacturapiClient("sk_user_API_KEY");
          var newTestApiKey = await facturapi.Organization.RenewTestApiKeyAsync(
            "5a2a307be93a2f00129ea035"
          );
      - lang: PHP
        source: |
          $facturapi = new Facturapi( "sk_user_API_KEY" );
          $new_test_api_key = $facturapi->Organizations->renewTestApiKey(
            "5a2a307be93a2f00129ea035"
          );
  /organizations/{organization_id}/apikeys/live:
    put:
      description: Renueva la llave secreta de ambiente Live de la organización e
        invalida inmediatamente la anterior.
      operationId: renewLiveApiKey
      parameters:
      - description: ID de la organización
        explode: false
        in: path
        name: organization_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                example: sk_live_API_KEY
                type: string
          description: Live API Key
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthenticated'
        "500":
          $ref: '#/components/responses/UnexpectedError'
      security:
      - Secret User Key: []
      summary: Renovar Live Api Key
      tags:
      - organization
      x-codeSamples:
      - lang: Bash
        label: cURL
        source: |
          curl https://www.facturapi.io/v2/organizations/5a2a307be93a2f00129ea035/apikeys/live \
            -X PUT \
            -H "Authorization: Bearer sk_user_API_KEY"
      - lang: JavaScript
        label: Node.js
        source: |
          const Facturapi = require('facturapi');
          const facturapi = new Facturapi('sk_user_API_KEY');

          const newLiveApiKey = await facturapi.organizations.renewLiveApiKey(
            '5a2a307be93a2f00129ea035'
          );
      - lang: csharp
        label: C#
        source: |
          var facturapi = new FacturapiClient("sk_user_API_KEY");
          var newLiveApiKey = await facturapi.Organization.RenewLiveApiKeyAsync(
            "5a2a307be93a2f00129ea035"
          );
      - lang: PHP
        source: |
          $facturapi = new Facturapi( "sk_user_API_KEY" );
          $new_live_api_key = $facturapi->Organizations->renewLiveApiKey(
            "5a2a307be93a2f00129ea035"
          );
  /check:
    get:
      description: Indica el estatus de disponibilidad de la API.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_check_get_200_response'
          description: La API está operando con normalidad.
        "401":
          description: Error de autenticación. Asegúrate de estar usando tu llave
            secreta.
        "502":
          description: Servicio temporalmente no disponible.
      security:
      - Secret Live Key: []
      - Secret Test Key: []
      summary: Health check (Pulso)
      tags:
      - tools
  /tools/tax_id_validation:
    get:
      description: |
        Consulta el estado de un RFC en la lista de **EFOS** (Empresas que
        Facturan Operaciones Simuladas). Al aparecer en esta lista, el RFC es o
        fue sospechoso de incurrir en simulación de operaciones fiscales
        (empresas factureras).

        La respuesta (detallada más abajo) incluye los resultados de esta
        validación. Se incluye la propiedad
        booleana `is_valid`, que Facturapi resuelve interpretando la respuesta.
        Un valor de `true` para esta propiedad indica que el RFC no tiene asuntos
        por resolver y está libre de problemas; y lo contrario para `false`.
        Adicionalmente puedes consultar la propiedad data para ver los valores
        en bruto de la consulta al SAT.
      parameters:
      - explode: true
        in: query
        name: tax_id
        required: true
        schema:
          description: RFC a validar
          example: BBA830831LJ2
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxIdValidationResult'
          description: Resultado de la validación
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthenticated'
        "500":
          $ref: '#/components/responses/UnexpectedError'
      security:
      - Secret Live Key: []
      - Secret Test Key: []
      summary: Validar RFC
      tags:
      - tools
      x-codeSamples:
      - lang: Bash
        label: cURL
        source: |
          curl https://www.facturapi.io/v2/tools/tax_id_validation?tax_id=BBA830831LJ2 \
            -H "Authorization: Bearer sk_test_API_KEY"
      - lang: JavaScript
        label: Node.js
        source: |
          const Facturapi = require('facturapi');
          const facturapi = new Facturapi('sk_test_API_KEY');

          const validation = await facturapi.tools.validateTaxId('BBA830831LJ2');
      - lang: csharp
        label: C#
        source: |
          var facturapi = new FacturapiClient("sk_test_API_KEY");

          var customer = await facturapi.Tools.ValidateTaxIdAsync("BBA830831LJ2");
      - lang: PHP
        source: |
          $facturapi = new Facturapi( "sk_test_API_KEY" );

          $customer = $facturapi->Tools->validateTaxId("BBA830831LJ2");
  /catalogs/products:
    get:
      description: "Busca en el catálogo Productos/Servicios del SAT, el cual contiene\
        \ la clave a incluir en la factura."
      parameters:
      - description: Consulta. Texto a buscar en la descripción de la categoría.
        explode: true
        in: query
        name: q
        required: false
        schema:
          type: string
        style: form
      - $ref: '#/components/parameters/SearchPage'
      - $ref: '#/components/parameters/SearchLimit'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCatalogSearchResult'
          description: Resultado de la búsqueda
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthenticated'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/UnexpectedError'
      security:
      - Secret Live Key: []
      - Secret Test Key: []
      summary: Producto/Servicio
      tags:
      - sat_keys
      x-codeSamples:
      - lang: Bash
        label: cURL
        source: "curl https://www.facturapi.io/v2/catalogs/products?q=ukelele \\\n\
          \  -H \"Authorization: Bearer sk_test_API_KEY\" \n"
      - lang: JavaScript
        label: Node.js
        source: |
          const Facturapi = require('facturapi');
          const facturapi = new Facturapi('sk_test_API_KEY');

          const searchResult = await facturapi.catalogs.searchProducts({
            q: 'ukelele'
          });
      - lang: csharp
        label: C#
        source: |
          var facturapi = new FacturapiClient("sk_test_API_KEY");

          var searchResult = await facturapi.Catalog.SearchProducts(
            new Dictionary<string, object>
            {
              ["q"] = "ukelele"
            }
          );
      - lang: PHP
        source: |
          $facturapi = new Facturapi( "sk_test_API_KEY" );

          $result = $facturapi->Catalogs->searchProducts([
            "q" => "ukelele"
          ]);
  /catalogs/units:
    get:
      description: Busca en el catálogo de Unidades de Medida del SAT.
      parameters:
      - description: Consulta. Texto a buscar en la descripción de la unidad de medida.
        explode: true
        in: query
        name: q
        required: false
        schema:
          type: string
        style: form
      - $ref: '#/components/parameters/SearchPage'
      - $ref: '#/components/parameters/SearchLimit'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnitCatalogSearchResult'
          description: Resultado de la búsqueda
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthenticated'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/UnexpectedError'
      security:
      - Secret Live Key: []
      - Secret Test Key: []
      summary: Unidades de medida
      tags:
      - sat_keys
      x-codeSamples:
      - lang: Bash
        label: cURL
        source: "curl https://www.facturapi.io/v2/catalogs/units?q=pulgada \\\n  -H\
          \ \"Authorization: Bearer sk_test_API_KEY\" \n"
      - lang: JavaScript
        label: Node.js
        source: |
          const Facturapi = require('facturapi');
          const facturapi = new Facturapi('sk_test_API_KEY');

          const searchResult = await facturapi.catalogs.searchUnits({
            q: 'pulgada'
          });
      - lang: csharp
        label: C#
        source: |
          var facturapi = new FacturapiClient("sk_test_API_KEY");

          var searchResult = await facturapi.Catalog.SearchUnits(
            new Dictionary<string, object>
            {
              ["q"] = "pulgada"
            }
          );
      - lang: PHP
        source: |
          $facturapi = new Facturapi( "sk_test_API_KEY" );

          $result = $facturapi->Catalogs->searchUnits([
            "q" => "pulgada"
          ]);
components:
  parameters:
    SearchDate:
      description: Objeto con rango de fechas solicitado.
      explode: false
      in: query
      name: date
      required: false
      schema:
        $ref: '#/components/schemas/DateRange'
      style: deepObject
    SearchPage:
      description: "Página de resultados a regresar, empezando desde la página 1."
      explode: true
      in: query
      name: page
      required: false
      schema:
        minimum: 1
      style: form
    SearchLimit:
      description: Número del 1 al 100 que representa la cantidad máxima de resultados
        a regresar con motivos de paginación.
      explode: true
      in: query
      name: limit
      required: false
      schema:
        default: 50
        maximum: 100
        minimum: 1
      style: form
  requestBodies:
    CustomerCreate:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomerCreateInput'
    CustomerEdit:
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/CustomerProperties'
    ProductCreate:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/createProduct_request'
    ProductEdit:
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/ProductProperties'
    InvoiceCreate:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/createInvoice_request'
    ReceiptCreate:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReceiptInput'
    ReceiptInvoice:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvoiceReceiptInput'
    ReceiptCreateGlobalInvoice:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GlobalInvoiceInput'
    RetentionCreate:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RetentionInput'
    OrganizationCreate:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OrganizationCreateInput'
    OrganizationEditLegal:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OrganizationLegalInput'
    OrganizationUploadCerts:
      content:
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/OrganizationCertsInput'
    OrganizationUploadLogo:
      content:
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/OrganizationLogoInput'
    OrganizationEditCustomization:
      content:
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/OrganizationCustomizationInput'
    OrganizationEditReceiptsSettings:
      content:
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/OrganizationReceiptsInput'
    OrganizationEditDomain:
      content:
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/OrganizationDomainInput'
  responses:
    BadRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericError'
      description: Error en parámetros de la petición
    Unauthenticated:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericError'
      description: Error de autenticación
    NotFound:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericError'
      description: No se encontró el recurso especificado.
    UnexpectedError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericError'
      description: Error inesperado
  schemas:
    EventBase:
      properties:
        id:
          description: ID del evento
          type: string
          exacmple: 61f81a81bd4661b11b9b404e
        created_at:
          description: Fecha y hora de creación del evento
          format: date-time
          type: string
          exacmple: 2022-03-30T00:00:00Z
        livemode:
          description: Indica si el evento se generó en modo test (false) o en modo
            producción (true).
          type: boolean
          exacmple: false
        organization:
          description: ID de la organización a la que pertenece el evento
          type: string
          exacmple: 61f81a7fbd4661b11b9b3f27
    DateRange:
      properties:
        gt:
          description: Límite inferior exclusivo del rango de fechas a solicitar.
          format: date-time
          title: Greater than
          type: string
        gte:
          description: Límite inferior inclusivo del rango de fechas a solicitar.
          format: date-time
          title: Greater than or equals
          type: string
        lt:
          description: Límite superior exclusivo del rango de fechas a solicitar.
          format: date-time
          title: Lesser than
          type: string
        lte:
          description: Límite superior inclusivo del rango de fechas a solicitar.
          format: date-time
          title: Lesser than or equals
          type: string
    GenericError:
      properties:
        message:
          description: Indica qué salió mal y puede incluir una sugerencia sobre cómo
            solucionar el error.
          title: Descripción del error
          type: string
    SearchResult:
      properties:
        page:
          description: Número de página de resultados
          example: 1
          title: Página
          type: integer
        total_pages:
          description: Número total de páginas de resultados
          example: 1
          title: Páginas totales
          type: integer
        total_results:
          description: Número de elementos individuales en todas las páginas de resultados
          example: 1
          title: Resultados totales
          type: integer
    ResourceAutoGeneratedProps:
      properties:
        id:
          description: ID del objeto
          example: 590ce6c56d04f840aa8438af
          type: string
        created_at:
          description: Fecha de registro
          example: 2017-05-05T20:55:33.468Z
          format: date-time
          type: string
        livemode:
          description: "Si el valor es `true`, indica que el objeto fue creado en\
            \ ambiente Live; o si es `false`, en ambiente Test."
          example: false
          type: boolean
    TaxIdValidationResult:
      example:
        efos:
          data:
            fechaLista: Información actualizada al 17 de septiembre de 2021
            detalles:
            - razonSocial: "NORMANDIA FERRE,"
              pubSatSentFav: 08/06/2021
              pubSatDefinitivos: 500-05-2021-151
              numFechaSentFav: 500-05-2021-15156 de fecha 25 de mayo de 2021
              numGlobalPresuncion: 500-05-2020-23758 de fecha 03 de noviembre de 2020
              pubDofDefinitivos: 25/05/2021
              situacionContribuyente: Definitivo
              numFechaPresuncion: 500-05-2020-23758 de fecha 03 de noviembre de 2020
              pubFechaSatPresuntos: 03/11/2020
              rfc: NOR170627727
              pubFechaDofPresuntos: 18/11/2020
            - razonSocial: "NORMANDIA FERRE,"
              pubSatSentFav: 08/06/2021
              pubSatDefinitivos: 500-05-2021-151
              numFechaSentFav: 500-05-2021-15156 de fecha 25 de mayo de 2021
              numGlobalPresuncion: 500-05-2020-23758 de fecha 03 de noviembre de 2020
              pubDofDefinitivos: 25/05/2021
              situacionContribuyente: Definitivo
              numFechaPresuncion: 500-05-2020-23758 de fecha 03 de noviembre de 2020
              pubFechaSatPresuntos: 03/11/2020
              rfc: NOR170627727
              pubFechaDofPresuntos: 18/11/2020
            mensaje: mensaje
          is_valid: true
      properties:
        efos:
          $ref: '#/components/schemas/TaxIdValidationResult_efos'
    ProductCatalogResult:
      properties:
        key:
          description: Clave del catálogo
          example: 60131324
          type: string
        description:
          description: Descripción
          example: Ukelele
          type: string
        score:
          description: |
            Número del 0 al 1 que representa el nivel de coincidencia del
            resultado con respecto a la consulta de búsqueda.
          example: 0.8
          type: number
    UnitCatalogResult:
      properties:
        key:
          description: Clave del catálogo
          example: INH
          type: string
        description:
          description: Descripción
          example: Pulgada
          type: string
        score:
          description: |
            Número del 0 al 1 que representa el nivel de coincidencia del
            resultado con respecto a la consulta de búsqueda.
          example: 0.9
          type: number
    ProductCatalogSearchResult:
      allOf:
      - $ref: '#/components/schemas/SearchResult'
      - properties:
          data:
            items:
              $ref: '#/components/schemas/ProductCatalogResult'
            type: array
    UnitCatalogSearchResult:
      allOf:
      - $ref: '#/components/schemas/SearchResult'
      - properties:
          data:
            items:
              $ref: '#/components/schemas/UnitCatalogResult'
            type: array
    LocalTax:
      properties:
        rate:
          description: Tasa del impuesto en fracción decimal.
          example: 0.1
          type: number
        base:
          default: 100% del subtotal
          description: Base del impuesto
          type: number
        type:
          description: Nombre del impuesto. Texto libre.
          type: string
        withholding:
          default: false
          description: "Indica si se trata de un impuesto retenido (`true`), o un\
            \ impuesto trasladado (`false`)"
          type: boolean
      required:
      - rate
      - type
    BaseTax:
      discriminator:
        mapping:
          IVA: '#/components/schemas/BaseTax'
          ISR: '#/components/schemas/BaseTax'
          IEPS: '#/components/schemas/IepsTax'
        propertyName: type
      properties:
        rate:
          description: Tasa del impuesto en fracción decimal.
          example: 0.16
          type: number
        base:
          default: 100% del subtotal
          description: Base del impuesto.
          type: number
        type:
          default: IVA
          description: Tipo de impuesto.
          enum:
          - IVA
          - ISR
          - IEPS
          type: string
        factor:
          default: Tasa
          description: Tipo factor
          enum:
          - Tasa
          - Cuota
          - Exento
          type: string
        withholding:
          default: false
          description: "Indica si se trata de un impuesto retenido (`true`), o un\
            \ impuesto trasladado (`false`)"
          type: boolean
      required:
      - rate
      title: Tax
    IepsTax:
      allOf:
      - $ref: '#/components/schemas/BaseTax'
      - properties:
          ieps_mode:
            default: sum_before_taxes
            description: |
              Indica la manera de cobrar el impuesto, y puede tener los valores:

              `"sum_before_taxes"`: Aplica primero el IEPS al subtotal y usa el resultado como base del resto de impuestos en el producto.

              `"break_down"`: Cobra y desgloza el IEPS al mismo nivel que el resto de los impuestos en el producto.

              `"unit"`: Aplica el IEPS antes del precio unitario, y usa el precio unitario original como base para el resto de impuestos.

              Consulta con tu contador qué caso aplica para tu giro de empresa y producto.
            enum:
            - sum_before_taxes
            - break_down
            - unit
            type: string
    Stamp:
      description: Información sobre el timbre fiscal digital agregado por el PAC.
      properties:
        signature:
          description: Sello digital del comprobante fiscal.
          type: string
        date:
          description: Fecha de timbrado en formato ISO8601 (UTC String).
          format: date-time
          type: string
        sat_cert_number:
          description: Número de serie del certificado del SAT usado para timbrar.
          type: string
        sat_signature:
          description: Sello digital del timbre fiscal digital.
          type: string
    LineItem:
      properties:
        quantity:
          description: Cantidad de unidades incluídas del mismo concepto.
          example: 1
          type: number
        discount:
          description: Monto total de descuento aplicado a este concepto.
          example: 0
          type: number
        product:
          $ref: '#/components/schemas/LineItemProduct'
        parts:
          $ref: '#/components/schemas/Parts'
    ThirdParty:
      description: |
        Objeto con información del contribuyente tercero, a cuenta del que se realiza la operación.

        Corresponde al campo "ACuentaTerceros" en el CFDI.
      properties:
        legal_name:
          description: Nombre o razón social del tercero.
          example: The Michael Scott Paper Company
          type: string
        tax_id:
          description: RFC del tercero.
          example: MIC920101HN7
          type: string
        tax_system:
          description: Régimen fiscal del tercero.
          example: "601"
          maxLength: 3
          minLength: 3
          type: string
        zip:
          description: Código postal del tercero.
          example: "01234"
          type: string
    LineItemInput:
      description: Conceptos incluidos en el documento
      properties:
        quantity:
          default: 1
          description: Cantidad de unidades incluídas del mismo concepto.
          example: 1
          type: number
        discount:
          default: 0
          description: Monto total de descuento aplicado a este concepto.
          example: 0
          type: number
        product:
          $ref: '#/components/schemas/LineItemInput_product'
        parts:
          items:
            $ref: '#/components/schemas/PartInput'
          type: array
        customs_keys:
          items:
            type: string
          type: array
        complement:
          description: Código XML de tu complemento.
          format: xml
          type: string
        third_party:
          $ref: '#/components/schemas/LineItemInput_third_party'
        property_tax_account:
          description: Número de cuenta para el impuesto predial.
          example: "0102030405"
          type: string
      required:
      - product
      title: LineItem
    LineItemEgresoInput:
      description: Conceptos incluidos en el documento
      properties:
        quantity:
          default: 1
          description: Cantidad de unidades incluídas del mismo concepto.
          example: 1
          type: number
        discount:
          default: 0
          description: Monto total de descuento aplicado a este concepto.
          example: 0
          type: number
        product:
          $ref: '#/components/schemas/LineItemEgresoInput_product'
        parts:
          items:
            $ref: '#/components/schemas/PartInput'
          type: array
        customs_keys:
          items:
            type: string
          type: array
        complement:
          description: Código XML de tu complemento.
          format: xml
          type: string
        third_party:
          $ref: '#/components/schemas/LineItemInput_third_party'
      required:
      - product
      title: LineItem
    LineItemTrasladoInput:
      description: Conceptos incluidos en el documento
      properties:
        quantity:
          default: 1
          description: Cantidad de unidades incluídas del mismo concepto.
          example: 1
          type: number
        product:
          $ref: '#/components/schemas/LineItemTrasladoInput_product'
        customs_keys:
          items:
            type: string
          type: array
        complement:
          description: Código XML de tu complemento.
          format: xml
          type: string
        parts:
          items:
            $ref: '#/components/schemas/PartInput'
          type: array
        third_party:
          $ref: '#/components/schemas/LineItemTrasladoInput_third_party'
      required:
      - product
      title: LineItem
    CustomComplementData:
      description: Código XML de tu complemento tal cual como quieres que se inserte
        en el XML. Debe contener sólamente un nodo XML raíz.
      format: xml
      title: string
      type: string
    CustomComplementProperties:
      properties:
        type:
          description: Tipo de complemento.
          enum:
          - custom
          type: string
        data:
          description: Código XML de tu complemento tal cual como quieres que se inserte
            en el XML. Debe contener sólamente un nodo XML raíz.
          format: xml
          title: string
          type: string
      title: CustomComplement
    CustomComplementInput:
      allOf:
      - required:
        - data
        - type
        type: object
      - $ref: '#/components/schemas/CustomComplementProperties'
      title: CustomComplement
    NominaComplementDataInput:
      allOf:
      - required:
        - fecha_final_pago
        - fecha_inicial_pago
        - num_dias_pagados
        - percepciones
        - receptor
        type: object
      - $ref: '#/components/schemas/NominaComplementDataDirectProperties'
      - $ref: '#/components/schemas/NominaComplementDataNestedInput'
      description: Objeto con la información del complemento de nómina.
      title: NominaComplementData
    NominaComplementDataProperties:
      allOf:
      - $ref: '#/components/schemas/NominaComplementDataDirectProperties'
      - $ref: '#/components/schemas/NominaComplementDataNestedProperties'
      description: Complemento de Nómina.
    NominaComplementDataDirectProperties:
      properties:
        tipo_nomina:
          default: O
          description: |
            Tipo de nómina.
            - `“O”` (Ordinaria): Cuando corresponde a un pago que se realiza de manera habitual, como sueldos.
            - `“E”` (Extraordinaria): Para pagos fuera de lo habitual, como liquidaciones, aguinaldos o bonos.
          enum:
          - O
          - E
          type: string
        fecha_pago:
          default: now
          description: Fecha de pago de la nómina al trabajador.
          format: date
          type: string
        fecha_inicial_pago:
          description: Fecha inicial del periodo de pago.
          format: date
          type: string
        fecha_final_pago:
          description: Fecha final del periodo de pago.
          format: date
          type: string
        num_dias_pagados:
          description: Número de días pagados. Puede ser entero o fracción.
          minimum: 0
          type: number
    NominaComplementDataNestedInput:
      properties:
        emisor:
          $ref: '#/components/schemas/NominaEmisorProperties'
        receptor:
          $ref: '#/components/schemas/NominaReceptorInput'
        percepciones:
          $ref: '#/components/schemas/NominaPercepcionesInput'
        deducciones:
          items:
            $ref: '#/components/schemas/NominaDeduccionInput'
          type: array
        otros_pagos:
          items:
            $ref: '#/components/schemas/OtroPago'
          type: array
        incapacidades:
          items:
            $ref: '#/components/schemas/NominaIncapacidadInput'
          type: array
    NominaComplementDataNestedProperties:
      properties:
        emisor:
          $ref: '#/components/schemas/NominaEmisorProperties'
        receptor:
          $ref: '#/components/schemas/NominaReceptorProperties'
        percepciones:
          $ref: '#/components/schemas/NominaPercepcionesProperties'
        deducciones:
          items:
            $ref: '#/components/schemas/NominaDeduccionProperties'
          type: array
        otros_pagos:
          items:
            $ref: '#/components/schemas/NominaComplementDataNestedProperties_otros_pagos_inner'
          type: array
        incapacidades:
          items:
            $ref: '#/components/schemas/NominaIncapacidadProperties'
          type: array
    NominaIncapacidadInput:
      allOf:
      - required:
        - dias_incapacidad
        - tipo_incapacidad
        type: object
      - $ref: '#/components/schemas/NominaIncapacidadProperties'
      title: Incapacidad
    NominaIncapacidadProperties:
      properties:
        dias_incapacidad:
          description: Número de días enteros que el trabajador se incapacitó en el
            periodo.
          type: integer
        tipo_incapacidad:
          description: "Clave del catálogo [Tipo de Incapacidad](#tipo-de-incapacidad)."
          type: string
        importe_monetario:
          description: Monto del importe monetario de la incapacidad.
          type: number
    NominaOtroPagoInput:
      allOf:
      - required:
        - clave
        - importe
        - tipo_otro_pago
        type: object
      - $ref: '#/components/schemas/NominaOtroPagoDirectProperties'
      - properties:
          compensacion_saldos_a_favor:
            $ref: '#/components/schemas/NominaCompensacionInput'
      title: OtroPago
    NominaOtroPagoDirectProperties:
      properties:
        tipo_otro_pago:
          description: "Clave del catálogo [Tipo de Otro Pago](#tipo-de-otro-pago)."
          type: string
        clave:
          description: Clave de otro pago de nómina propia de la contabilidad de cada
            patrón.
          maxLength: 15
          minLength: 3
          type: string
        concepto:
          description: Descripción alternativa correspondiente a la clave utilizada.
          type: string
        importe:
          description: Importe por concepto de otro pago.
          type: number
        subsidio_causado:
          description: |
            Subsudio causado conforme a la tabla del subsidio para el empleo
            publicada en el Anexo 8 de la Resolución Miscelánea Fiscal vigente.

            Este valor será insertado dentro del nodo `SubsidioAlEmpleo`, y es
            requerido cuando el valor de `tipo_otro_pago` es `"002"`.
          type: number
    NominaCompensacionInput:
      allOf:
      - required:
        - ano
        - remanente_sal_fav
        - saldo_a_favor
        type: object
      - $ref: '#/components/schemas/NominaCompensacionProperties'
    NominaCompensacionProperties:
      description: Objeto con información referente a la compensación de saldos a
        favor de un trabajador.
      properties:
        saldo_a_favor:
          description: Monto por saldo a favor determinado por el patrón al trabajador
            en periodos o ejercicios anteriores.
          type: number
        ano:
          description: Año en que se determinó el saldo a favor del trabajador.
          type: integer
        remanente_sal_fav:
          description: Remanente del saldo a favor del trabajador.
          type: number
    NominaDeduccionInput:
      allOf:
      - required:
        - clave
        - importe
        - tipo_deduccion
        type: object
      - $ref: '#/components/schemas/NominaDeduccionProperties'
      title: Deduccion
    NominaDeduccionProperties:
      properties:
        tipo_deduccion:
          description: "Clave del catálogo [Tipo de deducción](#tipo-de-deducción)."
          type: string
        concepto:
          description: "Concepto de la deducción. Si no se envía, se utilizará la\
            \ descripción del catálogo del tipo de deducción."
          type: string
        clave:
          description: Clave de control interno que asigna el patrón a cada deducción
            (descuento) de nómina propia de su contabilidad.
          maxLength: 15
          minLength: 3
          type: string
        importe:
          description: Importe del concepto de deducción.
          type: number
    NominaPercepcionesInput:
      description: Objeto para indicar las percepciones aplicables.
      properties:
        percepcion:
          items:
            $ref: '#/components/schemas/NominaPercepcionInput'
          type: array
        jubilacion_pension_retiro:
          $ref: '#/components/schemas/NominaJubilacionInput'
        separacion_indemnizacion:
          $ref: '#/components/schemas/NominaSeparacionInput'
      required:
      - percepcion
      title: Percepciones
    NominaPercepcionesProperties:
      description: Objeto para indicar las percepciones aplicables.
      properties:
        percepcion:
          items:
            $ref: '#/components/schemas/NominaPercepcionProperties'
          type: array
        jubilacion_pension_retiro:
          $ref: '#/components/schemas/NominaJubilacionProperties'
        separacion_indemnizacion:
          $ref: '#/components/schemas/NominaSeparacionProperties'
      title: Percepciones
    NominaSeparacionInput:
      allOf:
      - required:
        - ingreso_acumulable
        - ingreso_no_acumulable
        - num_anos_servicio
        - total_pagado
        - ultimo_sueldo_mens_ord
        type: object
      - $ref: '#/components/schemas/NominaSeparacionProperties'
      title: Separacion
    NominaSeparacionProperties:
      description: Objeto con información detallada de pagos por separación (despido)
        o indemnización.
      properties:
        total_pagado:
          description: Monto total pagado por concepto de separación o indemnización.
          type: number
        num_anos_servicio:
          description: "Años de servicio que laboró el trabajador, redondeado al entero\
            \ inmediato superior."
          type: integer
        ultimo_sueldo_mens_ord:
          description: Último sueldo mensual ordinario percibido por el trabajador.
          type: number
        ingreso_acumulable:
          description: Monto por ingresos acumulables.
          type: number
        ingreso_no_acumulable:
          description: Monto por ingresos no acumulables.
          type: number
      title: Jubilacion
    NominaJubilacionInput:
      allOf:
      - required:
        - ingreso_acumulable
        - ingreso_no_acumulable
        type: object
      - $ref: '#/components/schemas/NominaJubilacionProperties'
      title: Jubilacion
    NominaJubilacionProperties:
      description: "Objeto con información detallada de pagos por jubilación, pensiones\
        \ o haberes de retiro."
      properties:
        total_una_exhibicion:
          description: Monto total del pago entregado en una sola exhibición.
          type: number
        total_parcialidad:
          description: Monto total del pago entregado en parcialidades.
          type: number
        monto_diario:
          description: Monto diario percibido por el trabajador cuando el pago se
            realiza en parcialidades.
          type: number
        ingreso_acumulable:
          description: Ingresos acumulables percibidos por el trabajador.
          type: number
        ingreso_no_acumulable:
          description: Ingresos no acumulables percibidos por el trabajador.
          type: number
    NominaPercepcionProperties:
      allOf:
      - $ref: '#/components/schemas/NominaPercepcionDirectProperties'
      - $ref: '#/components/schemas/NominaPercepcionNestedProperties'
      title: Percepcion
    NominaPercepcionInput:
      allOf:
      - required:
        - clave
        - importe_exento
        - importe_gravado
        - tipo_percepcion
        type: object
      - $ref: '#/components/schemas/NominaPercepcionDirectProperties'
      - $ref: '#/components/schemas/NominaPercepcionNestedInput'
      title: Percepcion
    NominaPercepcionDirectProperties:
      properties:
        tipo_percepcion:
          description: "Clave del catálogo [Tipo de percepción](#tipo-de-percepcion)."
          type: string
        concepto:
          description: "Concepto de la percepción. Si no se envía, se utilizará la\
            \ descripción del catálogo del tipo de percepción."
          type: string
        clave:
          description: Clave de control interno que asigna el patrón a cada percepción
            de nómina propia de su contabilidad.
          maxLength: 15
          minLength: 3
          type: string
        importe_gravado:
          description: Importe gravado por el concepto indicado en el tipo de percepción.
          type: number
        importe_exento:
          description: Importe exento por el concepto indicado en el tipo de percepción.
          type: number
    NominaPercepcionNestedInput:
      properties:
        acciones_o_titulos:
          $ref: '#/components/schemas/NominaAccionesInput'
        horas_extra:
          items:
            $ref: '#/components/schemas/NominaHorasExtraInput'
          type: array
    NominaPercepcionNestedProperties:
      properties:
        acciones_o_titulos:
          $ref: '#/components/schemas/NominaAccionesProperties'
        horas_extra:
          items:
            $ref: '#/components/schemas/NominaHorasExtraProperties'
          type: array
    NominaHorasExtraInput:
      allOf:
      - required:
        - dias
        - horas_extra
        - importe_pagado
        - tipo_horas
        type: object
      - $ref: '#/components/schemas/NominaHorasExtraProperties'
      title: HorasExtra
    NominaHorasExtraProperties:
      properties:
        dias:
          description: Número de días en que el trabajador laboró horas extra adicionales
            a su jornada normal de trabajo.
          type: integer
        tipo_horas:
          description: "Clave del catálogo [Tipo de Horas](#tipo-de-Horas)."
          type: string
        horas_extra:
          description: Número de horas extra trabajadas en el periodo.
          type: integer
        importe_pagado:
          description: Importe pagado por las horas extra.
          type: number
      title: HorasExtra
    NominaAccionesInput:
      allOf:
      - required:
        - precio_al_otorgarse
        - valor_mercado
        type: object
      - $ref: '#/components/schemas/NominaAccionesProperties'
      title: Accion
    NominaAccionesProperties:
      description: Objeto para expresar ingresos por acciones o títulos valor que
        representan bienes. Es requerido cuando existan ingresos por sueldos derivados
        de adquisición de acciones o títulos.
      properties:
        valor_mercado:
          description: Valor de mercado de las Acciones o Títulos valor al ejercer
            la opción.
          type: number
        precio_al_otorgarse:
          description: Precio establecido al otorgarse la opción de ingresos en acciones
            o títulos valor.
          type: number
      title: Accion
    NominaReceptorProperties:
      allOf:
      - $ref: '#/components/schemas/NominaReceptorDirectProperties'
      - $ref: '#/components/schemas/NominaReceptorNestedProperties'
      description: Información del trabajador.
      title: Receptor
    NominaReceptorInput:
      allOf:
      - required:
        - clave_ent_fed
        - curp
        - num_empleado
        - periodicidad_pago
        - tipo_contrato
        - tipo_regimen
        type: object
      - $ref: '#/components/schemas/NominaReceptorDirectProperties'
      - $ref: '#/components/schemas/NominaReceptorNestedInput'
      description: Información del trabajador.
      title: Receptor
    NominaReceptorDirectProperties:
      properties:
        curp:
          description: CURP del trabajador.
          type: string
        num_seguridad_social:
          description: Número de seguridad social.
          type: string
        fecha_inicio_rel_laboral:
          description: Fecha de inicio de la relación laboral entre el empleador y
            el empleado.
          format: date
          type: string
        antiguedad:
          $ref: '#/components/schemas/NominaReceptorDirectProperties_antiguedad'
        tipo_contrato:
          description: "Clave del catálogo del SAT [Tipo de Contrato](#tipo-de-contrato)."
          type: string
        sindicalizado:
          default: false
          description: Indica si el trabajador está asociado a un sindicato.
          type: boolean
        tipo_jornada:
          description: "Clave del catálogo del SAT [Tipo de Jornada](#tipo-de-jornada)."
          type: string
        tipo_regimen:
          description: "Clave del catálogo del SAT [Tipo de Régimen](#tipo-de-régimen)."
          type: string
        num_empleado:
          description: "Número interno de empleado, asignado por el empleador."
          maxLength: 15
          minLength: 1
          type: string
        departamento:
          description: Nombre del departamento o área a la que pertenece el trabajador.
          type: string
        puesto:
          description: Nombre del puesto asignado al empleado o el nombre de la actividad
            que realiza.
          type: string
        riesgo_puesto:
          description: "Clave del catálogo del SAT [Riesgo del Puesto](#riesgo-del-puesto)."
          type: string
        periodicidad_pago:
          description: "Clave del catálogo del SAT [Periodicidad de Pago](#periodicidad-del-pago)."
          type: string
        banco:
          description: "Clave del banco de acuerdo al catálogo del SAT “Bancos” que\
            \ puedes consultar utilizando nuestra [herramienta de búsqueda](https://dashboard.facturapi.io/catalogs/bank)."
          type: string
        cuenta_bancaria:
          description: |
            Número de cuenta bancaria (11 caracteres) o número de teléfono celular (10 caracteres) o número de tarjeta (15 ó 16 caracteres) o la CLABE (18 caracteres) o número de monedero electrónico donde se realiza el depósito de nómina.
          type: string
        salario_base_cot_apor:
          description: "Importe de la retribución en efectivo por cuota diaria, gratificaciones,\
            \ percepciones, alimentación, habitación, primas, comisiones, prestaciones\
            \ en especie, etc."
          type: number
        salario_diario_integrado:
          description: "Salario que se integra con los pagos hechos en efectivo por\
            \ cuota diaria, gratificaciones, percepciones, habitación, primas, comisiones,\
            \ prestaciones en especie y cualquier otra cantidad o prestación que se\
            \ entregue al trabajador por su trabajo."
          type: number
        clave_ent_fed:
          description: "Clave de la entidad federativa en donde el trabajador prestó\
            \ sus servicios al empleador, que puedes consultar utilizando nuestra\
            \ [herramienta de búsqueda](https://dashboard.facturapi.io/catalogs/state)."
          type: string
    NominaReceptorNestedProperties:
      properties:
        sub_contratacion:
          items:
            $ref: '#/components/schemas/NominaSubContratacionProperties'
          type: array
    NominaReceptorNestedInput:
      properties:
        sub_contratacion:
          items:
            $ref: '#/components/schemas/NominaReceptorNestedInput_sub_contratacion_inner'
          type: array
    NominaSubContratacionRequiredProperties:
      required:
      - porcentaje_tiempo
      - rfc_labora
      type: object
    NominaSubContratacionProperties:
      properties:
        rfc_labora:
          description: "RFC de la persona o empresa que subcontrata, es decir, de\
            \ la persona o empresa en donde el trabajador prestó directamente sus\
            \ servicios."
          type: string
        porcentaje_tiempo:
          description: Porcentaje de tiempo en que el trabajador prestó sus servicios
            a la persona o empresa que lo subcontrató.
          maximum: 100.0
          minimum: 0.001
          type: number
    NominaEmisorProperties:
      description: "Información del emisor, en caso de ser requerida."
      properties:
        curp:
          description: Requerido cuando el empleador es persona física. CURP del empleador.
          maxLength: 18
          minLength: 18
          type: string
        registro_patronal:
          description: Clave de registro patronal asignada por la institución de seguridad
            social al patrón.
          type: string
        rfc_patron_origen:
          description: RFC de la persona que fungió como patrón. Se usa cuando el
            pago se realiza a través de un tercero.
          maxLength: 13
          minLength: 12
          type: string
        entidad_sncf:
          $ref: '#/components/schemas/NominaEmisorProperties_entidad_sncf'
      title: Emisor
    PagoOrCustomComplementProperties:
      discriminator:
        mapping:
          pago: '#/components/schemas/PagoComplementProperties'
          custom: '#/components/schemas/CustomComplementProperties'
        propertyName: type
      properties:
        type:
          description: Tipo de complemento.
          enum:
          - pago
          - custom
          type: string
      title: Complement
    PagoOrCustomComplementInput:
      discriminator:
        mapping:
          pago: '#/components/schemas/PagoComplementInput'
          custom: '#/components/schemas/CustomComplementInput'
        propertyName: type
      properties:
        type:
          description: Tipo de complemento.
          enum:
          - nomina
          - custom
          type: string
      required:
      - type
      title: Complement
    PagoComplementProperties:
      allOf:
      - $ref: '#/components/schemas/NominaOrCustomComplementProperties'
      - properties:
          data:
            $ref: '#/components/schemas/NominaComplementDataProperties'
    PagoComplementInput:
      allOf:
      - $ref: '#/components/schemas/PagoOrCustomComplementInput'
      - properties:
          data:
            $ref: '#/components/schemas/PagoComplementDataInput'
    PagoComplementDataInput:
      items:
        $ref: '#/components/schemas/PaymentInput'
      type: array
    NominaOrCustomComplementProperties:
      discriminator:
        mapping:
          nomina: '#/components/schemas/NominaComplementProperties'
          custom: '#/components/schemas/CustomComplementProperties'
        propertyName: type
      properties:
        type:
          description: Tipo de complemento.
          enum:
          - nomina
          - custom
          type: string
      title: Complement
    NominaOrCustomComplementInput:
      discriminator:
        mapping:
          nomina: '#/components/schemas/NominaComplementInput'
          custom: '#/components/schemas/CustomComplementInput'
        propertyName: type
      properties:
        type:
          description: Tipo de complemento.
          enum:
          - nomina
          - custom
          type: string
      required:
      - type
      title: Complement
    NominaComplementProperties:
      allOf:
      - $ref: '#/components/schemas/NominaOrCustomComplementProperties'
      - properties:
          data:
            $ref: '#/components/schemas/NominaComplementDataProperties'
    NominaComplementInput:
      allOf:
      - $ref: '#/components/schemas/NominaOrCustomComplementInput'
      - properties:
          data:
            $ref: '#/components/schemas/NominaComplementDataInput'
    NamespaceRequiredProperties:
      required:
      - prefix
      - schema_location
      - uri
      type: object
    NamespaceProperties:
      properties:
        prefix:
          description: Prefijo o nombre del namespace.
          example: iedu
          type: string
        uri:
          description: Dirección URL asociada al namespace.
          example: http://www.sat.gob.mx/iedu
          format: url
          type: string
        schema_location:
          description: Dirección URL del esquema de validación XSD.
          example: http://www.sat.gob.mx/sitio_interet/cfd/iedu/iedu.xsd
          format: url
          type: string
      title: Namespace
    CommonAddressProperties:
      properties:
        street:
          description: Nombre de la calle
          example: Blvd. Atardecer
          type: string
        exterior:
          description: Número exterior.
          example: 142
          type: string
        interior:
          description: Número interior.
          example: 4
          type: string
        neighborhood:
          description: Colonia
          example: Centro
          type: string
        city:
          description: Ciudad
          example: Huatabampo
          type: string
        municipality:
          description: Municipio o delegación
          example: Huatabampo
          type: string
        zip:
          description: Código postal
          example: 86500
          type: string
    Customer:
      allOf:
      - $ref: '#/components/schemas/ResourceAutoGeneratedProps'
      - $ref: '#/components/schemas/CustomerProperties'
      title: Objeto Customer
    CustomerSearchResult:
      allOf:
      - $ref: '#/components/schemas/SearchResult'
      - properties:
          data:
            items:
              $ref: '#/components/schemas/Customer'
            type: array
    CustomerProperties:
      allOf:
      - $ref: '#/components/schemas/CustomerCommonProperties'
      - properties:
          address:
            $ref: '#/components/schemas/CustomerProperties_allOf_address'
    CustomerCommonProperties:
      properties:
        legal_name:
          description: |
            Nombre Fiscal o Razón Social del cliente. *sin* el régimen societario (ej.: S.A. de C.V.).
          example: Dunder Mifflin
          type: string
        tax_id:
          description: "En clientes de México contiene el RFC del cliente. Para extranjeros\
            \ es opcional y representa el número de registro de identificacón tributaria,\
            \ es decir, el equivalente al RFC en el país del cliente."
          example: ABC101010111
          type: string
        tax_system:
          description: Requerido para clientes nacionales. Clave del régimen fiscal
            del cliente.
          example: "601"
          maxLength: 3
          minLength: 3
          type: string
        email:
          description: Dirección de correo electrónico al cual enviar las facturas
            generadas.
          example: email@example.com
          format: email
          type: string
        phone:
          description: Teléfono del cliente.
          example: 6474010101
          type: string
    CustomerCreateInput:
      allOf:
      - $ref: '#/components/schemas/CustomerCommonProperties'
      - properties:
          address:
            $ref: '#/components/schemas/CustomerProperties_allOf_address'
        required:
        - address
      title: Customer
    LineItemProductInput:
      allOf:
      - $ref: '#/components/schemas/ProductRequiredProperties'
      - $ref: '#/components/schemas/ProductProperties'
      title: Product
    LineItemProductEgresoInput:
      allOf:
      - $ref: '#/components/schemas/ProductEgresoRequiredProperties'
      - $ref: '#/components/schemas/ProductEgresoProperties'
      title: Product
    LineItemTrasladoProductInput:
      properties:
        description:
          description: Descripción del bien o servicio como aparecerá en la factura.
          example: Ukelele
          type: string
        product_key:
          description: "Clave de producto/servicio, del catálogo del SAT. Nosotros\
            \ te proporcionamos una manera más conveniente de encontrarlo utilizando\
            \ nuestra [herramienta de búsqueda de claves](https://dashboard.facturapi.io/tools/keys)."
          example: 60131324
          type: string
        unit_key:
          default: H87
          description: |
            Clave de unidad de medida, del catálogo del SAT. El valor por default `"H87"` (elemento) es la clave para representar una pieza o unidad de venta (lápiz, cuaderno, televisión, etc).
            Si la unidad de tu producto es kilogramos, litros, horas u otra unidad, te proporcionamos una manera conveniente de encontrar la clave utilizando nuestra [herramienta de búsqueda de claves](https://dashboard.facturapi.io/tools/keys).
          type: string
        unit_name:
          default: Elemento
          description: Palabra que representa la unidad de medida de tu producto.
            Debe estar relacionada con la clave de unidad `unit_key`.
          type: string
        sku:
          description: Identificador de uso interno designado por la empresa. Puede
            tener cualquier valor.
          type: string
      required:
      - description
      title: Product
    LineItemProduct:
      allOf:
      - properties:
          id:
            description: ID del producto base. Sólo presente si se utilizó como base
              un objeto `Product` guardado previamente.
            example: 58e93bd8e86eb318b0197454
            type: string
            nullable: true
      - $ref: '#/components/schemas/ProductProperties'
    Parts:
      properties:
        description:
          description: Descripción del producto o servicio.
          type: string
        product_key:
          description: "Clave de producto/servicio, del catálogo del SAT. Nosotros\
            \ te proporcionamos una manera más conveniente de encontrarlo utilizando\
            \ nuestra herramienta de búsqueda de claves."
          type: string
        quantity:
          description: Cantidad
          example: 1
          type: number
        sku:
          description: Identificador de uso interno designado por la empresa. Puede
            tener cualquier valor.
          type: string
        unit_price:
          description: Precio unitario
          type: number
        unit_name:
          description: Nombre de la unidad de medida que expresa la cantidad.
          type: string
        customs_keys:
          items:
            type: string
          type: array
    PartInput:
      allOf:
      - required:
        - description
        - product_key
        type: object
      - $ref: '#/components/schemas/Parts'
    Product:
      allOf:
      - $ref: '#/components/schemas/ResourceAutoGeneratedProps'
      - $ref: '#/components/schemas/ProductProperties'
      title: Objeto Product
    ProductSearchResult:
      allOf:
      - $ref: '#/components/schemas/SearchResult'
      - properties:
          data:
            items:
              $ref: '#/components/schemas/Product'
            type: array
    ProductRequiredProperties:
      required:
      - description
      - price
      - product_key
      type: object
    ProductEgresoRequiredProperties:
      required:
      - description
      - price
      type: object
    ProductProperties:
      properties:
        description:
          description: Descripción del bien o servicio como aparecerá en la factura.
          example: Ukelele
          type: string
        product_key:
          description: "Clave de producto/servicio, del catálogo del SAT. Nosotros\
            \ te proporcionamos una manera más conveniente de encontrarlo utilizando\
            \ nuestra [herramienta de búsqueda de claves](https://dashboard.facturapi.io/tools/keys)."
          example: 60131324
          type: string
        price:
          description: "Precio por unidad del bien o servicio. Este valor representará\
            \ el precio con IVA incluído o sin él, dependiendo del valor de `tax_included`."
          example: 345.6
          type: number
        tax_included:
          default: true
          description: |
            - `true`: Indica que todos los impuestos aplicables están incluídos en el precio (atributo price) y se desglosarán automáticamente al emitir la factura.
            - `false`: Indica que el atributo price no incluye impuestos, por lo que aquellos impuestos a aplicar se sumarán en el precio final.
          type: boolean
        taxability:
          default: |
            '01' si el array `taxes` está vacío; '02' si el array `taxes` tiene por lo menos un elemento.
          description: |
            Código que representa si el bien o servicio es objeto de impuesto o no. Este atributo corresponde al campo "ObjetoImp" en el CFDI.

            - `01`: No objeto de impuesto.
            - `02`: Sí objeto de impuesto.
            - `03`: Sí objeto de impuesto, pero no obligado a desglose.
            - `04`: Sí objeto de impuesto, y no causa impuesto.
          enum:
          - "01"
          - "02"
          - "03"
          - "04"
          type: string
        taxes:
          items:
            $ref: '#/components/schemas/BaseTax'
          type: array
        local_taxes:
          items:
            $ref: '#/components/schemas/LocalTax'
          type: array
        unit_key:
          default: H87
          description: |
            Clave de unidad de medida, del catálogo del SAT. El valor por default `"H87"` (elemento) es la clave para representar una pieza o unidad de venta (lápiz, cuaderno, televisión, etc).
            Si la unidad de tu producto es kilogramos, litros, horas u otra unidad, puedes encontrar la clave utilizando nuestra [herramienta de búsqueda de claves](https://dashboard.facturapi.io/tools/keys).
          type: string
        unit_name:
          default: Elemento
          description: Palabra que representa la unidad de medida de tu producto.
            Debe estar relacionada con la clave de unidad `unit_key`.
          type: string
        sku:
          description: Identificador de uso interno designado por la empresa. Puede
            tener cualquier valor.
          type: string
    ProductEgresoProperties:
      properties:
        description:
          description: "Resumen de la operación en una sola descripción. Deben mencionarse\
            \ cada uno de los productos que contempla el descuento, devolución o bonificació\
            n aplicada y que contienen las facturas relacionadas. Si el egreso está\
            \ basado en un pocentaje (como al aplicar un 30% de descuento), dicho\
            \ porcentaje debe incluirse en la descripción junto al nombre del producto\
            \ que corresponda."
          example: Ukelele
          type: string
        product_key:
          default: 84111506
          description: "Clave de producto/servicio, del catálogo del SAT. Nosotros\
            \ te proporcionamos una manera más conveniente de encontrarlo utilizando\
            \ nuestra [herramienta de búsqueda de claves](https://dashboard.facturapi.io/tools/keys)."
          example: 84111506
          type: string
        price:
          description: "Suma total de la cantidad devuelta, descontada o bonificada."
          example: 345.6
          type: number
        tax_included:
          default: true
          description: |
            - `true`: Indica que todos los impuestos aplicables están incluídos en el precio (atributo price) y se desglosarán automáticamente al emitir la factura.
            - `false`: Indica que el atributo price no incluye impuestos, por lo que aquellos impuestos a aplicar se sumarán en el precio final.
          type: boolean
        taxability:
          default: "02"
          description: |
            Código que representa si el bien o servicio es objeto de impuesto o no. Este atributo corresponde al campo "ObjetoImp" en el CFDI.

            - `01`: No objeto de impuesto.
            - `02`: Sí objeto de impuesto.
            - `03`: Sí objeto de impuesto, pero no obligado a desglose.
            - `04`: Sí objeto de impuesto, y no causa impuesto.
          enum:
          - "01"
          - "02"
          - "03"
          - "04"
          type: string
        taxes:
          items:
            $ref: '#/components/schemas/BaseTax'
          type: array
        local_taxes:
          items:
            $ref: '#/components/schemas/LocalTax'
          type: array
        unit_key:
          default: ACT
          description: |
            Clave de unidad de medida, del catálogo del SAT.
            Puedes encontrar la clave utilizando nuestra [herramienta de búsqueda de claves](https://dashboard.facturapi.io/tools/keys).
          type: string
        unit_name:
          default: Actividad
          description: Palabra que representa la unidad de medida de tu producto.
            Debe estar relacionada con la clave de unidad `unit_key`.
          type: string
    PaymentInput:
      properties:
        payment_form:
          description: "Código de la forma de pago según el [catálogo del SAT](#forma-de-pago).\
            \ También puedes utilizar la constante `PaymentForm` incluída en nuestras\
            \ librerías."
          example: "03"
          type: string
        related_documents:
          items:
            $ref: '#/components/schemas/PaymentInput_related_documents_inner'
          type: array
        currency:
          default: MXN
          description: "Código de la moneda, acorde al estándar [ISO 4217](https://es.wikipedia.org/wiki/ISO_4217)."
          maxLength: 3
          minLength: 3
          type: string
        exchange:
          default: 1
          description: Tipo de cambio conforme a la moneda usada. Representa el número
            de pesos mexicanos que equivalen a una unidad de la divisa señalada en
            el atributo `currency`.
          type: number
        date:
          default: now
          description: Fecha en que se recibió el pago. Sólo es necesario incluirla
            si el pago se efectuó en una fecha anterior a la emisión de este comprobante.
            No se permiten fechas futuras.
          format: date-time
          type: string
        numOperacion:
          description: "Número de cheque, de autorización, de referencia, clave de\
            \ rastreo SPEI, línea de captura o algún número de referencia que permita\
            \ identificar la operación correspondiente al pago efectuado."
          type: string
        rfcEmisorCtaOrd:
          description: "RFC de la entidad emisora de la cuenta de origen, es decir,\
            \ la operadora, banco, institución financiera, emisor de monedero electró\
            nico, etc."
          type: string
        nomBancoOrdExt:
          description: Nombre del banco ordenante.
          type: string
        ctaOrdenante:
          description: Número de cuenta con la que se realizó el pago.
          type: string
        rfcEmisorCtaBen:
          description: "RFC de la entidad de la cuenta operadora destino, es decir,\
            \ la operadora, banco, institución financiera, emisor de monedero electró\
            nico, etc."
          type: string
        ctaBeneficiario:
          description: Número de cuenta donde se recibió el pago.
          type: string
        tipoCadPago:
          description: |
            Clave del tipo de cadena de pago que genera la entidad receptora del pago.
            Si existe este campo, es obligatorio registrar los campos `certPago`, `cadPago` y `selloPago`.
          enum:
          - 1
          type: string
        certPago:
          description: "Certificado que corresponde al pago, como una cadena de texto\
            \ en formato base 64."
          format: base64
          type: string
        cadPago:
          description: Cadena original del comprobante de pago generado por la entidad
            emisora de la cuenta beneficiaria.
          type: string
        selloPago:
          description: Sello digital que se asocie al pago expresado como una cadena
            de texto en formato base 64.
          format: base64
          type: string
      required:
      - payment_form
      - related_documents
      title: Payment
    CuustomerInfo:
      description: "Objeto con información parcial del cliente receptor del comprobante.\
        \ Para obtener el objeto `Customer` completo, deberás consultarlo con el mé\
        todo de [Obtener Cliente]('#/operation/getCustomer')."
      properties:
        id:
          description: "ID del objeto `customer` relacionado a la factura, en caso\
            \ de no haber sido eliminado"
          example: 58e93bd8e86eb318b0197456
          type: string
        legal_name:
          description: |
            Nombre Fiscal o Razón Social del cliente, *sin* incluir el régimen societario (ej.: S.A. de C.V.).
          example: Dunder Mifflin
          type: string
        tax_id:
          description: RFC del cliente.
          example: ABC101010111
          type: string
        address:
          $ref: '#/components/schemas/CuustomerInfo_address'
    RelatedDocumentInput:
      allOf:
      - required:
        - related
        - relationship
        type: object
      - $ref: '#/components/schemas/RelatedDocument'
    RelatedDocument:
      properties:
        relationship:
          description: "Clave de relación del catálogo del SAT (que puedes consultar\
            \ en [esta tabla](#relacion-entre-facturas)). Es requerido cuando se enví\
            e el parámetro `related`."
          type: string
        documents:
          items:
            type: string
          type: array
    Invoice:
      allOf:
      - $ref: '#/components/schemas/ResourceAutoGeneratedProps'
      - $ref: '#/components/schemas/InvoiceProperties'
      title: Objeto Invoice
    InvoiceSearchResult:
      allOf:
      - $ref: '#/components/schemas/SearchResult'
      - properties:
          data:
            items:
              $ref: '#/components/schemas/Invoice'
            type: array
    InvoiceRequiredProperties:
      required:
      - description
      - invoice_key
      - price
      type: object
    InvoiceProperties:
      properties:
        status:
          description: |
            Estado actual de la factura.
          enum:
          - valid
          - canceled
          example: valid
          type: string
        cancellation_status:
          description: |
            Estado actual de la solicitud de cancelación, en caso de haberla realizado. Puedes leer más a detalle en la sección de [Cancelar Factura](#operation/deleteInvoice)).
          enum:
          - none
          - pending
          - accepted
          - rejected
          - expired
          example: none
          type: string
        verification_url:
          description: "Dirección URL para verificar el estado del CFDI en el portal\
            \ del SAT. Este link es el mismo que aparece en el código QR, en el PDF\
            \ de la factura."
          example: https://verificacfdi.facturaelectronica.sat.gob.mx/default.aspx?id=45BEC0CA-5F1E-491E-9417-698EA48C382A&re=AAA010101AAA&rr=ABC101010111&tt=345.600000&fe=bWApPw==
          format: uri
          type: string
        date:
          default: now
          description: Fecha de expedición del comprobante en formato ISO8601 (UTC
            String).
          format: date-time
          type: string
        address:
          $ref: '#/components/schemas/InvoiceProperties_address'
        type:
          description: |
            Tipo de comprobante. Puede tener los valores `"I"`: Ingreso, `"P"`: Pago, `"E"`: Egreso, `"N"`: Nómina, `"T"`: Traslado.
          enum:
          - I
          - E
          - P
          - "N"
          - T
          type: string
        customer:
          $ref: '#/components/schemas/CuustomerInfo'
        total:
          description: Monto total facturado.
          example: 10944.82
          type: number
        uuid:
          description: "Folio fiscal de la factura, asignado por el SAT."
          example: 39c85a3f-275b-4341-b259-e8971d9f8a94
          format: uuid
          type: string
        folio_number:
          description: Número de folio autoincremental para control interno y sin
            validez fiscal.
          example: 914
          type: integer
        series:
          description: Serie. Caracteres designados por la empresa para control interno
            y sin validez fiscal. En el PDF se imprime junto al //www.facturapi.io/img/logo.svg
          example: F
          type: string
        external_id:
          description: Identificador que puedes usar para relacionar esta factura
            con tus registros para después buscar por este número.
          type: string
        idempotency_key:
          description: "Identificador único que puedes usar para evitar duplicados\
            \ al reintentar una petición. Puede ser cualquier cadena de texto, mientras\
            \ sea única para cada documento."
          type: string
        payment_form:
          description: "Código que representa la forma de pago, de acuerdo al [catá\
            logo del SAT](#forma-de-pago)."
          example: 6
          type: string
        items:
          items:
            $ref: '#/components/schemas/LineItem'
          type: array
        related_documents:
          items:
            $ref: '#/components/schemas/RelatedDocument'
          type: array
        currency:
          description: "Código de la moneda, acorde al estándar [ISO 4217](https://es.wikipedia.org/wiki/ISO_4217)."
          example: MXN
          type: string
        exchange:
          description: Tipo de cambio conforme a la moneda usada. Representa el número
            de pesos mexicanos que equivalen a una unidad de la divisa señalada en
            el atributo `currency`.
          example: 1
          minimum: 0
          type: number
        complements:
          items:
            $ref: '#/components/schemas/NominaOrCustomComplementProperties'
          type: array
        pdf_custom_section:
          description: "En caso de que necesites incluir más información en el PDF,\
            \ este campo te permite insertar código HTML con tu propio contenido."
          format: html
          type: string
        addenda:
          description: Código XML con la Addenda que se necesite agregar a la factura.
          format: xml
          type: string
        namespaces:
          items:
            $ref: '#/components/schemas/NamespaceProperties'
          type: array
        stamp:
          $ref: '#/components/schemas/Stamp'
    InvoiceableCommonInput:
      properties:
        folio_number:
          default: autoincremental
          description: "Número de folio asignado por la empresa para control interno.\
            \ Si se omite, se asignará el valor autoincremental de la organizació\
            n."
          type: integer
        series:
          description: Serie. Caracteres designados por la empresa para control interno
            y sin validez fiscal.
          maxLength: 25
          type: string
          nullable: true
        pdf_custom_section:
          description: |
            En caso de que necesites incluir más información en el PDF, este campo te permite enviar código HTML con tu propio contenido.

            Por seguridad, el código que puedes enviar está limitado a las siguientes etiquetas: `h1`, `h2`, `h3`, `h4`, `h5`, `h6`, `div`, `p`, `span`, `small`, `br`, `b`, `i`, `ul`, `ol`, `li`, `strong`, `table`, `thead`, `tbody`, `tfoot`, `tr`, `th` y `td`. No se permiten atributos ni estilos.
          format: xml
          type: string
          nullable: true
        addenda:
          description: Código XML con la Addenda que se necesite agregar a la factura.
          format: xml
          type: string
          nullable: true
        namespaces:
          items:
            $ref: '#/components/schemas/InvoiceableCommonInput_namespaces_inner'
          type: array
    InvoiceCommonInputProperties:
      allOf:
      - properties:
          customer:
            $ref: '#/components/schemas/InvoiceCommonInputProperties_allOf_customer'
          date:
            default: now
            description: "Fecha de expedición del comprobante en formato ISO8601 (UTC\
              \ String). No puede ser anterior a 72 horas en el pasado, ni posterior\
              \ al presente."
            format: date-time
            type: string
          address:
            $ref: '#/components/schemas/InvoiceCommonInputProperties_allOf_address'
          external_id:
            description: Identificador opcional que puedes usar para relacionar esta
              factura con tus registros y poder hacer búsquedas usando este identificador.
              Facturapi no valida que este campo sea único.
            type: string
            nullable: true
          idempotency_key:
            description: |
              Identificador único que puedes usar para evitar duplicados al reintentar una petición. Puede ser cualquier cadena de texto, mientras sea única para cada documento.
              Si se deja en blanco, no se tomará en cuenta.
            type: string
            nullable: true
      - $ref: '#/components/schemas/InvoiceableCommonInput'
    InvoiceIngresoInput:
      allOf:
      - properties:
          type:
            default: I
            description: Tipo de comprobante. El valor default es `“I”` (Ingreso).
            enum:
            - I
            - E
            - P
            - "N"
            - T
            type: string
          items:
            items:
              $ref: '#/components/schemas/LineItemInput'
            type: array
          payment_form:
            description: "Código que representa la forma de pago, de acuerdo al [catá\
              logo del SAT](#forma-de-pago)."
            example: "03"
            maxLength: 2
            minLength: 2
            type: string
          payment_method:
            default: PUE
            description: |
              Código del método de pago según el catálogo del SAT.

              - `PUE`: Pago en Una sola Exhibición
              - `PPD`: Pago en Parcialidades o Diferido
            enum:
            - PUE
            - PPD
            type: string
          use:
            default: G01
            description: |
              Código de Uso CFDI según el catálogo del SAT. Puedes ver los códigos
              en [esta tabla](#uso-cfdi), o utilizar las constantes incluídas en
              nuestras librerías.

              Para factura global debe ingresarse la clave `S01``.
            type: string
          currency:
            default: MXN
            description: "Código de la moneda, acorde al estándar [ISO 4217](https://es.wikipedia.org/wiki/ISO_4217)."
            type: string
          exchange:
            default: 1
            description: |
              Tipo de cambio conforme a la moneda usada. Representa el número de pesos
              mexicanos (MXN) que equivalen a una unidad de la divisa señalada en el atributo `currency`.
            type: number
          conditions:
            description: Condiciones de pago
            maxLength: 1000
            minLength: 1
            type: string
            nullable: true
          related_documents:
            items:
              $ref: '#/components/schemas/RelatedDocumentInput'
            type: array
          global:
            $ref: '#/components/schemas/InvoiceIngresoInput_allOf_global'
          export:
            default: "01"
            description: |
              Indica si el comprobante ampara una operación de exportación.

              - `01`: No aplica
              - `02`: Definitiva con clave A1
              - `03`: Temporal
              - `04`: Definitiva con clave distinta a A1 o cuando no existe enajenación en términos del CFF
            enum:
            - "01"
            - "02"
            - "03"
            - "04"
            type: string
          complements:
            items:
              $ref: '#/components/schemas/CustomComplementInput'
            type: array
      - $ref: '#/components/schemas/InvoiceCommonInputProperties'
      required:
      - customer
      - items
      - payment_form
      title: Ingreso
    InvoiceEgresoInput:
      allOf:
      - properties:
          type:
            enum:
            - E
            type: string
          payment_form:
            description: "Código que representa la forma de pago, de acuerdo al [catá\
              logo del SAT](#forma-de-pago)."
            example: "03"
            maxLength: 2
            minLength: 2
            type: string
          related_documents:
            items:
              $ref: '#/components/schemas/RelatedDocumentInput'
            type: array
          items:
            items:
              $ref: '#/components/schemas/LineItemEgresoInput'
            type: array
          use:
            default: G01
            description: "Código de Uso CFDI según el catálogo del SAT. Puedes ver\
              \ los códigos en [esta tabla](#uso-cfdi), o utilizar las constantes\
              \ incluídas en nuestras librerías."
            type: string
          currency:
            default: MXN
            description: "Código de la moneda, acorde al estándar [ISO 4217](https://es.wikipedia.org/wiki/ISO_4217)."
            type: string
          exchange:
            default: 1
            description: Tipo de cambio conforme a la moneda usada. Representa el
              número de pesos mexicanos (MXN) que equivalen a una unidad de la divisa
              señalada en el atributo `currency`.
            type: number
          complements:
            items:
              $ref: '#/components/schemas/CustomComplementInput'
            type: array
        required:
        - items
        - payment_form
        - type
      - $ref: '#/components/schemas/InvoiceCommonInputProperties'
      title: Egreso
    InvoicePagoInput:
      allOf:
      - properties:
          type:
            enum:
            - P
            type: string
          related_documents:
            items:
              $ref: '#/components/schemas/RelatedDocumentInput'
            type: array
          third_party:
            $ref: '#/components/schemas/LineItemInput_third_party'
          complements:
            items:
              $ref: '#/components/schemas/PagoOrCustomComplementInput'
            type: array
        required:
        - complements
        - type
      - $ref: '#/components/schemas/InvoiceCommonInputProperties'
      title: Pago
    InvoiceNominaInput:
      allOf:
      - properties:
          type:
            enum:
            - "N"
            type: string
          complements:
            items:
              $ref: '#/components/schemas/NominaOrCustomComplementInput'
            type: array
          related_documents:
            items:
              $ref: '#/components/schemas/RelatedDocumentInput'
            type: array
        required:
        - complements
        - type
      - $ref: '#/components/schemas/InvoiceCommonInputProperties'
      title: Nómina
    InvoiceTrasladoInput:
      allOf:
      - properties:
          type:
            enum:
            - T
            type: string
          items:
            items:
              $ref: '#/components/schemas/LineItemTrasladoInput'
            type: array
          complements:
            items:
              $ref: '#/components/schemas/CustomComplementInput'
            type: array
          use:
            default: G01
            description: |
              Código de Uso CFDI según el catálogo del SAT. Puedes ver los códigos en
              [esta tabla](#uso-cfdi), o utilizar las constantes incluídas en nuestras librerías.
            type: string
          currency:
            default: MXN
            description: "Código de la moneda, acorde al estándar [ISO 4217](https://es.wikipedia.org/wiki/ISO_4217)."
            type: string
          exchange:
            default: 1
            description: |
              Tipo de cambio conforme a la moneda usada. Representa el número de pesos mexicanos
              (MXN) que equivalen a una unidad de la divisa señalada en el atributo `currency`.
            type: number
          related_documents:
            items:
              $ref: '#/components/schemas/RelatedDocumentInput'
            type: array
        required:
        - items
        - type
      - $ref: '#/components/schemas/InvoiceCommonInputProperties'
      title: Traslado
    Receipt:
      allOf:
      - $ref: '#/components/schemas/ResourceAutoGeneratedProps'
      - $ref: '#/components/schemas/ReceiptProperties'
      title: Objeto Receipt
    ReceiptProperties:
      allOf:
      - properties:
          date:
            description: Fecha de emisión del recibo.
            example: 2021-09-10T15:21:23.456Z
            format: date-time
            type: string
          expires_at:
            description: |
              Fecha de expiración en formato ISO8601 (UTC String).
              Es la fecha límite para que el cliente pueda facturar su recibo en el portal de autofactura.
              Se calcula automáticamente a partir de las configuraciones de recibo de la organización.
            example: 2021-09-17T15:21:23.456Z
            format: date-time
            type: string
          status:
            description: Estado actual del recibo.
            enum:
            - open
            - canceled
            - invoiced_to_customer
            - invoiced_globally
            type: string
          self_invoice_url:
            description: |
              Dirección URL para realizar autofactura. Incluye el `key` del recibo.
              Puedes usarla para generar un botón o un QR de facturación para tus clientes.
            example: https://factura.space/empresa-demo/r9YqYarL
            format: url
            type: string
          total:
            description: Monto total de la operación
            example: 356.78
            type: number
          invoice:
            description: "ID de la factura asociada, en caso de estar facturado."
            example: 614496b471d422de4b6cfcc4
            type: string
          key:
            description: "Autogenerado. Identificador único alfanumérico corto, ú\
              til para acceder a la autofactura desde tu micrositio en factura.space"
            example: r9YqYarL
            type: string
          items:
            items:
              $ref: '#/components/schemas/LineItem'
            type: array
          external_id:
            description: Identificador que puedes usar para relacionar este recibo
              con tus registros para después buscar por este número.
            type: string
          idempotency_key:
            description: "Identificador único que puedes usar para evitar duplicados\
              \ al reintentar una petición. Puede ser cualquier cadena de texto, mientras\
              \ sea única para cada documento."
            type: string
      - $ref: '#/components/schemas/ReceiptEditableProperties'
    ReceiptInput:
      allOf:
      - properties:
          items:
            items:
              $ref: '#/components/schemas/LineItemInput'
            type: array
        required:
        - items
      - $ref: '#/components/schemas/ReceiptEditableProperties'
      - properties:
          idempotency_key:
            description: |
              Identificador único que puedes usar para evitar duplicados al reintentar una petición. Puede ser cualquier cadena de texto, mientras sea única para cada documento.
              Si se deja en blanco, no se tomará en cuenta.
            type: string
            nullable: true
    ReceiptEditableProperties:
      properties:
        date:
          description: Fecha de emisión del recibo. Por defecto se utiliza la fecha
            actual.
          example: 2021-09-10T15:21:23.456Z
          format: date-time
          type: string
        payment_form:
          description: "Código que representa la forma de pago, según el [catálogo\
            \ del SAT](#forma-de-pago)."
          example: "03"
          type: string
        folio_number:
          description: Autoincremental. Número de folio del recibo para control interno
            y sin validez fiscal.
          example: 120
          type: integer
        currency:
          description: "Código de la moneda, acorde al estándar [ISO 4217](https://es.wikipedia.org/wiki/ISO_4217)."
          example: MXN
          type: string
        exchange:
          description: Tipo de cambio conforme a la moneda usada. Representa el número
            de pesos mexicanos que equivalen a una unidad de la divisa señalada en
            el atributo `currency`.
          example: 1
          minimum: 0
          type: number
        branch:
          description: Nombre de la sucursal donde se expidió el recibo.
          type: string
        external_id:
          description: Identificador opcional que puedes usar para relacionar este
            recibo con tus registros y poder hacer búsquedas usando este identificador.
            Facturapi no valida que este campo sea único.
          type: string
          nullable: true
    ReceiptSearchResult:
      allOf:
      - $ref: '#/components/schemas/SearchResult'
      - properties:
          data:
            items:
              $ref: '#/components/schemas/Receipt'
            type: array
    InvoiceReceiptInput:
      allOf:
      - properties:
          customer:
            $ref: '#/components/schemas/InvoiceCommonInputProperties_allOf_customer'
          use:
            default: G01
            description: "Código de Uso CFDI según el catálogo del SAT. Puedes ver\
              \ los códigos en [esta tabla](#uso-cfdi), o utilizar las constantes\
              \ incluídas en nuestras librerías."
            type: string
          conditions:
            description: Condiciones de pago
            maxLength: 1000
            minLength: 1
            type: string
            nullable: true
      - $ref: '#/components/schemas/InvoiceableCommonInput'
      required:
      - customer
    GlobalInvoiceInput:
      example:
        date: 2022-01-01T00:00:00.000
        months: "01"
        folio_number: 0
        series: series
        payment_form: "02"
        periodicity: Propiedad `periodicity` de la configuración de recibos de la
          organización.
        from: 2022-01-01T00:00:00.000
        to: 2022-31-01T23:59:59.999
      properties:
        from:
          default: Inicio del último periodo
          description: |
            Fecha inicial de los recibos que se incluirán en la factura global.
            Por default, este valor es el inicio del último periodo (día, semana,
            quincena o mes), según el valor de "Periodicidad" (`periodicity`)
            en la configuración de recibos de tu organización.
          example: 2022-01-01T00:00:00.000
          format: date
          type: string
        to:
          default: Fin del último periodo
          description: |
            Fecha final de los recibos que se incluirán en la factura global.
            Por default, este valor es el fin del último periodo (día, semana,
            quincena o mes), según el valor de "Periodicidad" (`periodicity`)
            en la configuración de recibos de tu organización.
          example: 2022-31-01T23:59:59.999
          format: date
          type: string
        periodicity:
          default: Propiedad `periodicity` de la configuración de recibos de la organización.
          description: |
            Periodicidad que corresponde al rango de fechas utilizado.
            Si se omite, se tomará la configuración de recibos de la organización.
          enum:
          - day
          - week
          - fortnight
          - month
          - two_months
          type: string
        months:
          default: Mes contenido en el rango de fechas utilizado.
          description: |
            Clave que representa el mes o bimestre de la factura. Consulta
            los posibles valores en el [catálogo de Meses y Bimestres](#meses-y-bimestres).
          example: "01"
          type: string
        folio_number:
          default: autoincremental
          description: |
            Número de folio asignado por la empresa para control interno.
            Si se omite, se asignará el valor autoincremental de la organización.
          type: integer
        series:
          description: Serie. Caracteres designados por la empresa para control interno
            y sin validez fiscal.
          maxLength: 25
          type: string
          nullable: true
        date:
          default: Valor del atributo `to`
          description: |
            Fecha de emisión de la factura.
          example: 2022-01-01T00:00:00.000
          format: date
          type: string
        payment_form:
          description: |
            description: Código que representa la forma de pago, de acuerdo al [catálogo del SAT](#forma-de-pago). Si se incluye, los recibos se agruparán y se crearán la factura global por la forma de pago.
          example: "02"
          maxLength: 2
          minLength: 2
          type: string
      required:
      - periodicity
    Retention:
      allOf:
      - $ref: '#/components/schemas/ResourceAutoGeneratedProps'
      - $ref: '#/components/schemas/RetentionReadOnlyProperties'
      - $ref: '#/components/schemas/RetentionProperties'
      title: Objeto Retention
    RetentionReadOnlyProperties:
      properties:
        status:
          description: |
            Estado actual de la retención.
          enum:
          - valid
          - canceled
          example: valid
          type: string
        verification_url:
          description: "Dirección URL para verificar el estado de la retención en\
            \ el portal del SAT. Este link es el mismo que aparece en el código QR,\
            \ en el PDF de la retención."
          example: https://verificacfdi.facturaelectronica.sat.gob.mx/default.aspx?id=45BEC0CA-5F1E-491E-9417-698EA48C382A&re=AAA010101AAA&rr=ABC101010111&tt=345.600000&fe=bWApPw==
          format: uri
          type: string
        type:
          description: Tipo de comprobante.
          enum:
          - Retención
          example: Retención
          type: string
        uuid:
          description: "Folio fiscal de la retención, asignado por el SAT."
          example: 39c85a3f-275b-4341-b259-e8971d9f8a94
          format: uuid
          type: string
        stamp:
          $ref: '#/components/schemas/Stamp'
        customer:
          $ref: '#/components/schemas/CuustomerInfo'
    RetentionProperties:
      properties:
        cve_retenc:
          description: Clave de la retención o información de pagos de acuerdo al
            catálogo del SAT.
          example: 1
          type: string
        fecha_exp:
          description: Fecha de expedición del comprobante en formato ISO8601 (UTC
            String).
          example: 2021-09-15T06:03:23.000Z
          format: date-time
          type: string
        desc_retenc:
          description: "Si la clave de la retención es “25” (Otro tipo de retenciones),\
            \ este campo se usa para registrar la descripción de la retención."
          type: string
        folio_int:
          description: Identificador alfanumérico para control interno de la empresa
            y sin relevancia fiscal.
          type: string
        periodo:
          $ref: '#/components/schemas/RetentionProperties_periodo'
        totales:
          $ref: '#/components/schemas/RetentionProperties_totales'
        external_id:
          description: Identificador opcional que puedes usar para relacionar esta
            retención con tus registros y poder hacer búsquedas usando este identificador.
            Facturapi no valida que este campo sea único.
          type: string
        idempotency_key:
          description: |
            Identificador único que puedes usar para evitar duplicados al reintentar una petición. Puede ser cualquier cadena de texto, mientras sea única para cada documento.
            Si se deja en blanco, no se tomará en cuenta.
          type: string
          nullable: true
        complements:
          items:
            $ref: '#/components/schemas/CustomComplementData'
          type: array
        pdf_custom_section:
          description: "En caso de que necesites incluir más información en el PDF,\
            \ este campo te permite insertar código HTML con tu propio contenido."
          format: html
          type: string
        addenda:
          description: Código XML con la Addenda que se necesite agregar a la factura.
          format: xml
          type: string
        namespaces:
          items:
            $ref: '#/components/schemas/NamespaceProperties'
          type: array
    RetentionSearchResult:
      allOf:
      - $ref: '#/components/schemas/SearchResult'
      - properties:
          data:
            items:
              $ref: '#/components/schemas/Retention'
            type: array
    RetentionInput:
      example:
        cve_retenc: 26
        fecha_exp: 2021-09-15T06:03:23.000Z
        folio_int: R123
        periodo:
          ejerc: 2021
          mes_ini: 9
          mes_fin: 9
        external_id: external_id
        pdf_custom_section: pdf_custom_section
        addenda: addenda
        complements:
        - null
        - null
        desc_retenc: desc_retenc
        idempotency_key: idempotency_key
        customer: null
        totales:
          monto_tot_exent: 0.14658129805029452
          monto_tot_operacion: 0.08008281904610115
          monto_tot_grav: 0.6027456183070403
          monto_tot_ret: 0.5962133916683182
          imp_retenidos:
          - impuesto: IVA
            tipo_pago_ret: 1
            monto_ret: 0.23021358869347652
            base_ret: 0.5637376656633328
          - impuesto: IVA
            tipo_pago_ret: 1
            monto_ret: 0.23021358869347652
            base_ret: 0.5637376656633328
        namespaces:
        - null
        - null
      properties:
        customer:
          $ref: '#/components/schemas/InvoiceCommonInputProperties_allOf_customer'
        cve_retenc:
          description: "Clave de la retención o información de pagos de acuerdo al\
            \ [catálogo del SAT](#clave-de-retencion)."
          example: 26
          type: string
        fecha_exp:
          description: Fecha de expedición del comprobante en formato ISO8601 (UTC
            String).
          example: 2021-09-15T06:03:23.000Z
          format: date-time
          type: string
        desc_retenc:
          description: "Si la clave de la retención es “25” (Otro tipo de retenciones),\
            \ este campo se usa para registrar la descripción de la retención."
          type: string
        folio_int:
          description: Identificador alfanumérico para control interno de la empresa
            y sin relevancia fiscal.
          example: R123
          type: string
        periodo:
          $ref: '#/components/schemas/RetentionInput_periodo'
        totales:
          $ref: '#/components/schemas/RetentionInput_totales'
        external_id:
          description: Identificador opcional que puedes usar para relacionar esta
            retención con tus registros y poder hacer búsquedas usando este identificador.
            Facturapi no valida que este campo sea único.
          type: string
        idempotency_key:
          description: |
            Identificador único que puedes usar para evitar duplicados al reintentar una petición. Puede ser cualquier cadena de texto, mientras sea única para cada documento.
          type: string
        complements:
          items:
            $ref: '#/components/schemas/CustomComplementData'
          type: array
        pdf_custom_section:
          description: "En caso de que necesites incluir más información en el PDF,\
            \ este campo te permite insertar código HTML con tu propio contenido."
          format: html
          type: string
        addenda:
          description: Código XML con la Addenda que se necesite agregar a la factura.
          format: xml
          type: string
        namespaces:
          items:
            $ref: '#/components/schemas/InvoiceableCommonInput_namespaces_inner'
          type: array
      required:
      - customer
      - cve_retenc
      - periodo
      - totales
    OrganizationAddress:
      allOf:
      - $ref: '#/components/schemas/CommonAddressProperties'
      - description: Domicilio fiscal de la organización emisora.
        properties:
          state:
            description: Nombre del Estado o Entidad Federativa.
            example: Sonora
            type: string
    OrganizationSearchResult:
      allOf:
      - $ref: '#/components/schemas/SearchResult'
      - properties:
          data:
            items:
              $ref: '#/components/schemas/Organization'
            type: array
    Organization:
      example:
        is_production_ready: true
        customization:
          has_logo: true
          color: BADA55
          pdf_extra:
            codes: true
            product_key: true
            tax_breakdown: true
            round_unit_price: false
          next_folio_number: 123
          next_folio_number_test: 123
        pending_steps:
        - description: description
          type: legal
        - description: description
          type: legal
        legal:
          website: website
          address: null
          phone: phone
          name: name
          legal_name: legal_name
          tax_system: "601"
        certificate:
          expires_at: 2025-05-05T20:55:33.468Z
          updated_at: 2023-05-05T20:55:33.468Z
          has_certificates: true
        created_at: 2017-05-05T20:55:33.468Z
        id: 5a2a307be93a2f00129ea035
      properties:
        id:
          description: ID del objeto
          example: 5a2a307be93a2f00129ea035
          type: string
        created_at:
          description: Fecha de registro
          example: 2017-05-05T20:55:33.468Z
          format: date-time
          type: string
        is_production_ready:
          description: Indica si la organización tiene información necesaria para
            facturar en ambiente Live.
          type: boolean
        pending_steps:
          items:
            $ref: '#/components/schemas/Organization_pending_steps_inner'
          type: array
        legal:
          $ref: '#/components/schemas/Organization_legal'
        customization:
          $ref: '#/components/schemas/Organization_customization'
        certificate:
          $ref: '#/components/schemas/Organization_certificate'
      title: Objeto Organization
    OrganizationCreateInput:
      example:
        name: name
      properties:
        name:
          description: Nombre comercial de la organización.
          maxLength: 100
          type: string
      required:
      - name
    OrganizationLegalInput:
      example:
        website: website
        support_email: support_email
        address: null
        phone: phone
        name: name
        legal_name: legal_name
        tax_system: "601"
      properties:
        name:
          description: Nombre comercial de la organización.
          maxLength: 100
          type: string
        legal_name:
          description: |
            Nombre Fiscal o Razón Social de la organización, *sin* el régimen societario (ej.: S.A. de C.V.).
          maxLength: 100
          type: string
        tax_system:
          description: "Código del Régimen Fiscal, del [catálogo del SAT](#régimen-fiscal)."
          example: "601"
          maxLength: 3
          minLength: 3
          type: string
        website:
          description: "Sitio web de la organización, que aparecerá en el PDF y correos\
            \ de facturas y recibos."
          type: string
        support_email:
          description: Dirección de correo electrónico para aclaraciones. Aparecerá
            en el PDF y correos de facturas y recibos.
          type: string
        phone:
          description: "Teléfono de la organización, que aparecerá en el PDF y correos\
            \ de facturas y recibos."
          type: string
        address:
          $ref: '#/components/schemas/OrganizationLegalInput_address'
      required:
      - address
      - legal_name
      - name
      - tax_system
    OrganizationCertsInput:
      properties:
        cerFile:
          description: Contenido binario del archivo con extensión `.cer` del certificado
            CSD.
          format: binary
          type: string
        keyFile:
          description: Contenido binario del archivo con extensión `.key` del certificado
            CSD.
          format: binary
          type: string
        password:
          description: Contraseña de la llave del certificado.
          type: string
      required:
      - cerFile
      - keyFile
      - password
    OrganizationLogoInput:
      properties:
        file:
          description: |
            Contenido binario del archivo con la imagen que se usará como
            logotipo. Formatos soportados:
            - jpg
            - png
            - svg
          format: binary
          type: string
      required:
      - file
    OrganizationCustomizationInput:
      properties:
        color:
          description: Color distintivo de la marca en representación Hexadecimal
            RGB de 6 caracteres.
          example: BADA55
          format: hex
          type: string
        next_folio_number:
          description: Número de folio que se asignará a la siguiente factura en ambiente
            Live (y que se incrementará automáticamente por cada nueva factura).
          example: 123
          type: integer
        next_folio_number_test:
          description: Número de folio que se asignará a la siguiente factura en ambiente
            Test (y que se incrementará automáticamente por cada nueva factura).
          example: 123
          type: integer
        pdf_extra:
          $ref: '#/components/schemas/Organization_customization_pdf_extra'
    OrganizationReceiptsInput:
      properties:
        periodicity:
          default: month
          description: |
            Periodicidad con la que la empresa decide realizar una factura global
            (al público en general) por todos los recibos no facturados. Este
            valor se utiliza como default al crear una factura global.
          enum:
          - day
          - week
          - fortnight
          - month
          - two_months
          type: string
        duration_days:
          default: 7
          description: |
            Días máximos para facturar por medio del portal de autofactura
            después de emitido el recibo y antes del último día del periodo
            definido por el atributo `periodicity`. El valor `0` desactiva esta
            opción, haciendo que los recibos expiren siempre el último día del
            periodo.
          type: integer
        next_folio_number:
          description: Número de folio que se asignará al siguiente recibo creado
            en esta organización en ambiente Live.
          type: integer
        next_folio_number_test:
          description: Número de folio que se asignará al siguiente recibo creado
            en esta organización en ambiente Test.
          type: integer
    DomainField:
      description: |
        Nombre del dominio. Se permiten caracteres alfanuméricos, sólo minúsculas,
        guión (-) y guión bajo (_). Debe empezar con una letra y
        terminar en letra o número.
      maxLength: 50
      minLength: 4
      pattern: "^[a-z][a-z0-9-_]{2,48}[a-z0-9]$"
      type: string
    OrganizationDomainInput:
      properties:
        domain:
          description: |
            Nombre del dominio. Se permiten caracteres alfanuméricos, sólo minúsculas,
            guión (-) y guión bajo (_). Debe empezar con una letra y
            terminar en letra o número.
          maxLength: 50
          minLength: 4
          pattern: "^[a-z][a-z0-9-_]{2,48}[a-z0-9]$"
          type: string
      required:
      - domain
    validateCustomerTaxInfo_200_response_errors_inner:
      example:
        path: tax_system
        message: El RégimenFiscal no coincide con el registrado para el RFC en la
          lista de contribuyentes obligados del SAT.
      properties:
        path:
          description: Nombre del campo que no coincide con los registros del SAT
          example: tax_system
          type: string
        message:
          description: Mensaje de error
          example: El RégimenFiscal no coincide con el registrado para el RFC en la
            lista de contribuyentes obligados del SAT.
          type: string
    validateCustomerTaxInfo_200_response:
      example:
        is_valid: true
        errors:
        - path: tax_system
          message: El RégimenFiscal no coincide con el registrado para el RFC en la
            lista de contribuyentes obligados del SAT.
        - path: tax_system
          message: El RégimenFiscal no coincide con el registrado para el RFC en la
            lista de contribuyentes obligados del SAT.
      properties:
        is_valid:
          description: Indica si la información fiscal del cliente coincide con los
            registros del SAT
          example: true
          type: boolean
        errors:
          items:
            $ref: '#/components/schemas/validateCustomerTaxInfo_200_response_errors_inner'
          type: array
    createProduct_request:
      allOf:
      - $ref: '#/components/schemas/ProductRequiredProperties'
      - $ref: '#/components/schemas/ProductProperties'
    createInvoice_request:
      oneOf:
      - $ref: '#/components/schemas/InvoiceIngresoInput'
      - $ref: '#/components/schemas/InvoiceEgresoInput'
      - $ref: '#/components/schemas/InvoicePagoInput'
      - $ref: '#/components/schemas/InvoiceNominaInput'
      - $ref: '#/components/schemas/InvoiceTrasladoInput'
    sendInvoiceByEmail_request:
      properties:
        email:
          description: Dirección de correo eletrónico
          example: otro@correo.com
          format: email
          nullable: true
          type: string
    sendReceiptByEmail_request:
      properties:
        email:
          description: Dirección de correo eletrónico
          example: otro@correo.com
          format: email
          nullable: true
          type: string
      required:
      - email
    checkDomainAvailability_200_response:
      example:
        available: true
      properties:
        available:
          description: Indica si el dominio está diponible
          example: true
          type: boolean
    _check_get_200_response:
      description: a
      example:
        ok: true
      properties:
        ok:
          example: true
          type: boolean
    TaxIdValidationResult_efos_data_detalles_inner:
      example:
        razonSocial: "NORMANDIA FERRE,"
        pubSatSentFav: 08/06/2021
        pubSatDefinitivos: 500-05-2021-151
        numFechaSentFav: 500-05-2021-15156 de fecha 25 de mayo de 2021
        numGlobalPresuncion: 500-05-2020-23758 de fecha 03 de noviembre de 2020
        pubDofDefinitivos: 25/05/2021
        situacionContribuyente: Definitivo
        numFechaPresuncion: 500-05-2020-23758 de fecha 03 de noviembre de 2020
        pubFechaSatPresuntos: 03/11/2020
        rfc: NOR170627727
        pubFechaDofPresuntos: 18/11/2020
      properties:
        rfc:
          description: "El RFC consultado, a manera de confirmación."
          example: NOR170627727
          type: string
        razonSocial:
          description: Razón social del contribuyente.
          example: "NORMANDIA FERRE,"
          type: string
        situacionContribuyente:
          description: |
            Texto que indica la situación actual. Consulta
            [esta tabla](#situación-del-contribuyente) para ver
            el detalle de los distintos valores.
          example: Definitivo
          type: string
        numFechaPresuncion:
          description: Texto con identificador y fecha del reporte de presunción.
          example: 500-05-2020-23758 de fecha 03 de noviembre de 2020
          type: string
        pubFechaSatPresuntos:
          description: Fecha de publicación de presunción.
          example: 03/11/2020
          format: DD/MM/YYYY
          type: string
        numGlobalPresuncion:
          description: Texto con identificador y fecha de publicación en el listado
            global de presunción.
          example: 500-05-2020-23758 de fecha 03 de noviembre de 2020
          type: string
        pubFechaDofPresuntos:
          description: Fecha de publicación en el Diario Oficial de la Federación
            (DOF).
          example: 18/11/2020
          format: DD/MM/YYYY
          type: string
        pubSatDefinitivos:
          description: Identificador de la publicación de estado “Definitivo”.
          example: 500-05-2021-151
          type: string
        pubDofDefinitivos:
          description: Fecha de la publicación de estado “Definitivo” en el DOF.
          example: 25/05/2021
          format: DD/MM/YYYY
          type: string
        numFechaSentFav:
          description: Texto con identificador y fecha de sentencia favorable.
          example: 500-05-2021-15156 de fecha 25 de mayo de 2021
          type: string
        pubSatSentFav:
          description: Fecha de sentencia favorable
          example: 08/06/2021
          format: DD/MM/YYYY
          type: string
    TaxIdValidationResult_efos_data:
      description: |
        Objeto con el resultado de la búqueda ante el SAT.
        Toda la información contenida en este objeto proviene del SAT.
      example:
        fechaLista: Información actualizada al 17 de septiembre de 2021
        detalles:
        - razonSocial: "NORMANDIA FERRE,"
          pubSatSentFav: 08/06/2021
          pubSatDefinitivos: 500-05-2021-151
          numFechaSentFav: 500-05-2021-15156 de fecha 25 de mayo de 2021
          numGlobalPresuncion: 500-05-2020-23758 de fecha 03 de noviembre de 2020
          pubDofDefinitivos: 25/05/2021
          situacionContribuyente: Definitivo
          numFechaPresuncion: 500-05-2020-23758 de fecha 03 de noviembre de 2020
          pubFechaSatPresuntos: 03/11/2020
          rfc: NOR170627727
          pubFechaDofPresuntos: 18/11/2020
        - razonSocial: "NORMANDIA FERRE,"
          pubSatSentFav: 08/06/2021
          pubSatDefinitivos: 500-05-2021-151
          numFechaSentFav: 500-05-2021-15156 de fecha 25 de mayo de 2021
          numGlobalPresuncion: 500-05-2020-23758 de fecha 03 de noviembre de 2020
          pubDofDefinitivos: 25/05/2021
          situacionContribuyente: Definitivo
          numFechaPresuncion: 500-05-2020-23758 de fecha 03 de noviembre de 2020
          pubFechaSatPresuntos: 03/11/2020
          rfc: NOR170627727
          pubFechaDofPresuntos: 18/11/2020
        mensaje: mensaje
      properties:
        mensaje:
          description: |
            Disponible sólo cuando el RFC no fue encontrado en la lista,
            lo cual es bueno.
          type: string
        fechaLista:
          description: Texto que indica la fecha de actualización de la lista.
          example: Información actualizada al 17 de septiembre de 2021
          type: string
        detalles:
          items:
            $ref: '#/components/schemas/TaxIdValidationResult_efos_data_detalles_inner'
          type: array
    TaxIdValidationResult_efos:
      description: |
        Resultado de la validación en la lista de Empresas que
        Facturan Operaciones Simuladas del SAT.
      example:
        data:
          fechaLista: Información actualizada al 17 de septiembre de 2021
          detalles:
          - razonSocial: "NORMANDIA FERRE,"
            pubSatSentFav: 08/06/2021
            pubSatDefinitivos: 500-05-2021-151
            numFechaSentFav: 500-05-2021-15156 de fecha 25 de mayo de 2021
            numGlobalPresuncion: 500-05-2020-23758 de fecha 03 de noviembre de 2020
            pubDofDefinitivos: 25/05/2021
            situacionContribuyente: Definitivo
            numFechaPresuncion: 500-05-2020-23758 de fecha 03 de noviembre de 2020
            pubFechaSatPresuntos: 03/11/2020
            rfc: NOR170627727
            pubFechaDofPresuntos: 18/11/2020
          - razonSocial: "NORMANDIA FERRE,"
            pubSatSentFav: 08/06/2021
            pubSatDefinitivos: 500-05-2021-151
            numFechaSentFav: 500-05-2021-15156 de fecha 25 de mayo de 2021
            numGlobalPresuncion: 500-05-2020-23758 de fecha 03 de noviembre de 2020
            pubDofDefinitivos: 25/05/2021
            situacionContribuyente: Definitivo
            numFechaPresuncion: 500-05-2020-23758 de fecha 03 de noviembre de 2020
            pubFechaSatPresuntos: 03/11/2020
            rfc: NOR170627727
            pubFechaDofPresuntos: 18/11/2020
          mensaje: mensaje
        is_valid: true
      properties:
        is_valid:
          description: |
            Indica si el RFC tiene algún asunto relacionado con esta lista.
            `true`: El RFC no está en la lista de EFOS o su situación fue
            apelada y resultó favorable. `false`: El RFC está registrado como
            “Presunto” o “Definitivo” en la lista de EFOS.
          example: true
          type: boolean
        data:
          $ref: '#/components/schemas/TaxIdValidationResult_efos_data'
    LineItemInput_product:
      description: Objeto con información del producto o servicio facturado.
      oneOf:
      - $ref: '#/components/schemas/LineItemProductInput'
      - description: ID de un producto previamente registrado en Facturapi
        title: product_id
        type: string
    LineItemInput_third_party:
      allOf:
      - required:
        - legal_name
        - tax_id
        - tax_system
        - zip
        type: object
      - $ref: '#/components/schemas/ThirdParty'
    LineItemEgresoInput_product:
      description: Objeto con información del producto o servicio facturado.
      oneOf:
      - $ref: '#/components/schemas/LineItemProductEgresoInput'
      - description: ID de un producto previamente registrado en Facturapi
        title: product_id
        type: string
    LineItemTrasladoInput_product:
      description: Objeto con información del producto o servicio facturado.
      oneOf:
      - $ref: '#/components/schemas/LineItemTrasladoProductInput'
      - description: ID de un producto previamente registrado en Facturapi
        title: product_id
        type: string
    LineItemTrasladoInput_third_party:
      properties:
        legal_name:
          description: Nombre o razón social del tercero.
          example: The Michael Scott Paper Company
          type: string
        tax_id:
          description: RFC del tercero.
          example: STA920101HN7
          type: string
        tax_system:
          description: Régimen fiscal del tercero.
          example: "601"
          maxLength: 3
          minLength: 3
          type: string
        zip:
          description: Código postal del tercero.
          example: "01234"
          type: string
      required:
      - legal_name
      - tax_id
      - tax_system
      - zip
    OtroPago:
      allOf:
      - $ref: '#/components/schemas/NominaOtroPagoInput'
      - properties:
          compensacion_saldos_a_favor:
            $ref: '#/components/schemas/NominaCompensacionInput'
      title: OtroPago
    NominaComplementDataNestedProperties_otros_pagos_inner:
      allOf:
      - $ref: '#/components/schemas/NominaOtroPagoDirectProperties'
      - properties:
          compensacion_saldos_a_favor:
            $ref: '#/components/schemas/NominaCompensacionProperties'
    NominaReceptorDirectProperties_antiguedad:
      default: true
      description: "Antigüedad del empleado en el formato especificado por el SAT.\
        \ Si se envía un `string`, se espera que éste contenga la antigüedad en el\
        \ formato que especifica el SAT. Si se envía el valor booleano `false`, este\
        \ campo no se incluirá en la factura. Si se envía el valor booleano `true`\
        \ y `fecha_inicio_rel_laboral` existe, este valor se calculará con la diferencia\
        \ entre la fecha de inicio de relación laboral y la fecha de pago."
      oneOf:
      - type: string
      - type: boolean
    NominaReceptorNestedInput_sub_contratacion_inner:
      allOf:
      - $ref: '#/components/schemas/NominaSubContratacionRequiredProperties'
      - $ref: '#/components/schemas/NominaSubContratacionProperties'
    NominaEmisorProperties_entidad_sncf:
      description: Información para que las entidades adheridas al Sistema Nacional
        de Coordinación Fiscal realicen la identificación del origen de los recursos.
      properties:
        origen_recurso:
          description: |
            Clave de origen de recurso.

            - `“IP”`: Ingresos Propios
            - `“IF”`: Ingresos Federales
            - `“IM”`: Ingresos mixtos.
          enum:
          - IP
          - IF
          - IM
          type: string
        monto_recurso_propio:
          description: |
            Inporte de recursos propios. Requerido cuando el origen del recurso es por ingresos mixtos.
          type: number
    CustomerProperties_allOf_address:
      allOf:
      - $ref: '#/components/schemas/CommonAddressProperties'
      - description: Domicilio fiscal.
        properties:
          state:
            description: "Si el país es México (\"MEX\"), contiene el nombre del Estado\
              \ o Entidad Federativa. Para extranjeros contiene el código de Estado\
              \ de acuerdo al estándar [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2),\
              \ que puedes consultar en nuestro [Catálogo de Estados](https://dashboard.facturapi.io/catalogs/state)."
            example: Sonora
            type: string
          country:
            default: MEX
            description: "Código de país acorde al estándar [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3),\
              \ del [Catálogo de Países](https://dashboard.facturapi.io/catalogs/country)."
            example: MEX
            type: string
    PaymentInput_related_documents_inner_taxes_inner:
      properties:
        base:
          description: |
            Base utilizada para el cálculo del impuestos.
          type: number
        type:
          description: |
            Tipo de impuesto.
          enum:
          - IVA
          - ISR
          - IEPS
          type: string
        rate:
          description: |
            Tasa o cuota del impuesto
          example: 0.16
          type: number
        factor:
          default: Tasa
          description: Tipo factor.
          enum:
          - Tasa
          - Cuota
          - Exento
          type: string
        withholding:
          default: false
          description: Indica si el impuesto es una retención (`true`) o un traslado
            (`false`).
          type: boolean
      required:
      - base
      - rate
      - type
    PaymentInput_related_documents_inner:
      properties:
        uuid:
          description: Folio fiscal ó UUID del comprobante de ingreso relacionado.
          format: uuid
          type: string
        amount:
          description: |
            Cantidad del pago correspondiente al comprobante relacionado,
            usando el método de pago indicado en este elemento del arreglo
            de pagos. Este valor debe ser expresado en la moneda definida
            en `related_documents[].currency`.
          type: number
        taxes:
          items:
            $ref: '#/components/schemas/PaymentInput_related_documents_inner_taxes_inner'
          type: array
        taxability:
          default: |
            '01' si el array `taxes` está vacío; '02' si el array `taxes` tiene por lo menos un elemento.
          description: |
            Código que representa si el bien o servicio es objeto de impuesto o no. Este atributo corresponde al campo "ObjetoImp" en el CFDI.

            - `01`: No objeto de impuesto.
            - `02`: Sí objeto de impuesto.
            - `03`: Sí objeto de impuesto, pero no obligado a desglose.
            - `04`: Sí objeto de impuesto, y no causa impuesto.
          enum:
          - "01"
          - "02"
          - "03"
          - "04"
          type: string
        installment:
          description: Número de parcialidad del pago.
          type: integer
        last_balance:
          description: "Cantidad que estaba pendiente por pagar antes de recibir este\
            \ pago. Este valor se expresa en la moneda definida en `payments[].related[].currency`."
          type: number
        currency:
          default: MXN
          description: "Si la moneda utilizada en la factura relacionada no es moneda\
            \ nacional (MXN), debe especificarse su valor acorde al estándar [ISO\
            \ 4217](https://es.wikipedia.org/wiki/ISO_4217)."
          maxLength: 3
          minLength: 3
          type: string
        exchange:
          description: |
            Obligatorio cuando la moneda del documento relacionado es distinta a la moneda de pago. Tipo de cambio entre las dos monedas al momento del pago. Ejemplo: La factura de iingreso relacionada se registra en USD, mientras que el pago actual se realiza en MXN, este atributo debería registrarse como `0.45` (USD/MXN).
          type: number
        folio_number:
          description: Opcionalmente se puede incluir el número de folio del documento
            relacionado.
          type: integer
        series:
          description: Opcionalmente se puede incluir la serie del documento relacionado.
          type: string
      required:
      - amount
      - installment
      - last_balance
      - taxes
      - uuid
    CuustomerInfo_address:
      properties:
        country:
          description: "Código de País acorde al estándar ISO 3166-1 alpha-3, del\
            \ Catálogo de Países."
          example: MEX
          format: ISO 3166-1 alpha-3
          type: string
    InvoiceProperties_address:
      allOf:
      - $ref: '#/components/schemas/CommonAddressProperties'
      - description: Domicilio de expedición de la factura.
        properties:
          state:
            description: Nombre del Estado o Entidad Federativa.
            example: Sonora
            type: string
    InvoiceableCommonInput_namespaces_inner:
      allOf:
      - $ref: '#/components/schemas/NamespaceRequiredProperties'
      - $ref: '#/components/schemas/NamespaceProperties'
    InvoiceCommonInputProperties_allOf_customer:
      description: Cliente receptor de la factura.
      oneOf:
      - $ref: '#/components/schemas/CustomerCreateInput'
      - description: ID del objeto 'customer' previamente registrado en Facturapi.
        example: 58e93bd8e86eb318b0197456
        title: customer_id
        type: string
    InvoiceCommonInputProperties_allOf_address:
      allOf:
      - $ref: '#/components/schemas/CommonAddressProperties'
      - description: |
          Puedes usar este parámetro para especificar el domicilio de expedición de la factura.
          Este campo es opcional y si no se envía, la factura se expedirá con el domicilio de
          la organización.
        properties:
          state:
            description: Nombre del Estado o Entidad Federativa.
            example: Sonora
            type: string
    InvoiceIngresoInput_allOf_global:
      description: |
        Objeto requerido al crear una factura global.
      properties:
        periodicity:
          description: |
            Periodicidad que abarca la factura global.

            - `day`: Diario
            - `week`: Semanal
            - `fortnight`: Quincenal
            - `month`: Mensual
            - `two_months`: Bimestral
          enum:
          - day
          - week
          - fortnight
          - month
          - two_months
          type: string
          nullable: true
        months:
          description: |
            Clave que representa el mes o bimestre de la factura. Consulta
            los posibles valores en el [catálogo de Meses y Bimestres](#meses-y-bimestres).
          example: "01"
          type: string
        year:
          description: Año de la factura.
          example: 2022
          type: integer
      required:
      - months
      - periodicity
      - year
      nullable: true
    RetentionProperties_periodo:
      description: Información sobre el periodo de la retención.
      properties:
        mes_ini:
          description: Mes inicial del periodo de la retención.
          maximum: 12
          minimum: 1
          type: integer
        mes_fin:
          description: Mes final del periodo de la retención.
          maximum: 12
          minimum: 1
          type: integer
        ejerc:
          description: Año o ejercicio fiscal en que se realizó la retención.
          type: integer
    RetentionProperties_totales_imp_retenidos_inner:
      properties:
        base:
          description: Base del impuesto retenido.
          minimum: 0
          type: number
        impuesto:
          description: "Clave del tipo de impuesto retenido, del catálogo del SAT."
          enum:
          - IVA
          - ISR
          example: IVA
          type: string
        monto:
          description: Importe del impuesto retenido
          minimum: 0
          type: number
        tipo_pago_ret:
          description: |
            - `01`: Pago definitivo IVA
            - `02`: Pago definitivo IEPS
            - `03`: Pago definitivo ISR Plataformas
            - `04`: Pago provisional ISR
          enum:
          - 1
          - 2
          - 3
          - 4
          type: string
    RetentionProperties_totales:
      description: Información sobre el total de retenciones efectuadas en el periodo
        correspondiente.
      properties:
        monto_tot_operacion:
          description: "Monto total de la operación, con precisión de hasta 6 decimales."
          minimum: 0
          type: number
        monto_tot_grav:
          description: Monto total gravado.
          minimum: 0
          type: number
        monto_tot_exent:
          description: Monto total exento.
          minimum: 0
          type: number
        monto_tot_ret:
          description: Suma de los montos de impuestos retenidos.
          minimum: 0
          type: number
        imp_retenidos:
          items:
            $ref: '#/components/schemas/RetentionProperties_totales_imp_retenidos_inner'
          type: array
    RetentionInput_periodo:
      description: Información sobre el periodo de la retención.
      example:
        ejerc: 2021
        mes_ini: 9
        mes_fin: 9
      properties:
        mes_ini:
          description: Mes inicial del periodo de la retención.
          example: 9
          maximum: 12
          minimum: 1
          type: integer
        mes_fin:
          description: Mes final del periodo de la retención.
          example: 9
          maximum: 12
          minimum: 1
          type: integer
        ejerc:
          description: Año o ejercicio fiscal en que se realizó la retención.
          example: 2021
          type: integer
      required:
      - ejerc
      - mes_fin
      - mes_ini
    RetentionInput_totales_imp_retenidos_inner:
      example:
        impuesto: IVA
        tipo_pago_ret: 1
        monto_ret: 0.23021358869347652
        base_ret: 0.5637376656633328
      properties:
        base_ret:
          description: Base del impuesto retenido.
          minimum: 0
          type: number
        impuesto:
          description: "Clave del tipo de impuesto retenido, del catálogo del SAT."
          enum:
          - IVA
          - ISR
          example: IVA
          type: string
        monto_ret:
          description: Importe del impuesto retenido
          minimum: 0
          type: number
        tipo_pago_ret:
          description: |
            - `01`: Pago definitivo IVA
            - `02`: Pago definitivo IEPS
            - `03`: Pago definitivo ISR Plataformas
            - `04`: Pago provisional ISR
          enum:
          - 1
          - 2
          - 3
          - 4
          type: string
      required:
      - monto_ret
      - tipo_pago_ret
    RetentionInput_totales:
      description: Información sobre el total de retenciones efectuadas en el periodo
        correspondiente.
      example:
        monto_tot_exent: 0.14658129805029452
        monto_tot_operacion: 0.08008281904610115
        monto_tot_grav: 0.6027456183070403
        monto_tot_ret: 0.5962133916683182
        imp_retenidos:
        - impuesto: IVA
          tipo_pago_ret: 1
          monto_ret: 0.23021358869347652
          base_ret: 0.5637376656633328
        - impuesto: IVA
          tipo_pago_ret: 1
          monto_ret: 0.23021358869347652
          base_ret: 0.5637376656633328
      properties:
        monto_tot_operacion:
          description: "Monto total de la operación, con precisión de hasta 6 decimales."
          minimum: 0
          type: number
        monto_tot_grav:
          description: Monto total gravado.
          minimum: 0
          type: number
        monto_tot_exent:
          description: Monto total exento.
          minimum: 0
          type: number
        monto_tot_ret:
          description: Suma de los montos de impuestos retenidos.
          minimum: 0
          type: number
        imp_retenidos:
          items:
            $ref: '#/components/schemas/RetentionInput_totales_imp_retenidos_inner'
          type: array
      required:
      - imp_retenidos
      - monto_tot_exent
      - monto_tot_operacion
    Organization_pending_steps_inner:
      example:
        description: description
        type: legal
      properties:
        type:
          description: Código que representa el tiop de paso que se requiere completar
          enum:
          - legal
          - logo
          - certificate
          type: string
        description:
          description: Texto que describe el paso que se requiere completar y que
            puedes usar para mostrárselo al usuario.
          type: string
    Organization_legal_address:
      allOf:
      - description: Domicilio fiscal de la organización.
        type: object
      - $ref: '#/components/schemas/OrganizationAddress'
    Organization_legal:
      description: Datos fiscales de la empresa.
      example:
        website: website
        address: null
        phone: phone
        name: name
        legal_name: legal_name
        tax_system: "601"
      properties:
        name:
          description: Nombre comercial de la organización.
          type: string
        legal_name:
          description: |
            Nombre Fiscal o Razón Social de la organización, *sin* el régimen societario (ej.: S.A. de C.V.).
          type: string
        tax_system:
          description: "Código de Régimen Fiscal, del [catálogo del SAT](#tipo-de-ré\
            gimen)."
          example: "601"
          maxLength: 3
          minLength: 3
          type: string
        website:
          description: "Sitio web de la organización, que se utilizará al enviar la\
            \ factura por correo electrónico."
          type: string
        phone:
          description: "Teléfono de la organización, que aparecerá en el PDF de la\
            \ factura."
          type: string
        address:
          $ref: '#/components/schemas/Organization_legal_address'
    Organization_customization_pdf_extra:
      description: "Configura qué campos opcionales se queiren mostrar en el PDF.\
        \ El SAT no obliga a mostrar estos campos, pero pueden activarse según la\
        \ preferencia de la organización."
      example:
        codes: true
        product_key: true
        tax_breakdown: true
        round_unit_price: false
      properties:
        codes:
          default: true
          description: |
            Mostrar códigos de catálogos del SAT junto a sus descripciones. Ejemplo: “KGM Kilogramo”.
          type: boolean
        product_key:
          default: true
          description: |
            Mostrar la clave de producto-servicio.
          type: boolean
        round_unit_price:
          default: false
          description: |
            Redondear el precio unitario en el PDF a 2 decimales, pero conservar los 6 decimales en el XML.
          type: boolean
        tax_breakdown:
          default: true
          description: |
            Mostrar el desglose de impuestos en el PDF. Si se desactiva, sólo se mostratán los impuestos en los totales, pero no en el detalle de cada concepto.
          type: boolean
    Organization_customization:
      description: |
        Configuración de personalización de la organización, que se utilizarán para reflejar el branding y
        las preferencias de PDFs de la organización. Estos datos se pueden actualizar en cualquier momento.
      example:
        has_logo: true
        color: BADA55
        pdf_extra:
          codes: true
          product_key: true
          tax_breakdown: true
          round_unit_price: false
        next_folio_number: 123
        next_folio_number_test: 123
      properties:
        has_logo:
          description: Indica si la organización ya tiene un logotipo cargado.
          type: boolean
        color:
          description: Color distintivo de la marca en representación Hexadecimal
            RGB de 6 caracteres.
          example: BADA55
          format: hex
          type: string
        next_folio_number:
          description: Número de folio que se asignará a la siguiente factura en ambiente
            Live (y que se incrementará automáticamente por cada nueva factura).
          example: 123
          type: integer
        next_folio_number_test:
          description: Número de folio que se asignará a la siguiente factura en ambiente
            Test (y que se incrementará automáticamente por cada nueva factura).
          example: 123
          type: integer
        pdf_extra:
          $ref: '#/components/schemas/Organization_customization_pdf_extra'
    Organization_certificate:
      description: |
        Información últil sobre el certificado de sello digital (CSD) de la organización, que se utilizará para firmar las facturas.
      example:
        expires_at: 2025-05-05T20:55:33.468Z
        updated_at: 2023-05-05T20:55:33.468Z
        has_certificates: true
      properties:
        has_certificates:
          description: Indica si la organización ya tiene el Certificado de Sello
            Digital (CSD) cargado.
          type: boolean
        updated_at:
          description: Fecha de la última actualización del certificado.
          example: 2023-05-05T20:55:33.468Z
          format: date-time
          type: string
        expires_at:
          description: Fecha de expiración del certificado.
          example: 2025-05-05T20:55:33.468Z
          format: date-time
          type: string
    OrganizationLegalInput_address:
      allOf:
      - description: Domicilio fiscal de la organización emisora.
        required:
        - exterior
        - street
        - zip
        type: object
      - $ref: '#/components/schemas/OrganizationAddress'
  securitySchemes:
    Secret Live Key:
      bearerFormat: sk_live_XXXXXXXXXXXX
      description: "Única por organización. Permite crear, obtener y administrar recursos\
        \ en ambiente Live para una organización en específico."
      scheme: bearer
      type: http
    Secret Test Key:
      bearerFormat: sk_test_XXXXXXXXXXXX
      description: "Única por organización. Permite crear, obtener y administrar recursos\
        \ en ambiente Test para una organización en específico."
      scheme: bearer
      type: http
    Secret User Key:
      bearerFormat: sk_user_XXXXXXXXXXXX
      description: Única por cuenta. Permite crear y configurar organizaciones pertenecientes
        a la cuenta del usuario.
      scheme: bearer
      type: http
x-tagGroups:
- name: Recursos
  tags:
  - customer
  - product
  - invoice
  - receipt
  - retention
  - organization
- name: Herramientas
  tags:
  - tools
  - sat_keys
- name: Webhooks
  tags:
  - events
  - webhooks
- name: Modelos
  tags:
  - customer_model
  - product_model
  - invoice_model
  - receipt_model
  - retention_model
  - organization_model
x-webhooks:
  Autofactura completada:
    post:
      tags:
      - events
      requestBody:
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/EventBase'
              - type: object
                properties:
                  type:
                    type: string
                    description: Tipo de evento
                    exacmple: receipt.self_invoice_complete
                    enum:
                    - receipt.self_invoice_complete
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                        description: Tipo de objeto asociado al evento
                        enum:
                        - receipt
                      object:
                        $ref: '#/components/schemas/Receipt'
  Estatus de cancelación actualizado:
    post:
      tags:
      - events
      requestBody:
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/EventBase'
              - type: object
                properties:
                  type:
                    type: string
                    description: Tipo de evento
                    enum:
                    - invoice.cancellation_status_updated
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                        description: Tipo de objeto asociado al evento
                        enum:
                        - invoice
                      object:
                        $ref: '#/components/schemas/Invoice'
  Estatus de recibo actualizado:
    post:
      tags:
      - events
      requestBody:
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/EventBase'
              - type: object
                properties:
                  type:
                    type: string
                    description: Tipo de evento
                    enum:
                    - receipt.status_updated
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                        description: Tipo de objeto asociado al evento
                        enum:
                        - receipt
                      object:
                        $ref: '#/components/schemas/Receipt'
