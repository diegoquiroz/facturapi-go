/*
Facturapi

<br /> <br />  En esta página enlistamos todos los métodos disponibles en la API de Facturapi, así como la referencia completa de los parámetros que acepta cada uno. Para ver las propiedades anidadas de un objeto o arreglo de objetos, puedes hacer clic sobre el nombre del campo y expandirlo.  La API de Facturapi está diseñada con el estándar [REST](https://developer.mozilla.org/en-US/docs/Glossary/REST) en mente. Los endpoints de la API están agrupados por recursos, tienen URLs predecibles, las respuestas tienen formato JSON y usamos códigos HTTP de respuesta, autenticación y verbos estándar.  Durante el desarrollo, puedes usar la API de Facturapi en ambiente Test y las facturas que emitas no se enviarán al SAT ni tendrán validez fiscal.  La llave secreta que utilices para autenticarte determinará tanto el ambiente en el que se creará la factura (Test o Live), así como la organización a utilizar como emisor de tu factura, o bien como dueña del recurso que solicites crear. 

API version: 2.0
Contact: soporte@facturapi.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the NominaIncapacidadInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NominaIncapacidadInput{}

// NominaIncapacidadInput struct for NominaIncapacidadInput
type NominaIncapacidadInput struct {
	// Número de días enteros que el trabajador se incapacitó en el periodo.
	DiasIncapacidad int32 `json:"dias_incapacidad"`
	// Clave del catálogo [Tipo de Incapacidad](#tipo-de-incapacidad).
	TipoIncapacidad string `json:"tipo_incapacidad"`
	// Monto del importe monetario de la incapacidad.
	ImporteMonetario *float32 `json:"importe_monetario,omitempty"`
}

// NewNominaIncapacidadInput instantiates a new NominaIncapacidadInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNominaIncapacidadInput(diasIncapacidad int32, tipoIncapacidad string) *NominaIncapacidadInput {
	this := NominaIncapacidadInput{}
	this.DiasIncapacidad = diasIncapacidad
	this.TipoIncapacidad = tipoIncapacidad
	return &this
}

// NewNominaIncapacidadInputWithDefaults instantiates a new NominaIncapacidadInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNominaIncapacidadInputWithDefaults() *NominaIncapacidadInput {
	this := NominaIncapacidadInput{}
	return &this
}

// GetDiasIncapacidad returns the DiasIncapacidad field value
func (o *NominaIncapacidadInput) GetDiasIncapacidad() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DiasIncapacidad
}

// GetDiasIncapacidadOk returns a tuple with the DiasIncapacidad field value
// and a boolean to check if the value has been set.
func (o *NominaIncapacidadInput) GetDiasIncapacidadOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DiasIncapacidad, true
}

// SetDiasIncapacidad sets field value
func (o *NominaIncapacidadInput) SetDiasIncapacidad(v int32) {
	o.DiasIncapacidad = v
}

// GetTipoIncapacidad returns the TipoIncapacidad field value
func (o *NominaIncapacidadInput) GetTipoIncapacidad() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TipoIncapacidad
}

// GetTipoIncapacidadOk returns a tuple with the TipoIncapacidad field value
// and a boolean to check if the value has been set.
func (o *NominaIncapacidadInput) GetTipoIncapacidadOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TipoIncapacidad, true
}

// SetTipoIncapacidad sets field value
func (o *NominaIncapacidadInput) SetTipoIncapacidad(v string) {
	o.TipoIncapacidad = v
}

// GetImporteMonetario returns the ImporteMonetario field value if set, zero value otherwise.
func (o *NominaIncapacidadInput) GetImporteMonetario() float32 {
	if o == nil || IsNil(o.ImporteMonetario) {
		var ret float32
		return ret
	}
	return *o.ImporteMonetario
}

// GetImporteMonetarioOk returns a tuple with the ImporteMonetario field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NominaIncapacidadInput) GetImporteMonetarioOk() (*float32, bool) {
	if o == nil || IsNil(o.ImporteMonetario) {
		return nil, false
	}
	return o.ImporteMonetario, true
}

// HasImporteMonetario returns a boolean if a field has been set.
func (o *NominaIncapacidadInput) HasImporteMonetario() bool {
	if o != nil && !IsNil(o.ImporteMonetario) {
		return true
	}

	return false
}

// SetImporteMonetario gets a reference to the given float32 and assigns it to the ImporteMonetario field.
func (o *NominaIncapacidadInput) SetImporteMonetario(v float32) {
	o.ImporteMonetario = &v
}

func (o NominaIncapacidadInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NominaIncapacidadInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dias_incapacidad"] = o.DiasIncapacidad
	toSerialize["tipo_incapacidad"] = o.TipoIncapacidad
	if !IsNil(o.ImporteMonetario) {
		toSerialize["importe_monetario"] = o.ImporteMonetario
	}
	return toSerialize, nil
}

type NullableNominaIncapacidadInput struct {
	value *NominaIncapacidadInput
	isSet bool
}

func (v NullableNominaIncapacidadInput) Get() *NominaIncapacidadInput {
	return v.value
}

func (v *NullableNominaIncapacidadInput) Set(val *NominaIncapacidadInput) {
	v.value = val
	v.isSet = true
}

func (v NullableNominaIncapacidadInput) IsSet() bool {
	return v.isSet
}

func (v *NullableNominaIncapacidadInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNominaIncapacidadInput(val *NominaIncapacidadInput) *NullableNominaIncapacidadInput {
	return &NullableNominaIncapacidadInput{value: val, isSet: true}
}

func (v NullableNominaIncapacidadInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNominaIncapacidadInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


