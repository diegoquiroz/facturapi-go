/*
Facturapi

<br /> <br />  En esta página enlistamos todos los métodos disponibles en la API de Facturapi, así como la referencia completa de los parámetros que acepta cada uno. Para ver las propiedades anidadas de un objeto o arreglo de objetos, puedes hacer clic sobre el nombre del campo y expandirlo.  La API de Facturapi está diseñada con el estándar [REST](https://developer.mozilla.org/en-US/docs/Glossary/REST) en mente. Los endpoints de la API están agrupados por recursos, tienen URLs predecibles, las respuestas tienen formato JSON y usamos códigos HTTP de respuesta, autenticación y verbos estándar.  Durante el desarrollo, puedes usar la API de Facturapi en ambiente Test y las facturas que emitas no se enviarán al SAT ni tendrán validez fiscal.  La llave secreta que utilices para autenticarte determinará tanto el ambiente en el que se creará la factura (Test o Live), así como la organización a utilizar como emisor de tu factura, o bien como dueña del recurso que solicites crear. 

API version: 2.0
Contact: soporte@facturapi.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the PaymentInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentInput{}

// PaymentInput struct for PaymentInput
type PaymentInput struct {
	// Código de la forma de pago según el [catálogo del SAT](#forma-de-pago). También puedes utilizar la constante `PaymentForm` incluída en nuestras librerías.
	PaymentForm string `json:"payment_form"`
	RelatedDocuments []PaymentInputRelatedDocumentsInner `json:"related_documents"`
	// Código de la moneda, acorde al estándar [ISO 4217](https://es.wikipedia.org/wiki/ISO_4217).
	Currency *string `json:"currency,omitempty"`
	// Tipo de cambio conforme a la moneda usada. Representa el número de pesos mexicanos que equivalen a una unidad de la divisa señalada en el atributo `currency`.
	Exchange *float32 `json:"exchange,omitempty"`
	// Fecha en que se recibió el pago. Sólo es necesario incluirla si el pago se efectuó en una fecha anterior a la emisión de este comprobante. No se permiten fechas futuras.
	Date *time.Time `json:"date,omitempty"`
	// Número de cheque, de autorización, de referencia, clave de rastreo SPEI, línea de captura o algún número de referencia que permita identificar la operación correspondiente al pago efectuado.
	NumOperacion *string `json:"numOperacion,omitempty"`
	// RFC de la entidad emisora de la cuenta de origen, es decir, la operadora, banco, institución financiera, emisor de monedero electrónico, etc.
	RfcEmisorCtaOrd *string `json:"rfcEmisorCtaOrd,omitempty"`
	// Nombre del banco ordenante.
	NomBancoOrdExt *string `json:"nomBancoOrdExt,omitempty"`
	// Número de cuenta con la que se realizó el pago.
	CtaOrdenante *string `json:"ctaOrdenante,omitempty"`
	// RFC de la entidad de la cuenta operadora destino, es decir, la operadora, banco, institución financiera, emisor de monedero electrónico, etc.
	RfcEmisorCtaBen *string `json:"rfcEmisorCtaBen,omitempty"`
	// Número de cuenta donde se recibió el pago.
	CtaBeneficiario *string `json:"ctaBeneficiario,omitempty"`
	// Clave del tipo de cadena de pago que genera la entidad receptora del pago. Si existe este campo, es obligatorio registrar los campos `certPago`, `cadPago` y `selloPago`. 
	TipoCadPago *string `json:"tipoCadPago,omitempty"`
	// Certificado que corresponde al pago, como una cadena de texto en formato base 64.
	CertPago *string `json:"certPago,omitempty"`
	// Cadena original del comprobante de pago generado por la entidad emisora de la cuenta beneficiaria.
	CadPago *string `json:"cadPago,omitempty"`
	// Sello digital que se asocie al pago expresado como una cadena de texto en formato base 64.
	SelloPago *string `json:"selloPago,omitempty"`
}

// NewPaymentInput instantiates a new PaymentInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentInput(paymentForm string, relatedDocuments []PaymentInputRelatedDocumentsInner) *PaymentInput {
	this := PaymentInput{}
	this.PaymentForm = paymentForm
	this.RelatedDocuments = relatedDocuments
	var currency string = "MXN"
	this.Currency = &currency
	var exchange float32 = 1
	this.Exchange = &exchange
	var date time.Time = "now"
	this.Date = &date
	return &this
}

// NewPaymentInputWithDefaults instantiates a new PaymentInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentInputWithDefaults() *PaymentInput {
	this := PaymentInput{}
	var currency string = "MXN"
	this.Currency = &currency
	var exchange float32 = 1
	this.Exchange = &exchange
	var date time.Time = "now"
	this.Date = &date
	return &this
}

// GetPaymentForm returns the PaymentForm field value
func (o *PaymentInput) GetPaymentForm() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PaymentForm
}

// GetPaymentFormOk returns a tuple with the PaymentForm field value
// and a boolean to check if the value has been set.
func (o *PaymentInput) GetPaymentFormOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PaymentForm, true
}

// SetPaymentForm sets field value
func (o *PaymentInput) SetPaymentForm(v string) {
	o.PaymentForm = v
}

// GetRelatedDocuments returns the RelatedDocuments field value
func (o *PaymentInput) GetRelatedDocuments() []PaymentInputRelatedDocumentsInner {
	if o == nil {
		var ret []PaymentInputRelatedDocumentsInner
		return ret
	}

	return o.RelatedDocuments
}

// GetRelatedDocumentsOk returns a tuple with the RelatedDocuments field value
// and a boolean to check if the value has been set.
func (o *PaymentInput) GetRelatedDocumentsOk() ([]PaymentInputRelatedDocumentsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.RelatedDocuments, true
}

// SetRelatedDocuments sets field value
func (o *PaymentInput) SetRelatedDocuments(v []PaymentInputRelatedDocumentsInner) {
	o.RelatedDocuments = v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *PaymentInput) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInput) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *PaymentInput) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *PaymentInput) SetCurrency(v string) {
	o.Currency = &v
}

// GetExchange returns the Exchange field value if set, zero value otherwise.
func (o *PaymentInput) GetExchange() float32 {
	if o == nil || IsNil(o.Exchange) {
		var ret float32
		return ret
	}
	return *o.Exchange
}

// GetExchangeOk returns a tuple with the Exchange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInput) GetExchangeOk() (*float32, bool) {
	if o == nil || IsNil(o.Exchange) {
		return nil, false
	}
	return o.Exchange, true
}

// HasExchange returns a boolean if a field has been set.
func (o *PaymentInput) HasExchange() bool {
	if o != nil && !IsNil(o.Exchange) {
		return true
	}

	return false
}

// SetExchange gets a reference to the given float32 and assigns it to the Exchange field.
func (o *PaymentInput) SetExchange(v float32) {
	o.Exchange = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *PaymentInput) GetDate() time.Time {
	if o == nil || IsNil(o.Date) {
		var ret time.Time
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInput) GetDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *PaymentInput) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given time.Time and assigns it to the Date field.
func (o *PaymentInput) SetDate(v time.Time) {
	o.Date = &v
}

// GetNumOperacion returns the NumOperacion field value if set, zero value otherwise.
func (o *PaymentInput) GetNumOperacion() string {
	if o == nil || IsNil(o.NumOperacion) {
		var ret string
		return ret
	}
	return *o.NumOperacion
}

// GetNumOperacionOk returns a tuple with the NumOperacion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInput) GetNumOperacionOk() (*string, bool) {
	if o == nil || IsNil(o.NumOperacion) {
		return nil, false
	}
	return o.NumOperacion, true
}

// HasNumOperacion returns a boolean if a field has been set.
func (o *PaymentInput) HasNumOperacion() bool {
	if o != nil && !IsNil(o.NumOperacion) {
		return true
	}

	return false
}

// SetNumOperacion gets a reference to the given string and assigns it to the NumOperacion field.
func (o *PaymentInput) SetNumOperacion(v string) {
	o.NumOperacion = &v
}

// GetRfcEmisorCtaOrd returns the RfcEmisorCtaOrd field value if set, zero value otherwise.
func (o *PaymentInput) GetRfcEmisorCtaOrd() string {
	if o == nil || IsNil(o.RfcEmisorCtaOrd) {
		var ret string
		return ret
	}
	return *o.RfcEmisorCtaOrd
}

// GetRfcEmisorCtaOrdOk returns a tuple with the RfcEmisorCtaOrd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInput) GetRfcEmisorCtaOrdOk() (*string, bool) {
	if o == nil || IsNil(o.RfcEmisorCtaOrd) {
		return nil, false
	}
	return o.RfcEmisorCtaOrd, true
}

// HasRfcEmisorCtaOrd returns a boolean if a field has been set.
func (o *PaymentInput) HasRfcEmisorCtaOrd() bool {
	if o != nil && !IsNil(o.RfcEmisorCtaOrd) {
		return true
	}

	return false
}

// SetRfcEmisorCtaOrd gets a reference to the given string and assigns it to the RfcEmisorCtaOrd field.
func (o *PaymentInput) SetRfcEmisorCtaOrd(v string) {
	o.RfcEmisorCtaOrd = &v
}

// GetNomBancoOrdExt returns the NomBancoOrdExt field value if set, zero value otherwise.
func (o *PaymentInput) GetNomBancoOrdExt() string {
	if o == nil || IsNil(o.NomBancoOrdExt) {
		var ret string
		return ret
	}
	return *o.NomBancoOrdExt
}

// GetNomBancoOrdExtOk returns a tuple with the NomBancoOrdExt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInput) GetNomBancoOrdExtOk() (*string, bool) {
	if o == nil || IsNil(o.NomBancoOrdExt) {
		return nil, false
	}
	return o.NomBancoOrdExt, true
}

// HasNomBancoOrdExt returns a boolean if a field has been set.
func (o *PaymentInput) HasNomBancoOrdExt() bool {
	if o != nil && !IsNil(o.NomBancoOrdExt) {
		return true
	}

	return false
}

// SetNomBancoOrdExt gets a reference to the given string and assigns it to the NomBancoOrdExt field.
func (o *PaymentInput) SetNomBancoOrdExt(v string) {
	o.NomBancoOrdExt = &v
}

// GetCtaOrdenante returns the CtaOrdenante field value if set, zero value otherwise.
func (o *PaymentInput) GetCtaOrdenante() string {
	if o == nil || IsNil(o.CtaOrdenante) {
		var ret string
		return ret
	}
	return *o.CtaOrdenante
}

// GetCtaOrdenanteOk returns a tuple with the CtaOrdenante field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInput) GetCtaOrdenanteOk() (*string, bool) {
	if o == nil || IsNil(o.CtaOrdenante) {
		return nil, false
	}
	return o.CtaOrdenante, true
}

// HasCtaOrdenante returns a boolean if a field has been set.
func (o *PaymentInput) HasCtaOrdenante() bool {
	if o != nil && !IsNil(o.CtaOrdenante) {
		return true
	}

	return false
}

// SetCtaOrdenante gets a reference to the given string and assigns it to the CtaOrdenante field.
func (o *PaymentInput) SetCtaOrdenante(v string) {
	o.CtaOrdenante = &v
}

// GetRfcEmisorCtaBen returns the RfcEmisorCtaBen field value if set, zero value otherwise.
func (o *PaymentInput) GetRfcEmisorCtaBen() string {
	if o == nil || IsNil(o.RfcEmisorCtaBen) {
		var ret string
		return ret
	}
	return *o.RfcEmisorCtaBen
}

// GetRfcEmisorCtaBenOk returns a tuple with the RfcEmisorCtaBen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInput) GetRfcEmisorCtaBenOk() (*string, bool) {
	if o == nil || IsNil(o.RfcEmisorCtaBen) {
		return nil, false
	}
	return o.RfcEmisorCtaBen, true
}

// HasRfcEmisorCtaBen returns a boolean if a field has been set.
func (o *PaymentInput) HasRfcEmisorCtaBen() bool {
	if o != nil && !IsNil(o.RfcEmisorCtaBen) {
		return true
	}

	return false
}

// SetRfcEmisorCtaBen gets a reference to the given string and assigns it to the RfcEmisorCtaBen field.
func (o *PaymentInput) SetRfcEmisorCtaBen(v string) {
	o.RfcEmisorCtaBen = &v
}

// GetCtaBeneficiario returns the CtaBeneficiario field value if set, zero value otherwise.
func (o *PaymentInput) GetCtaBeneficiario() string {
	if o == nil || IsNil(o.CtaBeneficiario) {
		var ret string
		return ret
	}
	return *o.CtaBeneficiario
}

// GetCtaBeneficiarioOk returns a tuple with the CtaBeneficiario field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInput) GetCtaBeneficiarioOk() (*string, bool) {
	if o == nil || IsNil(o.CtaBeneficiario) {
		return nil, false
	}
	return o.CtaBeneficiario, true
}

// HasCtaBeneficiario returns a boolean if a field has been set.
func (o *PaymentInput) HasCtaBeneficiario() bool {
	if o != nil && !IsNil(o.CtaBeneficiario) {
		return true
	}

	return false
}

// SetCtaBeneficiario gets a reference to the given string and assigns it to the CtaBeneficiario field.
func (o *PaymentInput) SetCtaBeneficiario(v string) {
	o.CtaBeneficiario = &v
}

// GetTipoCadPago returns the TipoCadPago field value if set, zero value otherwise.
func (o *PaymentInput) GetTipoCadPago() string {
	if o == nil || IsNil(o.TipoCadPago) {
		var ret string
		return ret
	}
	return *o.TipoCadPago
}

// GetTipoCadPagoOk returns a tuple with the TipoCadPago field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInput) GetTipoCadPagoOk() (*string, bool) {
	if o == nil || IsNil(o.TipoCadPago) {
		return nil, false
	}
	return o.TipoCadPago, true
}

// HasTipoCadPago returns a boolean if a field has been set.
func (o *PaymentInput) HasTipoCadPago() bool {
	if o != nil && !IsNil(o.TipoCadPago) {
		return true
	}

	return false
}

// SetTipoCadPago gets a reference to the given string and assigns it to the TipoCadPago field.
func (o *PaymentInput) SetTipoCadPago(v string) {
	o.TipoCadPago = &v
}

// GetCertPago returns the CertPago field value if set, zero value otherwise.
func (o *PaymentInput) GetCertPago() string {
	if o == nil || IsNil(o.CertPago) {
		var ret string
		return ret
	}
	return *o.CertPago
}

// GetCertPagoOk returns a tuple with the CertPago field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInput) GetCertPagoOk() (*string, bool) {
	if o == nil || IsNil(o.CertPago) {
		return nil, false
	}
	return o.CertPago, true
}

// HasCertPago returns a boolean if a field has been set.
func (o *PaymentInput) HasCertPago() bool {
	if o != nil && !IsNil(o.CertPago) {
		return true
	}

	return false
}

// SetCertPago gets a reference to the given string and assigns it to the CertPago field.
func (o *PaymentInput) SetCertPago(v string) {
	o.CertPago = &v
}

// GetCadPago returns the CadPago field value if set, zero value otherwise.
func (o *PaymentInput) GetCadPago() string {
	if o == nil || IsNil(o.CadPago) {
		var ret string
		return ret
	}
	return *o.CadPago
}

// GetCadPagoOk returns a tuple with the CadPago field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInput) GetCadPagoOk() (*string, bool) {
	if o == nil || IsNil(o.CadPago) {
		return nil, false
	}
	return o.CadPago, true
}

// HasCadPago returns a boolean if a field has been set.
func (o *PaymentInput) HasCadPago() bool {
	if o != nil && !IsNil(o.CadPago) {
		return true
	}

	return false
}

// SetCadPago gets a reference to the given string and assigns it to the CadPago field.
func (o *PaymentInput) SetCadPago(v string) {
	o.CadPago = &v
}

// GetSelloPago returns the SelloPago field value if set, zero value otherwise.
func (o *PaymentInput) GetSelloPago() string {
	if o == nil || IsNil(o.SelloPago) {
		var ret string
		return ret
	}
	return *o.SelloPago
}

// GetSelloPagoOk returns a tuple with the SelloPago field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInput) GetSelloPagoOk() (*string, bool) {
	if o == nil || IsNil(o.SelloPago) {
		return nil, false
	}
	return o.SelloPago, true
}

// HasSelloPago returns a boolean if a field has been set.
func (o *PaymentInput) HasSelloPago() bool {
	if o != nil && !IsNil(o.SelloPago) {
		return true
	}

	return false
}

// SetSelloPago gets a reference to the given string and assigns it to the SelloPago field.
func (o *PaymentInput) SetSelloPago(v string) {
	o.SelloPago = &v
}

func (o PaymentInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["payment_form"] = o.PaymentForm
	toSerialize["related_documents"] = o.RelatedDocuments
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.Exchange) {
		toSerialize["exchange"] = o.Exchange
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.NumOperacion) {
		toSerialize["numOperacion"] = o.NumOperacion
	}
	if !IsNil(o.RfcEmisorCtaOrd) {
		toSerialize["rfcEmisorCtaOrd"] = o.RfcEmisorCtaOrd
	}
	if !IsNil(o.NomBancoOrdExt) {
		toSerialize["nomBancoOrdExt"] = o.NomBancoOrdExt
	}
	if !IsNil(o.CtaOrdenante) {
		toSerialize["ctaOrdenante"] = o.CtaOrdenante
	}
	if !IsNil(o.RfcEmisorCtaBen) {
		toSerialize["rfcEmisorCtaBen"] = o.RfcEmisorCtaBen
	}
	if !IsNil(o.CtaBeneficiario) {
		toSerialize["ctaBeneficiario"] = o.CtaBeneficiario
	}
	if !IsNil(o.TipoCadPago) {
		toSerialize["tipoCadPago"] = o.TipoCadPago
	}
	if !IsNil(o.CertPago) {
		toSerialize["certPago"] = o.CertPago
	}
	if !IsNil(o.CadPago) {
		toSerialize["cadPago"] = o.CadPago
	}
	if !IsNil(o.SelloPago) {
		toSerialize["selloPago"] = o.SelloPago
	}
	return toSerialize, nil
}

type NullablePaymentInput struct {
	value *PaymentInput
	isSet bool
}

func (v NullablePaymentInput) Get() *PaymentInput {
	return v.value
}

func (v *NullablePaymentInput) Set(val *PaymentInput) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentInput) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentInput(val *PaymentInput) *NullablePaymentInput {
	return &NullablePaymentInput{value: val, isSet: true}
}

func (v NullablePaymentInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


