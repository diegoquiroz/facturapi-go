/*
Facturapi

<br /> <br />  En esta página enlistamos todos los métodos disponibles en la API de Facturapi, así como la referencia completa de los parámetros que acepta cada uno. Para ver las propiedades anidadas de un objeto o arreglo de objetos, puedes hacer clic sobre el nombre del campo y expandirlo.  La API de Facturapi está diseñada con el estándar [REST](https://developer.mozilla.org/en-US/docs/Glossary/REST) en mente. Los endpoints de la API están agrupados por recursos, tienen URLs predecibles, las respuestas tienen formato JSON y usamos códigos HTTP de respuesta, autenticación y verbos estándar.  Durante el desarrollo, puedes usar la API de Facturapi en ambiente Test y las facturas que emitas no se enviarán al SAT ni tendrán validez fiscal.  La llave secreta que utilices para autenticarte determinará tanto el ambiente en el que se creará la factura (Test o Live), así como la organización a utilizar como emisor de tu factura, o bien como dueña del recurso que solicites crear. 

API version: 2.0
Contact: soporte@facturapi.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the OrganizationCertificate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrganizationCertificate{}

// OrganizationCertificate Información últil sobre el certificado de sello digital (CSD) de la organización, que se utilizará para firmar las facturas. 
type OrganizationCertificate struct {
	// Indica si la organización ya tiene el Certificado de Sello Digital (CSD) cargado.
	HasCertificates *bool `json:"has_certificates,omitempty"`
	// Fecha de la última actualización del certificado.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// Fecha de expiración del certificado.
	ExpiresAt *time.Time `json:"expires_at,omitempty"`
}

// NewOrganizationCertificate instantiates a new OrganizationCertificate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrganizationCertificate() *OrganizationCertificate {
	this := OrganizationCertificate{}
	return &this
}

// NewOrganizationCertificateWithDefaults instantiates a new OrganizationCertificate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrganizationCertificateWithDefaults() *OrganizationCertificate {
	this := OrganizationCertificate{}
	return &this
}

// GetHasCertificates returns the HasCertificates field value if set, zero value otherwise.
func (o *OrganizationCertificate) GetHasCertificates() bool {
	if o == nil || IsNil(o.HasCertificates) {
		var ret bool
		return ret
	}
	return *o.HasCertificates
}

// GetHasCertificatesOk returns a tuple with the HasCertificates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationCertificate) GetHasCertificatesOk() (*bool, bool) {
	if o == nil || IsNil(o.HasCertificates) {
		return nil, false
	}
	return o.HasCertificates, true
}

// HasHasCertificates returns a boolean if a field has been set.
func (o *OrganizationCertificate) HasHasCertificates() bool {
	if o != nil && !IsNil(o.HasCertificates) {
		return true
	}

	return false
}

// SetHasCertificates gets a reference to the given bool and assigns it to the HasCertificates field.
func (o *OrganizationCertificate) SetHasCertificates(v bool) {
	o.HasCertificates = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *OrganizationCertificate) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationCertificate) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *OrganizationCertificate) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *OrganizationCertificate) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *OrganizationCertificate) GetExpiresAt() time.Time {
	if o == nil || IsNil(o.ExpiresAt) {
		var ret time.Time
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationCertificate) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpiresAt) {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *OrganizationCertificate) HasExpiresAt() bool {
	if o != nil && !IsNil(o.ExpiresAt) {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given time.Time and assigns it to the ExpiresAt field.
func (o *OrganizationCertificate) SetExpiresAt(v time.Time) {
	o.ExpiresAt = &v
}

func (o OrganizationCertificate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrganizationCertificate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HasCertificates) {
		toSerialize["has_certificates"] = o.HasCertificates
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.ExpiresAt) {
		toSerialize["expires_at"] = o.ExpiresAt
	}
	return toSerialize, nil
}

type NullableOrganizationCertificate struct {
	value *OrganizationCertificate
	isSet bool
}

func (v NullableOrganizationCertificate) Get() *OrganizationCertificate {
	return v.value
}

func (v *NullableOrganizationCertificate) Set(val *OrganizationCertificate) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationCertificate) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationCertificate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationCertificate(val *OrganizationCertificate) *NullableOrganizationCertificate {
	return &NullableOrganizationCertificate{value: val, isSet: true}
}

func (v NullableOrganizationCertificate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationCertificate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


