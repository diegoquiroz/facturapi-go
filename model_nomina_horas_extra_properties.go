/*
Facturapi

<br /> <br />  En esta página enlistamos todos los métodos disponibles en la API de Facturapi, así como la referencia completa de los parámetros que acepta cada uno. Para ver las propiedades anidadas de un objeto o arreglo de objetos, puedes hacer clic sobre el nombre del campo y expandirlo.  La API de Facturapi está diseñada con el estándar [REST](https://developer.mozilla.org/en-US/docs/Glossary/REST) en mente. Los endpoints de la API están agrupados por recursos, tienen URLs predecibles, las respuestas tienen formato JSON y usamos códigos HTTP de respuesta, autenticación y verbos estándar.  Durante el desarrollo, puedes usar la API de Facturapi en ambiente Test y las facturas que emitas no se enviarán al SAT ni tendrán validez fiscal.  La llave secreta que utilices para autenticarte determinará tanto el ambiente en el que se creará la factura (Test o Live), así como la organización a utilizar como emisor de tu factura, o bien como dueña del recurso que solicites crear. 

API version: 2.0
Contact: soporte@facturapi.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the NominaHorasExtraProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NominaHorasExtraProperties{}

// NominaHorasExtraProperties struct for NominaHorasExtraProperties
type NominaHorasExtraProperties struct {
	// Número de días en que el trabajador laboró horas extra adicionales a su jornada normal de trabajo.
	Dias *int32 `json:"dias,omitempty"`
	// Clave del catálogo [Tipo de Horas](#tipo-de-Horas).
	TipoHoras *string `json:"tipo_horas,omitempty"`
	// Número de horas extra trabajadas en el periodo.
	HorasExtra *int32 `json:"horas_extra,omitempty"`
	// Importe pagado por las horas extra.
	ImportePagado *float32 `json:"importe_pagado,omitempty"`
}

// NewNominaHorasExtraProperties instantiates a new NominaHorasExtraProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNominaHorasExtraProperties() *NominaHorasExtraProperties {
	this := NominaHorasExtraProperties{}
	return &this
}

// NewNominaHorasExtraPropertiesWithDefaults instantiates a new NominaHorasExtraProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNominaHorasExtraPropertiesWithDefaults() *NominaHorasExtraProperties {
	this := NominaHorasExtraProperties{}
	return &this
}

// GetDias returns the Dias field value if set, zero value otherwise.
func (o *NominaHorasExtraProperties) GetDias() int32 {
	if o == nil || IsNil(o.Dias) {
		var ret int32
		return ret
	}
	return *o.Dias
}

// GetDiasOk returns a tuple with the Dias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NominaHorasExtraProperties) GetDiasOk() (*int32, bool) {
	if o == nil || IsNil(o.Dias) {
		return nil, false
	}
	return o.Dias, true
}

// HasDias returns a boolean if a field has been set.
func (o *NominaHorasExtraProperties) HasDias() bool {
	if o != nil && !IsNil(o.Dias) {
		return true
	}

	return false
}

// SetDias gets a reference to the given int32 and assigns it to the Dias field.
func (o *NominaHorasExtraProperties) SetDias(v int32) {
	o.Dias = &v
}

// GetTipoHoras returns the TipoHoras field value if set, zero value otherwise.
func (o *NominaHorasExtraProperties) GetTipoHoras() string {
	if o == nil || IsNil(o.TipoHoras) {
		var ret string
		return ret
	}
	return *o.TipoHoras
}

// GetTipoHorasOk returns a tuple with the TipoHoras field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NominaHorasExtraProperties) GetTipoHorasOk() (*string, bool) {
	if o == nil || IsNil(o.TipoHoras) {
		return nil, false
	}
	return o.TipoHoras, true
}

// HasTipoHoras returns a boolean if a field has been set.
func (o *NominaHorasExtraProperties) HasTipoHoras() bool {
	if o != nil && !IsNil(o.TipoHoras) {
		return true
	}

	return false
}

// SetTipoHoras gets a reference to the given string and assigns it to the TipoHoras field.
func (o *NominaHorasExtraProperties) SetTipoHoras(v string) {
	o.TipoHoras = &v
}

// GetHorasExtra returns the HorasExtra field value if set, zero value otherwise.
func (o *NominaHorasExtraProperties) GetHorasExtra() int32 {
	if o == nil || IsNil(o.HorasExtra) {
		var ret int32
		return ret
	}
	return *o.HorasExtra
}

// GetHorasExtraOk returns a tuple with the HorasExtra field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NominaHorasExtraProperties) GetHorasExtraOk() (*int32, bool) {
	if o == nil || IsNil(o.HorasExtra) {
		return nil, false
	}
	return o.HorasExtra, true
}

// HasHorasExtra returns a boolean if a field has been set.
func (o *NominaHorasExtraProperties) HasHorasExtra() bool {
	if o != nil && !IsNil(o.HorasExtra) {
		return true
	}

	return false
}

// SetHorasExtra gets a reference to the given int32 and assigns it to the HorasExtra field.
func (o *NominaHorasExtraProperties) SetHorasExtra(v int32) {
	o.HorasExtra = &v
}

// GetImportePagado returns the ImportePagado field value if set, zero value otherwise.
func (o *NominaHorasExtraProperties) GetImportePagado() float32 {
	if o == nil || IsNil(o.ImportePagado) {
		var ret float32
		return ret
	}
	return *o.ImportePagado
}

// GetImportePagadoOk returns a tuple with the ImportePagado field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NominaHorasExtraProperties) GetImportePagadoOk() (*float32, bool) {
	if o == nil || IsNil(o.ImportePagado) {
		return nil, false
	}
	return o.ImportePagado, true
}

// HasImportePagado returns a boolean if a field has been set.
func (o *NominaHorasExtraProperties) HasImportePagado() bool {
	if o != nil && !IsNil(o.ImportePagado) {
		return true
	}

	return false
}

// SetImportePagado gets a reference to the given float32 and assigns it to the ImportePagado field.
func (o *NominaHorasExtraProperties) SetImportePagado(v float32) {
	o.ImportePagado = &v
}

func (o NominaHorasExtraProperties) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NominaHorasExtraProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Dias) {
		toSerialize["dias"] = o.Dias
	}
	if !IsNil(o.TipoHoras) {
		toSerialize["tipo_horas"] = o.TipoHoras
	}
	if !IsNil(o.HorasExtra) {
		toSerialize["horas_extra"] = o.HorasExtra
	}
	if !IsNil(o.ImportePagado) {
		toSerialize["importe_pagado"] = o.ImportePagado
	}
	return toSerialize, nil
}

type NullableNominaHorasExtraProperties struct {
	value *NominaHorasExtraProperties
	isSet bool
}

func (v NullableNominaHorasExtraProperties) Get() *NominaHorasExtraProperties {
	return v.value
}

func (v *NullableNominaHorasExtraProperties) Set(val *NominaHorasExtraProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableNominaHorasExtraProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableNominaHorasExtraProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNominaHorasExtraProperties(val *NominaHorasExtraProperties) *NullableNominaHorasExtraProperties {
	return &NullableNominaHorasExtraProperties{value: val, isSet: true}
}

func (v NullableNominaHorasExtraProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNominaHorasExtraProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


