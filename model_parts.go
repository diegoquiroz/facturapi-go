/*
Facturapi

<br /> <br />  En esta página enlistamos todos los métodos disponibles en la API de Facturapi, así como la referencia completa de los parámetros que acepta cada uno. Para ver las propiedades anidadas de un objeto o arreglo de objetos, puedes hacer clic sobre el nombre del campo y expandirlo.  La API de Facturapi está diseñada con el estándar [REST](https://developer.mozilla.org/en-US/docs/Glossary/REST) en mente. Los endpoints de la API están agrupados por recursos, tienen URLs predecibles, las respuestas tienen formato JSON y usamos códigos HTTP de respuesta, autenticación y verbos estándar.  Durante el desarrollo, puedes usar la API de Facturapi en ambiente Test y las facturas que emitas no se enviarán al SAT ni tendrán validez fiscal.  La llave secreta que utilices para autenticarte determinará tanto el ambiente en el que se creará la factura (Test o Live), así como la organización a utilizar como emisor de tu factura, o bien como dueña del recurso que solicites crear. 

API version: 2.0
Contact: soporte@facturapi.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Parts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Parts{}

// Parts struct for Parts
type Parts struct {
	// Descripción del producto o servicio.
	Description *string `json:"description,omitempty"`
	// Clave de producto/servicio, del catálogo del SAT. Nosotros te proporcionamos una manera más conveniente de encontrarlo utilizando nuestra herramienta de búsqueda de claves.
	ProductKey *string `json:"product_key,omitempty"`
	// Cantidad
	Quantity *float32 `json:"quantity,omitempty"`
	// Identificador de uso interno designado por la empresa. Puede tener cualquier valor.
	Sku *string `json:"sku,omitempty"`
	// Precio unitario
	UnitPrice *float32 `json:"unit_price,omitempty"`
	// Nombre de la unidad de medida que expresa la cantidad.
	UnitName *string `json:"unit_name,omitempty"`
	CustomsKeys []string `json:"customs_keys,omitempty"`
}

// NewParts instantiates a new Parts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParts() *Parts {
	this := Parts{}
	return &this
}

// NewPartsWithDefaults instantiates a new Parts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPartsWithDefaults() *Parts {
	this := Parts{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Parts) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Parts) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Parts) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Parts) SetDescription(v string) {
	o.Description = &v
}

// GetProductKey returns the ProductKey field value if set, zero value otherwise.
func (o *Parts) GetProductKey() string {
	if o == nil || IsNil(o.ProductKey) {
		var ret string
		return ret
	}
	return *o.ProductKey
}

// GetProductKeyOk returns a tuple with the ProductKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Parts) GetProductKeyOk() (*string, bool) {
	if o == nil || IsNil(o.ProductKey) {
		return nil, false
	}
	return o.ProductKey, true
}

// HasProductKey returns a boolean if a field has been set.
func (o *Parts) HasProductKey() bool {
	if o != nil && !IsNil(o.ProductKey) {
		return true
	}

	return false
}

// SetProductKey gets a reference to the given string and assigns it to the ProductKey field.
func (o *Parts) SetProductKey(v string) {
	o.ProductKey = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *Parts) GetQuantity() float32 {
	if o == nil || IsNil(o.Quantity) {
		var ret float32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Parts) GetQuantityOk() (*float32, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *Parts) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given float32 and assigns it to the Quantity field.
func (o *Parts) SetQuantity(v float32) {
	o.Quantity = &v
}

// GetSku returns the Sku field value if set, zero value otherwise.
func (o *Parts) GetSku() string {
	if o == nil || IsNil(o.Sku) {
		var ret string
		return ret
	}
	return *o.Sku
}

// GetSkuOk returns a tuple with the Sku field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Parts) GetSkuOk() (*string, bool) {
	if o == nil || IsNil(o.Sku) {
		return nil, false
	}
	return o.Sku, true
}

// HasSku returns a boolean if a field has been set.
func (o *Parts) HasSku() bool {
	if o != nil && !IsNil(o.Sku) {
		return true
	}

	return false
}

// SetSku gets a reference to the given string and assigns it to the Sku field.
func (o *Parts) SetSku(v string) {
	o.Sku = &v
}

// GetUnitPrice returns the UnitPrice field value if set, zero value otherwise.
func (o *Parts) GetUnitPrice() float32 {
	if o == nil || IsNil(o.UnitPrice) {
		var ret float32
		return ret
	}
	return *o.UnitPrice
}

// GetUnitPriceOk returns a tuple with the UnitPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Parts) GetUnitPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.UnitPrice) {
		return nil, false
	}
	return o.UnitPrice, true
}

// HasUnitPrice returns a boolean if a field has been set.
func (o *Parts) HasUnitPrice() bool {
	if o != nil && !IsNil(o.UnitPrice) {
		return true
	}

	return false
}

// SetUnitPrice gets a reference to the given float32 and assigns it to the UnitPrice field.
func (o *Parts) SetUnitPrice(v float32) {
	o.UnitPrice = &v
}

// GetUnitName returns the UnitName field value if set, zero value otherwise.
func (o *Parts) GetUnitName() string {
	if o == nil || IsNil(o.UnitName) {
		var ret string
		return ret
	}
	return *o.UnitName
}

// GetUnitNameOk returns a tuple with the UnitName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Parts) GetUnitNameOk() (*string, bool) {
	if o == nil || IsNil(o.UnitName) {
		return nil, false
	}
	return o.UnitName, true
}

// HasUnitName returns a boolean if a field has been set.
func (o *Parts) HasUnitName() bool {
	if o != nil && !IsNil(o.UnitName) {
		return true
	}

	return false
}

// SetUnitName gets a reference to the given string and assigns it to the UnitName field.
func (o *Parts) SetUnitName(v string) {
	o.UnitName = &v
}

// GetCustomsKeys returns the CustomsKeys field value if set, zero value otherwise.
func (o *Parts) GetCustomsKeys() []string {
	if o == nil || IsNil(o.CustomsKeys) {
		var ret []string
		return ret
	}
	return o.CustomsKeys
}

// GetCustomsKeysOk returns a tuple with the CustomsKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Parts) GetCustomsKeysOk() ([]string, bool) {
	if o == nil || IsNil(o.CustomsKeys) {
		return nil, false
	}
	return o.CustomsKeys, true
}

// HasCustomsKeys returns a boolean if a field has been set.
func (o *Parts) HasCustomsKeys() bool {
	if o != nil && !IsNil(o.CustomsKeys) {
		return true
	}

	return false
}

// SetCustomsKeys gets a reference to the given []string and assigns it to the CustomsKeys field.
func (o *Parts) SetCustomsKeys(v []string) {
	o.CustomsKeys = v
}

func (o Parts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Parts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ProductKey) {
		toSerialize["product_key"] = o.ProductKey
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.Sku) {
		toSerialize["sku"] = o.Sku
	}
	if !IsNil(o.UnitPrice) {
		toSerialize["unit_price"] = o.UnitPrice
	}
	if !IsNil(o.UnitName) {
		toSerialize["unit_name"] = o.UnitName
	}
	if !IsNil(o.CustomsKeys) {
		toSerialize["customs_keys"] = o.CustomsKeys
	}
	return toSerialize, nil
}

type NullableParts struct {
	value *Parts
	isSet bool
}

func (v NullableParts) Get() *Parts {
	return v.value
}

func (v *NullableParts) Set(val *Parts) {
	v.value = val
	v.isSet = true
}

func (v NullableParts) IsSet() bool {
	return v.isSet
}

func (v *NullableParts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParts(val *Parts) *NullableParts {
	return &NullableParts{value: val, isSet: true}
}

func (v NullableParts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


