/*
Facturapi

<br /> <br />  En esta página enlistamos todos los métodos disponibles en la API de Facturapi, así como la referencia completa de los parámetros que acepta cada uno. Para ver las propiedades anidadas de un objeto o arreglo de objetos, puedes hacer clic sobre el nombre del campo y expandirlo.  La API de Facturapi está diseñada con el estándar [REST](https://developer.mozilla.org/en-US/docs/Glossary/REST) en mente. Los endpoints de la API están agrupados por recursos, tienen URLs predecibles, las respuestas tienen formato JSON y usamos códigos HTTP de respuesta, autenticación y verbos estándar.  Durante el desarrollo, puedes usar la API de Facturapi en ambiente Test y las facturas que emitas no se enviarán al SAT ni tendrán validez fiscal.  La llave secreta que utilices para autenticarte determinará tanto el ambiente en el que se creará la factura (Test o Live), así como la organización a utilizar como emisor de tu factura, o bien como dueña del recurso que solicites crear. 

API version: 2.0
Contact: soporte@facturapi.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the NominaSeparacionProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NominaSeparacionProperties{}

// NominaSeparacionProperties Objeto con información detallada de pagos por separación (despido) o indemnización.
type NominaSeparacionProperties struct {
	// Monto total pagado por concepto de separación o indemnización.
	TotalPagado *float32 `json:"total_pagado,omitempty"`
	// Años de servicio que laboró el trabajador, redondeado al entero inmediato superior.
	NumAnosServicio *int32 `json:"num_anos_servicio,omitempty"`
	// Último sueldo mensual ordinario percibido por el trabajador.
	UltimoSueldoMensOrd *float32 `json:"ultimo_sueldo_mens_ord,omitempty"`
	// Monto por ingresos acumulables.
	IngresoAcumulable *float32 `json:"ingreso_acumulable,omitempty"`
	// Monto por ingresos no acumulables.
	IngresoNoAcumulable *float32 `json:"ingreso_no_acumulable,omitempty"`
}

// NewNominaSeparacionProperties instantiates a new NominaSeparacionProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNominaSeparacionProperties() *NominaSeparacionProperties {
	this := NominaSeparacionProperties{}
	return &this
}

// NewNominaSeparacionPropertiesWithDefaults instantiates a new NominaSeparacionProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNominaSeparacionPropertiesWithDefaults() *NominaSeparacionProperties {
	this := NominaSeparacionProperties{}
	return &this
}

// GetTotalPagado returns the TotalPagado field value if set, zero value otherwise.
func (o *NominaSeparacionProperties) GetTotalPagado() float32 {
	if o == nil || IsNil(o.TotalPagado) {
		var ret float32
		return ret
	}
	return *o.TotalPagado
}

// GetTotalPagadoOk returns a tuple with the TotalPagado field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NominaSeparacionProperties) GetTotalPagadoOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalPagado) {
		return nil, false
	}
	return o.TotalPagado, true
}

// HasTotalPagado returns a boolean if a field has been set.
func (o *NominaSeparacionProperties) HasTotalPagado() bool {
	if o != nil && !IsNil(o.TotalPagado) {
		return true
	}

	return false
}

// SetTotalPagado gets a reference to the given float32 and assigns it to the TotalPagado field.
func (o *NominaSeparacionProperties) SetTotalPagado(v float32) {
	o.TotalPagado = &v
}

// GetNumAnosServicio returns the NumAnosServicio field value if set, zero value otherwise.
func (o *NominaSeparacionProperties) GetNumAnosServicio() int32 {
	if o == nil || IsNil(o.NumAnosServicio) {
		var ret int32
		return ret
	}
	return *o.NumAnosServicio
}

// GetNumAnosServicioOk returns a tuple with the NumAnosServicio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NominaSeparacionProperties) GetNumAnosServicioOk() (*int32, bool) {
	if o == nil || IsNil(o.NumAnosServicio) {
		return nil, false
	}
	return o.NumAnosServicio, true
}

// HasNumAnosServicio returns a boolean if a field has been set.
func (o *NominaSeparacionProperties) HasNumAnosServicio() bool {
	if o != nil && !IsNil(o.NumAnosServicio) {
		return true
	}

	return false
}

// SetNumAnosServicio gets a reference to the given int32 and assigns it to the NumAnosServicio field.
func (o *NominaSeparacionProperties) SetNumAnosServicio(v int32) {
	o.NumAnosServicio = &v
}

// GetUltimoSueldoMensOrd returns the UltimoSueldoMensOrd field value if set, zero value otherwise.
func (o *NominaSeparacionProperties) GetUltimoSueldoMensOrd() float32 {
	if o == nil || IsNil(o.UltimoSueldoMensOrd) {
		var ret float32
		return ret
	}
	return *o.UltimoSueldoMensOrd
}

// GetUltimoSueldoMensOrdOk returns a tuple with the UltimoSueldoMensOrd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NominaSeparacionProperties) GetUltimoSueldoMensOrdOk() (*float32, bool) {
	if o == nil || IsNil(o.UltimoSueldoMensOrd) {
		return nil, false
	}
	return o.UltimoSueldoMensOrd, true
}

// HasUltimoSueldoMensOrd returns a boolean if a field has been set.
func (o *NominaSeparacionProperties) HasUltimoSueldoMensOrd() bool {
	if o != nil && !IsNil(o.UltimoSueldoMensOrd) {
		return true
	}

	return false
}

// SetUltimoSueldoMensOrd gets a reference to the given float32 and assigns it to the UltimoSueldoMensOrd field.
func (o *NominaSeparacionProperties) SetUltimoSueldoMensOrd(v float32) {
	o.UltimoSueldoMensOrd = &v
}

// GetIngresoAcumulable returns the IngresoAcumulable field value if set, zero value otherwise.
func (o *NominaSeparacionProperties) GetIngresoAcumulable() float32 {
	if o == nil || IsNil(o.IngresoAcumulable) {
		var ret float32
		return ret
	}
	return *o.IngresoAcumulable
}

// GetIngresoAcumulableOk returns a tuple with the IngresoAcumulable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NominaSeparacionProperties) GetIngresoAcumulableOk() (*float32, bool) {
	if o == nil || IsNil(o.IngresoAcumulable) {
		return nil, false
	}
	return o.IngresoAcumulable, true
}

// HasIngresoAcumulable returns a boolean if a field has been set.
func (o *NominaSeparacionProperties) HasIngresoAcumulable() bool {
	if o != nil && !IsNil(o.IngresoAcumulable) {
		return true
	}

	return false
}

// SetIngresoAcumulable gets a reference to the given float32 and assigns it to the IngresoAcumulable field.
func (o *NominaSeparacionProperties) SetIngresoAcumulable(v float32) {
	o.IngresoAcumulable = &v
}

// GetIngresoNoAcumulable returns the IngresoNoAcumulable field value if set, zero value otherwise.
func (o *NominaSeparacionProperties) GetIngresoNoAcumulable() float32 {
	if o == nil || IsNil(o.IngresoNoAcumulable) {
		var ret float32
		return ret
	}
	return *o.IngresoNoAcumulable
}

// GetIngresoNoAcumulableOk returns a tuple with the IngresoNoAcumulable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NominaSeparacionProperties) GetIngresoNoAcumulableOk() (*float32, bool) {
	if o == nil || IsNil(o.IngresoNoAcumulable) {
		return nil, false
	}
	return o.IngresoNoAcumulable, true
}

// HasIngresoNoAcumulable returns a boolean if a field has been set.
func (o *NominaSeparacionProperties) HasIngresoNoAcumulable() bool {
	if o != nil && !IsNil(o.IngresoNoAcumulable) {
		return true
	}

	return false
}

// SetIngresoNoAcumulable gets a reference to the given float32 and assigns it to the IngresoNoAcumulable field.
func (o *NominaSeparacionProperties) SetIngresoNoAcumulable(v float32) {
	o.IngresoNoAcumulable = &v
}

func (o NominaSeparacionProperties) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NominaSeparacionProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TotalPagado) {
		toSerialize["total_pagado"] = o.TotalPagado
	}
	if !IsNil(o.NumAnosServicio) {
		toSerialize["num_anos_servicio"] = o.NumAnosServicio
	}
	if !IsNil(o.UltimoSueldoMensOrd) {
		toSerialize["ultimo_sueldo_mens_ord"] = o.UltimoSueldoMensOrd
	}
	if !IsNil(o.IngresoAcumulable) {
		toSerialize["ingreso_acumulable"] = o.IngresoAcumulable
	}
	if !IsNil(o.IngresoNoAcumulable) {
		toSerialize["ingreso_no_acumulable"] = o.IngresoNoAcumulable
	}
	return toSerialize, nil
}

type NullableNominaSeparacionProperties struct {
	value *NominaSeparacionProperties
	isSet bool
}

func (v NullableNominaSeparacionProperties) Get() *NominaSeparacionProperties {
	return v.value
}

func (v *NullableNominaSeparacionProperties) Set(val *NominaSeparacionProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableNominaSeparacionProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableNominaSeparacionProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNominaSeparacionProperties(val *NominaSeparacionProperties) *NullableNominaSeparacionProperties {
	return &NullableNominaSeparacionProperties{value: val, isSet: true}
}

func (v NullableNominaSeparacionProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNominaSeparacionProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


