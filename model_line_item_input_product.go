/*
Facturapi

<br /> <br />  En esta página enlistamos todos los métodos disponibles en la API de Facturapi, así como la referencia completa de los parámetros que acepta cada uno. Para ver las propiedades anidadas de un objeto o arreglo de objetos, puedes hacer clic sobre el nombre del campo y expandirlo.  La API de Facturapi está diseñada con el estándar [REST](https://developer.mozilla.org/en-US/docs/Glossary/REST) en mente. Los endpoints de la API están agrupados por recursos, tienen URLs predecibles, las respuestas tienen formato JSON y usamos códigos HTTP de respuesta, autenticación y verbos estándar.  Durante el desarrollo, puedes usar la API de Facturapi en ambiente Test y las facturas que emitas no se enviarán al SAT ni tendrán validez fiscal.  La llave secreta que utilices para autenticarte determinará tanto el ambiente en el que se creará la factura (Test o Live), así como la organización a utilizar como emisor de tu factura, o bien como dueña del recurso que solicites crear. 

API version: 2.0
Contact: soporte@facturapi.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// LineItemInputProduct - Objeto con información del producto o servicio facturado.
type LineItemInputProduct struct {
	LineItemProductInput *LineItemProductInput
	String *string
}

// LineItemProductInputAsLineItemInputProduct is a convenience function that returns LineItemProductInput wrapped in LineItemInputProduct
func LineItemProductInputAsLineItemInputProduct(v *LineItemProductInput) LineItemInputProduct {
	return LineItemInputProduct{
		LineItemProductInput: v,
	}
}

// stringAsLineItemInputProduct is a convenience function that returns string wrapped in LineItemInputProduct
func StringAsLineItemInputProduct(v *string) LineItemInputProduct {
	return LineItemInputProduct{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *LineItemInputProduct) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into LineItemProductInput
	err = newStrictDecoder(data).Decode(&dst.LineItemProductInput)
	if err == nil {
		jsonLineItemProductInput, _ := json.Marshal(dst.LineItemProductInput)
		if string(jsonLineItemProductInput) == "{}" { // empty struct
			dst.LineItemProductInput = nil
		} else {
			match++
		}
	} else {
		dst.LineItemProductInput = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.LineItemProductInput = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(LineItemInputProduct)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(LineItemInputProduct)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src LineItemInputProduct) MarshalJSON() ([]byte, error) {
	if src.LineItemProductInput != nil {
		return json.Marshal(&src.LineItemProductInput)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *LineItemInputProduct) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.LineItemProductInput != nil {
		return obj.LineItemProductInput
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableLineItemInputProduct struct {
	value *LineItemInputProduct
	isSet bool
}

func (v NullableLineItemInputProduct) Get() *LineItemInputProduct {
	return v.value
}

func (v *NullableLineItemInputProduct) Set(val *LineItemInputProduct) {
	v.value = val
	v.isSet = true
}

func (v NullableLineItemInputProduct) IsSet() bool {
	return v.isSet
}

func (v *NullableLineItemInputProduct) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLineItemInputProduct(val *LineItemInputProduct) *NullableLineItemInputProduct {
	return &NullableLineItemInputProduct{value: val, isSet: true}
}

func (v NullableLineItemInputProduct) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLineItemInputProduct) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


