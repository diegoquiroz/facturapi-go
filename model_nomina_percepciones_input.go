/*
Facturapi

<br /> <br />  En esta página enlistamos todos los métodos disponibles en la API de Facturapi, así como la referencia completa de los parámetros que acepta cada uno. Para ver las propiedades anidadas de un objeto o arreglo de objetos, puedes hacer clic sobre el nombre del campo y expandirlo.  La API de Facturapi está diseñada con el estándar [REST](https://developer.mozilla.org/en-US/docs/Glossary/REST) en mente. Los endpoints de la API están agrupados por recursos, tienen URLs predecibles, las respuestas tienen formato JSON y usamos códigos HTTP de respuesta, autenticación y verbos estándar.  Durante el desarrollo, puedes usar la API de Facturapi en ambiente Test y las facturas que emitas no se enviarán al SAT ni tendrán validez fiscal.  La llave secreta que utilices para autenticarte determinará tanto el ambiente en el que se creará la factura (Test o Live), así como la organización a utilizar como emisor de tu factura, o bien como dueña del recurso que solicites crear. 

API version: 2.0
Contact: soporte@facturapi.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the NominaPercepcionesInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NominaPercepcionesInput{}

// NominaPercepcionesInput Objeto para indicar las percepciones aplicables.
type NominaPercepcionesInput struct {
	Percepcion []NominaPercepcionInput `json:"percepcion"`
	JubilacionPensionRetiro *NominaJubilacionInput `json:"jubilacion_pension_retiro,omitempty"`
	SeparacionIndemnizacion *NominaSeparacionInput `json:"separacion_indemnizacion,omitempty"`
}

// NewNominaPercepcionesInput instantiates a new NominaPercepcionesInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNominaPercepcionesInput(percepcion []NominaPercepcionInput) *NominaPercepcionesInput {
	this := NominaPercepcionesInput{}
	this.Percepcion = percepcion
	return &this
}

// NewNominaPercepcionesInputWithDefaults instantiates a new NominaPercepcionesInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNominaPercepcionesInputWithDefaults() *NominaPercepcionesInput {
	this := NominaPercepcionesInput{}
	return &this
}

// GetPercepcion returns the Percepcion field value
func (o *NominaPercepcionesInput) GetPercepcion() []NominaPercepcionInput {
	if o == nil {
		var ret []NominaPercepcionInput
		return ret
	}

	return o.Percepcion
}

// GetPercepcionOk returns a tuple with the Percepcion field value
// and a boolean to check if the value has been set.
func (o *NominaPercepcionesInput) GetPercepcionOk() ([]NominaPercepcionInput, bool) {
	if o == nil {
		return nil, false
	}
	return o.Percepcion, true
}

// SetPercepcion sets field value
func (o *NominaPercepcionesInput) SetPercepcion(v []NominaPercepcionInput) {
	o.Percepcion = v
}

// GetJubilacionPensionRetiro returns the JubilacionPensionRetiro field value if set, zero value otherwise.
func (o *NominaPercepcionesInput) GetJubilacionPensionRetiro() NominaJubilacionInput {
	if o == nil || IsNil(o.JubilacionPensionRetiro) {
		var ret NominaJubilacionInput
		return ret
	}
	return *o.JubilacionPensionRetiro
}

// GetJubilacionPensionRetiroOk returns a tuple with the JubilacionPensionRetiro field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NominaPercepcionesInput) GetJubilacionPensionRetiroOk() (*NominaJubilacionInput, bool) {
	if o == nil || IsNil(o.JubilacionPensionRetiro) {
		return nil, false
	}
	return o.JubilacionPensionRetiro, true
}

// HasJubilacionPensionRetiro returns a boolean if a field has been set.
func (o *NominaPercepcionesInput) HasJubilacionPensionRetiro() bool {
	if o != nil && !IsNil(o.JubilacionPensionRetiro) {
		return true
	}

	return false
}

// SetJubilacionPensionRetiro gets a reference to the given NominaJubilacionInput and assigns it to the JubilacionPensionRetiro field.
func (o *NominaPercepcionesInput) SetJubilacionPensionRetiro(v NominaJubilacionInput) {
	o.JubilacionPensionRetiro = &v
}

// GetSeparacionIndemnizacion returns the SeparacionIndemnizacion field value if set, zero value otherwise.
func (o *NominaPercepcionesInput) GetSeparacionIndemnizacion() NominaSeparacionInput {
	if o == nil || IsNil(o.SeparacionIndemnizacion) {
		var ret NominaSeparacionInput
		return ret
	}
	return *o.SeparacionIndemnizacion
}

// GetSeparacionIndemnizacionOk returns a tuple with the SeparacionIndemnizacion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NominaPercepcionesInput) GetSeparacionIndemnizacionOk() (*NominaSeparacionInput, bool) {
	if o == nil || IsNil(o.SeparacionIndemnizacion) {
		return nil, false
	}
	return o.SeparacionIndemnizacion, true
}

// HasSeparacionIndemnizacion returns a boolean if a field has been set.
func (o *NominaPercepcionesInput) HasSeparacionIndemnizacion() bool {
	if o != nil && !IsNil(o.SeparacionIndemnizacion) {
		return true
	}

	return false
}

// SetSeparacionIndemnizacion gets a reference to the given NominaSeparacionInput and assigns it to the SeparacionIndemnizacion field.
func (o *NominaPercepcionesInput) SetSeparacionIndemnizacion(v NominaSeparacionInput) {
	o.SeparacionIndemnizacion = &v
}

func (o NominaPercepcionesInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NominaPercepcionesInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["percepcion"] = o.Percepcion
	if !IsNil(o.JubilacionPensionRetiro) {
		toSerialize["jubilacion_pension_retiro"] = o.JubilacionPensionRetiro
	}
	if !IsNil(o.SeparacionIndemnizacion) {
		toSerialize["separacion_indemnizacion"] = o.SeparacionIndemnizacion
	}
	return toSerialize, nil
}

type NullableNominaPercepcionesInput struct {
	value *NominaPercepcionesInput
	isSet bool
}

func (v NullableNominaPercepcionesInput) Get() *NominaPercepcionesInput {
	return v.value
}

func (v *NullableNominaPercepcionesInput) Set(val *NominaPercepcionesInput) {
	v.value = val
	v.isSet = true
}

func (v NullableNominaPercepcionesInput) IsSet() bool {
	return v.isSet
}

func (v *NullableNominaPercepcionesInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNominaPercepcionesInput(val *NominaPercepcionesInput) *NullableNominaPercepcionesInput {
	return &NullableNominaPercepcionesInput{value: val, isSet: true}
}

func (v NullableNominaPercepcionesInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNominaPercepcionesInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


