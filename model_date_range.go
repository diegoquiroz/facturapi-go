/*
Facturapi

<br /> <br />  En esta página enlistamos todos los métodos disponibles en la API de Facturapi, así como la referencia completa de los parámetros que acepta cada uno. Para ver las propiedades anidadas de un objeto o arreglo de objetos, puedes hacer clic sobre el nombre del campo y expandirlo.  La API de Facturapi está diseñada con el estándar [REST](https://developer.mozilla.org/en-US/docs/Glossary/REST) en mente. Los endpoints de la API están agrupados por recursos, tienen URLs predecibles, las respuestas tienen formato JSON y usamos códigos HTTP de respuesta, autenticación y verbos estándar.  Durante el desarrollo, puedes usar la API de Facturapi en ambiente Test y las facturas que emitas no se enviarán al SAT ni tendrán validez fiscal.  La llave secreta que utilices para autenticarte determinará tanto el ambiente en el que se creará la factura (Test o Live), así como la organización a utilizar como emisor de tu factura, o bien como dueña del recurso que solicites crear. 

API version: 2.0
Contact: soporte@facturapi.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package facturapi-go

import (
	"encoding/json"
	"time"
)

// checks if the DateRange type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DateRange{}

// DateRange struct for DateRange
type DateRange struct {
	// Límite inferior exclusivo del rango de fechas a solicitar.
	Gt *time.Time `json:"gt,omitempty"`
	// Límite inferior inclusivo del rango de fechas a solicitar.
	Gte *time.Time `json:"gte,omitempty"`
	// Límite superior exclusivo del rango de fechas a solicitar.
	Lt *time.Time `json:"lt,omitempty"`
	// Límite superior inclusivo del rango de fechas a solicitar.
	Lte *time.Time `json:"lte,omitempty"`
}

// NewDateRange instantiates a new DateRange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDateRange() *DateRange {
	this := DateRange{}
	return &this
}

// NewDateRangeWithDefaults instantiates a new DateRange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDateRangeWithDefaults() *DateRange {
	this := DateRange{}
	return &this
}

// GetGt returns the Gt field value if set, zero value otherwise.
func (o *DateRange) GetGt() time.Time {
	if o == nil || IsNil(o.Gt) {
		var ret time.Time
		return ret
	}
	return *o.Gt
}

// GetGtOk returns a tuple with the Gt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DateRange) GetGtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Gt) {
		return nil, false
	}
	return o.Gt, true
}

// HasGt returns a boolean if a field has been set.
func (o *DateRange) HasGt() bool {
	if o != nil && !IsNil(o.Gt) {
		return true
	}

	return false
}

// SetGt gets a reference to the given time.Time and assigns it to the Gt field.
func (o *DateRange) SetGt(v time.Time) {
	o.Gt = &v
}

// GetGte returns the Gte field value if set, zero value otherwise.
func (o *DateRange) GetGte() time.Time {
	if o == nil || IsNil(o.Gte) {
		var ret time.Time
		return ret
	}
	return *o.Gte
}

// GetGteOk returns a tuple with the Gte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DateRange) GetGteOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Gte) {
		return nil, false
	}
	return o.Gte, true
}

// HasGte returns a boolean if a field has been set.
func (o *DateRange) HasGte() bool {
	if o != nil && !IsNil(o.Gte) {
		return true
	}

	return false
}

// SetGte gets a reference to the given time.Time and assigns it to the Gte field.
func (o *DateRange) SetGte(v time.Time) {
	o.Gte = &v
}

// GetLt returns the Lt field value if set, zero value otherwise.
func (o *DateRange) GetLt() time.Time {
	if o == nil || IsNil(o.Lt) {
		var ret time.Time
		return ret
	}
	return *o.Lt
}

// GetLtOk returns a tuple with the Lt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DateRange) GetLtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Lt) {
		return nil, false
	}
	return o.Lt, true
}

// HasLt returns a boolean if a field has been set.
func (o *DateRange) HasLt() bool {
	if o != nil && !IsNil(o.Lt) {
		return true
	}

	return false
}

// SetLt gets a reference to the given time.Time and assigns it to the Lt field.
func (o *DateRange) SetLt(v time.Time) {
	o.Lt = &v
}

// GetLte returns the Lte field value if set, zero value otherwise.
func (o *DateRange) GetLte() time.Time {
	if o == nil || IsNil(o.Lte) {
		var ret time.Time
		return ret
	}
	return *o.Lte
}

// GetLteOk returns a tuple with the Lte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DateRange) GetLteOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Lte) {
		return nil, false
	}
	return o.Lte, true
}

// HasLte returns a boolean if a field has been set.
func (o *DateRange) HasLte() bool {
	if o != nil && !IsNil(o.Lte) {
		return true
	}

	return false
}

// SetLte gets a reference to the given time.Time and assigns it to the Lte field.
func (o *DateRange) SetLte(v time.Time) {
	o.Lte = &v
}

func (o DateRange) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DateRange) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Gt) {
		toSerialize["gt"] = o.Gt
	}
	if !IsNil(o.Gte) {
		toSerialize["gte"] = o.Gte
	}
	if !IsNil(o.Lt) {
		toSerialize["lt"] = o.Lt
	}
	if !IsNil(o.Lte) {
		toSerialize["lte"] = o.Lte
	}
	return toSerialize, nil
}

type NullableDateRange struct {
	value *DateRange
	isSet bool
}

func (v NullableDateRange) Get() *DateRange {
	return v.value
}

func (v *NullableDateRange) Set(val *DateRange) {
	v.value = val
	v.isSet = true
}

func (v NullableDateRange) IsSet() bool {
	return v.isSet
}

func (v *NullableDateRange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDateRange(val *DateRange) *NullableDateRange {
	return &NullableDateRange{value: val, isSet: true}
}

func (v NullableDateRange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDateRange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


